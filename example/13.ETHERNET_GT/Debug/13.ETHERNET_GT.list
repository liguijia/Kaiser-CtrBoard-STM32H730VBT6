
13.ETHERNET_GT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e980  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bbc  0800ec50  0800ec50  0000fc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801180c  0801180c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011814  08011814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011818  08011818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000008c  24000000  0801181c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400008c  080118a8  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000ec  08011908  000130ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007cc8  2400014c  08011968  0001314c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  24007e14  08011968  00013e14  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001314c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb5c  00000000  00000000  0001317a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f23  00000000  00000000  0002ecd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00033c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbe  00000000  00000000  00034ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e442  00000000  00000000  00035fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000279a3  00000000  00000000  000743f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00154946  00000000  00000000  0009bd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f06d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057cc  00000000  00000000  001f071c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001f5ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400014c 	.word	0x2400014c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ec38 	.word	0x0800ec38

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000150 	.word	0x24000150
 800030c:	0800ec38 	.word	0x0800ec38

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b6:	4b21      	ldr	r3, [pc, #132]	@ (800043c <MX_GPIO_Init+0x8c>)
 80003b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003bc:	4a1f      	ldr	r2, [pc, #124]	@ (800043c <MX_GPIO_Init+0x8c>)
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003c6:	4b1d      	ldr	r3, [pc, #116]	@ (800043c <MX_GPIO_Init+0x8c>)
 80003c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003d4:	4b19      	ldr	r3, [pc, #100]	@ (800043c <MX_GPIO_Init+0x8c>)
 80003d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003da:	4a18      	ldr	r2, [pc, #96]	@ (800043c <MX_GPIO_Init+0x8c>)
 80003dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003e4:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_GPIO_Init+0x8c>)
 80003e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b12      	ldr	r3, [pc, #72]	@ (800043c <MX_GPIO_Init+0x8c>)
 80003f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003f8:	4a10      	ldr	r2, [pc, #64]	@ (800043c <MX_GPIO_Init+0x8c>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000402:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <MX_GPIO_Init+0x8c>)
 8000404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000410:	4b0a      	ldr	r3, [pc, #40]	@ (800043c <MX_GPIO_Init+0x8c>)
 8000412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000416:	4a09      	ldr	r2, [pc, #36]	@ (800043c <MX_GPIO_Init+0x8c>)
 8000418:	f043 0302 	orr.w	r3, r3, #2
 800041c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <MX_GPIO_Init+0x8c>)
 8000422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	603b      	str	r3, [r7, #0]
 800042c:	683b      	ldr	r3, [r7, #0]

}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	58024400 	.word	0x58024400

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000446:	f000 f8df 	bl	8000608 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800044a:	4b36      	ldr	r3, [pc, #216]	@ (8000524 <main+0xe4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000452:	2b00      	cmp	r3, #0
 8000454:	d11b      	bne.n	800048e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000456:	f3bf 8f4f 	dsb	sy
}
 800045a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800045c:	f3bf 8f6f 	isb	sy
}
 8000460:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000462:	4b30      	ldr	r3, [pc, #192]	@ (8000524 <main+0xe4>)
 8000464:	2200      	movs	r2, #0
 8000466:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800046a:	f3bf 8f4f 	dsb	sy
}
 800046e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000470:	f3bf 8f6f 	isb	sy
}
 8000474:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000476:	4b2b      	ldr	r3, [pc, #172]	@ (8000524 <main+0xe4>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a2a      	ldr	r2, [pc, #168]	@ (8000524 <main+0xe4>)
 800047c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000480:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000482:	f3bf 8f4f 	dsb	sy
}
 8000486:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000488:	f3bf 8f6f 	isb	sy
}
 800048c:	e000      	b.n	8000490 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800048e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000490:	4b24      	ldr	r3, [pc, #144]	@ (8000524 <main+0xe4>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000498:	2b00      	cmp	r3, #0
 800049a:	d138      	bne.n	800050e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800049c:	4b21      	ldr	r3, [pc, #132]	@ (8000524 <main+0xe4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004a4:	f3bf 8f4f 	dsb	sy
}
 80004a8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000524 <main+0xe4>)
 80004ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004b0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	0b5b      	lsrs	r3, r3, #13
 80004b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004ba:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	08db      	lsrs	r3, r3, #3
 80004c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004c4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	015a      	lsls	r2, r3, #5
 80004ca:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80004ce:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004d4:	4913      	ldr	r1, [pc, #76]	@ (8000524 <main+0xe4>)
 80004d6:	4313      	orrs	r3, r2
 80004d8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	1e5a      	subs	r2, r3, #1
 80004e0:	607a      	str	r2, [r7, #4]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d1ef      	bne.n	80004c6 <main+0x86>
    } while(sets-- != 0U);
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	1e5a      	subs	r2, r3, #1
 80004ea:	60ba      	str	r2, [r7, #8]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1e5      	bne.n	80004bc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80004f0:	f3bf 8f4f 	dsb	sy
}
 80004f4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000524 <main+0xe4>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <main+0xe4>)
 80004fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000500:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000502:	f3bf 8f4f 	dsb	sy
}
 8000506:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000508:	f3bf 8f6f 	isb	sy
}
 800050c:	e000      	b.n	8000510 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800050e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fb6a 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f808 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f7ff ff4a 	bl	80003b0 <MX_GPIO_Init>
  MX_LWIP_Init();
 800051c:	f003 f9aa 	bl	8003874 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <main+0xe0>
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b09c      	sub	sp, #112	@ 0x70
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000532:	224c      	movs	r2, #76	@ 0x4c
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f00d fcd9 	bl	800deee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2220      	movs	r2, #32
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f00d fcd3 	bl	800deee <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000548:	2002      	movs	r0, #2
 800054a:	f002 fa1f 	bl	800298c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	4b2c      	ldr	r3, [pc, #176]	@ (8000604 <SystemClock_Config+0xdc>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	4a2b      	ldr	r2, [pc, #172]	@ (8000604 <SystemClock_Config+0xdc>)
 8000558:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800055c:	6193      	str	r3, [r2, #24]
 800055e:	4b29      	ldr	r3, [pc, #164]	@ (8000604 <SystemClock_Config+0xdc>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800056a:	bf00      	nop
 800056c:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <SystemClock_Config+0xdc>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000574:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000578:	d1f8      	bne.n	800056c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057a:	2302      	movs	r3, #2
 800057c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800057e:	2301      	movs	r3, #1
 8000580:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000582:	2340      	movs	r3, #64	@ 0x40
 8000584:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058a:	2300      	movs	r3, #0
 800058c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800058e:	2304      	movs	r3, #4
 8000590:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8000592:	231f      	movs	r3, #31
 8000594:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800059a:	2302      	movs	r3, #2
 800059c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800059e:	2302      	movs	r3, #2
 80005a0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005a2:	230c      	movs	r3, #12
 80005a4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 80005aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fa23 	bl	8002a00 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c0:	f000 f84f 	bl	8000662 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	233f      	movs	r3, #63	@ 0x3f
 80005c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2303      	movs	r3, #3
 80005ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005d0:	2308      	movs	r3, #8
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005d4:	2340      	movs	r3, #64	@ 0x40
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005d8:	2340      	movs	r3, #64	@ 0x40
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005e2:	2340      	movs	r3, #64	@ 0x40
 80005e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2103      	movs	r1, #3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fde2 	bl	80031b4 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005f6:	f000 f834 	bl	8000662 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3770      	adds	r7, #112	@ 0x70
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	58024800 	.word	0x58024800

08000608 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800061a:	f000 fc6f 	bl	8000efc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800061e:	2301      	movs	r3, #1
 8000620:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000622:	2300      	movs	r3, #0
 8000624:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000626:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800062a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 800062c:	2313      	movs	r3, #19
 800062e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000630:	2300      	movs	r3, #0
 8000632:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000634:	2301      	movs	r3, #1
 8000636:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000638:	2303      	movs	r3, #3
 800063a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800063c:	2301      	movs	r3, #1
 800063e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000640:	2300      	movs	r3, #0
 8000642:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800064c:	463b      	mov	r3, r7
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fc8c 	bl	8000f6c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000654:	2004      	movs	r0, #4
 8000656:	f000 fc69 	bl	8000f2c <HAL_MPU_Enable>

}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000666:	b672      	cpsid	i
}
 8000668:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066a:	bf00      	nop
 800066c:	e7fd      	b.n	800066a <Error_Handler+0x8>
	...

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <HAL_MspInit+0x30>)
 8000678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800067c:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <HAL_MspInit+0x30>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <HAL_MspInit+0x30>)
 8000688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	58024400 	.word	0x58024400

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <NMI_Handler+0x4>

080006ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <HardFault_Handler+0x4>

080006b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <MemManage_Handler+0x4>

080006bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <BusFault_Handler+0x4>

080006c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <UsageFault_Handler+0x4>

080006cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fa:	f000 fae7 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}

08000702 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  return 1;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <_kill>:

int _kill(int pid, int sig)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800071e:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <_kill+0x20>)
 8000720:	2216      	movs	r2, #22
 8000722:	601a      	str	r2, [r3, #0]
  return -1;
 8000724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	24007e04 	.word	0x24007e04

08000738 <_exit>:

void _exit (int status)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000740:	f04f 31ff 	mov.w	r1, #4294967295
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ffe5 	bl	8000714 <_kill>
  while (1) {}    /* Make sure we hang here */
 800074a:	bf00      	nop
 800074c:	e7fd      	b.n	800074a <_exit+0x12>

0800074e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	e00a      	b.n	8000776 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000760:	f3af 8000 	nop.w
 8000764:	4601      	mov	r1, r0
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	60ba      	str	r2, [r7, #8]
 800076c:	b2ca      	uxtb	r2, r1
 800076e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	3301      	adds	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	429a      	cmp	r2, r3
 800077c:	dbf0      	blt.n	8000760 <_read+0x12>
  }

  return len;
 800077e:	687b      	ldr	r3, [r7, #4]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	e009      	b.n	80007ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	60ba      	str	r2, [r7, #8]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	3301      	adds	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	dbf1      	blt.n	800079a <_write+0x12>
  }
  return len;
 80007b6:	687b      	ldr	r3, [r7, #4]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <_close>:

int _close(int file)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007e8:	605a      	str	r2, [r3, #4]
  return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <_isatty>:

int _isatty(int file)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000800:	2301      	movs	r3, #1
}
 8000802:	4618      	mov	r0, r3
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800080e:	b480      	push	{r7}
 8000810:	b085      	sub	sp, #20
 8000812:	af00      	add	r7, sp, #0
 8000814:	60f8      	str	r0, [r7, #12]
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000828:	b480      	push	{r7}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000830:	4a14      	ldr	r2, [pc, #80]	@ (8000884 <_sbrk+0x5c>)
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <_sbrk+0x60>)
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800083c:	4b13      	ldr	r3, [pc, #76]	@ (800088c <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <_sbrk+0x64>)
 8000846:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <_sbrk+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	429a      	cmp	r2, r3
 8000856:	d205      	bcs.n	8000864 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000858:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <_sbrk+0x6c>)
 800085a:	220c      	movs	r2, #12
 800085c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	e009      	b.n	8000878 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <_sbrk+0x64>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <_sbrk+0x64>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	4a06      	ldr	r2, [pc, #24]	@ (800088c <_sbrk+0x64>)
 8000874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	4618      	mov	r0, r3
 800087a:	371c      	adds	r7, #28
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	24050000 	.word	0x24050000
 8000888:	00004000 	.word	0x00004000
 800088c:	24000168 	.word	0x24000168
 8000890:	24007e18 	.word	0x24007e18
 8000894:	24007e04 	.word	0x24007e04

08000898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800089c:	4b32      	ldr	r3, [pc, #200]	@ (8000968 <SystemInit+0xd0>)
 800089e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008a2:	4a31      	ldr	r2, [pc, #196]	@ (8000968 <SystemInit+0xd0>)
 80008a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008ac:	4b2f      	ldr	r3, [pc, #188]	@ (800096c <SystemInit+0xd4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	2b06      	cmp	r3, #6
 80008b6:	d807      	bhi.n	80008c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008b8:	4b2c      	ldr	r3, [pc, #176]	@ (800096c <SystemInit+0xd4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f023 030f 	bic.w	r3, r3, #15
 80008c0:	4a2a      	ldr	r2, [pc, #168]	@ (800096c <SystemInit+0xd4>)
 80008c2:	f043 0307 	orr.w	r3, r3, #7
 80008c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008c8:	4b29      	ldr	r3, [pc, #164]	@ (8000970 <SystemInit+0xd8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a28      	ldr	r2, [pc, #160]	@ (8000970 <SystemInit+0xd8>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008d4:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <SystemInit+0xd8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008da:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <SystemInit+0xd8>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4924      	ldr	r1, [pc, #144]	@ (8000970 <SystemInit+0xd8>)
 80008e0:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <SystemInit+0xdc>)
 80008e2:	4013      	ands	r3, r2
 80008e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008e6:	4b21      	ldr	r3, [pc, #132]	@ (800096c <SystemInit+0xd4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d007      	beq.n	8000902 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008f2:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <SystemInit+0xd4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f023 030f 	bic.w	r3, r3, #15
 80008fa:	4a1c      	ldr	r2, [pc, #112]	@ (800096c <SystemInit+0xd4>)
 80008fc:	f043 0307 	orr.w	r3, r3, #7
 8000900:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000902:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <SystemInit+0xd8>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000908:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <SystemInit+0xd8>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <SystemInit+0xd8>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <SystemInit+0xd8>)
 8000916:	4a18      	ldr	r2, [pc, #96]	@ (8000978 <SystemInit+0xe0>)
 8000918:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <SystemInit+0xd8>)
 800091c:	4a17      	ldr	r2, [pc, #92]	@ (800097c <SystemInit+0xe4>)
 800091e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000920:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <SystemInit+0xd8>)
 8000922:	4a17      	ldr	r2, [pc, #92]	@ (8000980 <SystemInit+0xe8>)
 8000924:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <SystemInit+0xd8>)
 8000928:	2200      	movs	r2, #0
 800092a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800092c:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <SystemInit+0xd8>)
 800092e:	4a14      	ldr	r2, [pc, #80]	@ (8000980 <SystemInit+0xe8>)
 8000930:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <SystemInit+0xd8>)
 8000934:	2200      	movs	r2, #0
 8000936:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000938:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <SystemInit+0xd8>)
 800093a:	4a11      	ldr	r2, [pc, #68]	@ (8000980 <SystemInit+0xe8>)
 800093c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <SystemInit+0xd8>)
 8000940:	2200      	movs	r2, #0
 8000942:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000944:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <SystemInit+0xd8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a09      	ldr	r2, [pc, #36]	@ (8000970 <SystemInit+0xd8>)
 800094a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800094e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <SystemInit+0xd8>)
 8000952:	2200      	movs	r2, #0
 8000954:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000956:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <SystemInit+0xec>)
 8000958:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800095c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00
 800096c:	52002000 	.word	0x52002000
 8000970:	58024400 	.word	0x58024400
 8000974:	eaf6ed7f 	.word	0xeaf6ed7f
 8000978:	02020200 	.word	0x02020200
 800097c:	01ff0000 	.word	0x01ff0000
 8000980:	01010280 	.word	0x01010280
 8000984:	52004000 	.word	0x52004000

08000988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800098c:	f7ff ff84 	bl	8000898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000990:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000992:	490d      	ldr	r1, [pc, #52]	@ (80009c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000994:	4a0d      	ldr	r2, [pc, #52]	@ (80009cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a8:	4c0a      	ldr	r4, [pc, #40]	@ (80009d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b6:	f00d fae9 	bl	800df8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ba:	f7ff fd41 	bl	8000440 <main>
  bx  lr
 80009be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80009c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009c8:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 80009cc:	0801181c 	.word	0x0801181c
  ldr r2, =_sbss
 80009d0:	2400014c 	.word	0x2400014c
  ldr r4, =_ebss
 80009d4:	24007e14 	.word	0x24007e14

080009d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC3_IRQHandler>

080009da <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00b      	beq.n	8000a02 <LAN8742_RegisterBusIO+0x28>
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d007      	beq.n	8000a02 <LAN8742_RegisterBusIO+0x28>
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <LAN8742_RegisterBusIO+0x28>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d102      	bne.n	8000a08 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	e014      	b.n	8000a32 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68da      	ldr	r2, [r3, #12]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	691a      	ldr	r2, [r3, #16]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d139      	bne.n	8000ace <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d002      	beq.n	8000a68 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e01c      	b.n	8000aae <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	f107 020c 	add.w	r2, r7, #12
 8000a7c:	2112      	movs	r1, #18
 8000a7e:	6978      	ldr	r0, [r7, #20]
 8000a80:	4798      	blx	r3
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	da03      	bge.n	8000a90 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000a88:	f06f 0304 	mvn.w	r3, #4
 8000a8c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000a8e:	e00b      	b.n	8000aa8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 031f 	and.w	r3, r3, #31
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d105      	bne.n	8000aa8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
         break;
 8000aa6:	e005      	b.n	8000ab4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2b1f      	cmp	r3, #31
 8000ab2:	d9df      	bls.n	8000a74 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b1f      	cmp	r3, #31
 8000aba:	d902      	bls.n	8000ac2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000abc:	f06f 0302 	mvn.w	r3, #2
 8000ac0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000ace:	693b      	ldr	r3, [r7, #16]
 }
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	6810      	ldr	r0, [r2, #0]
 8000aec:	f107 020c 	add.w	r2, r7, #12
 8000af0:	2101      	movs	r1, #1
 8000af2:	4798      	blx	r3
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da02      	bge.n	8000b00 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000afa:	f06f 0304 	mvn.w	r3, #4
 8000afe:	e06e      	b.n	8000bde <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	6810      	ldr	r0, [r2, #0]
 8000b08:	f107 020c 	add.w	r2, r7, #12
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	4798      	blx	r3
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da02      	bge.n	8000b1c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b16:	f06f 0304 	mvn.w	r3, #4
 8000b1a:	e060      	b.n	8000bde <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d101      	bne.n	8000b2a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e059      	b.n	8000bde <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	6810      	ldr	r0, [r2, #0]
 8000b32:	f107 020c 	add.w	r2, r7, #12
 8000b36:	2100      	movs	r1, #0
 8000b38:	4798      	blx	r3
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	da02      	bge.n	8000b46 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b40:	f06f 0304 	mvn.w	r3, #4
 8000b44:	e04b      	b.n	8000bde <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d11b      	bne.n	8000b88 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <LAN8742_GetLinkState+0x90>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000b64:	2302      	movs	r3, #2
 8000b66:	e03a      	b.n	8000bde <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000b72:	2303      	movs	r3, #3
 8000b74:	e033      	b.n	8000bde <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000b80:	2304      	movs	r3, #4
 8000b82:	e02c      	b.n	8000bde <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000b84:	2305      	movs	r3, #5
 8000b86:	e02a      	b.n	8000bde <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	6810      	ldr	r0, [r2, #0]
 8000b90:	f107 020c 	add.w	r2, r7, #12
 8000b94:	211f      	movs	r1, #31
 8000b96:	4798      	blx	r3
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	da02      	bge.n	8000ba4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000b9e:	f06f 0304 	mvn.w	r3, #4
 8000ba2:	e01c      	b.n	8000bde <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000bae:	2306      	movs	r3, #6
 8000bb0:	e015      	b.n	8000bde <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f003 031c 	and.w	r3, r3, #28
 8000bb8:	2b18      	cmp	r3, #24
 8000bba:	d101      	bne.n	8000bc0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	e00e      	b.n	8000bde <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 031c 	and.w	r3, r3, #28
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d101      	bne.n	8000bce <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e007      	b.n	8000bde <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f003 031c 	and.w	r3, r3, #28
 8000bd4:	2b14      	cmp	r3, #20
 8000bd6:	d101      	bne.n	8000bdc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	e000      	b.n	8000bde <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000bdc:	2305      	movs	r3, #5
    }
  }
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f000 f952 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bf4:	f002 fc94 	bl	8003520 <HAL_RCC_GetSysClockFreq>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_Init+0x68>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	f003 030f 	and.w	r3, r3, #15
 8000c04:	4913      	ldr	r1, [pc, #76]	@ (8000c54 <HAL_Init+0x6c>)
 8000c06:	5ccb      	ldrb	r3, [r1, r3]
 8000c08:	f003 031f 	and.w	r3, r3, #31
 8000c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <HAL_Init+0x68>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c54 <HAL_Init+0x6c>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	f003 031f 	and.w	r3, r3, #31
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	fa22 f303 	lsr.w	r3, r2, r3
 8000c28:	4a0b      	ldr	r2, [pc, #44]	@ (8000c58 <HAL_Init+0x70>)
 8000c2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c5c <HAL_Init+0x74>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c32:	200f      	movs	r0, #15
 8000c34:	f000 f814 	bl	8000c60 <HAL_InitTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e002      	b.n	8000c48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c42:	f7ff fd15 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	58024400 	.word	0x58024400
 8000c54:	08011630 	.word	0x08011630
 8000c58:	24000004 	.word	0x24000004
 8000c5c:	24000000 	.word	0x24000000

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c68:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <HAL_InitTick+0x60>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e021      	b.n	8000cb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c74:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <HAL_InitTick+0x64>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <HAL_InitTick+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f929 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00e      	b.n	8000cb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d80a      	bhi.n	8000cb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 f901 	bl	8000eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cac:	4a06      	ldr	r2, [pc, #24]	@ (8000cc8 <HAL_InitTick+0x68>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2400000c 	.word	0x2400000c
 8000cc4:	24000000 	.word	0x24000000
 8000cc8:	24000008 	.word	0x24000008

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	2400000c 	.word	0x2400000c
 8000cf0:	2400016c 	.word	0x2400016c

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2400016c 	.word	0x2400016c

08000d0c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8000d1c:	4904      	ldr	r1, [pc, #16]	@ (8000d30 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	604b      	str	r3, [r1, #4]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	58000400 	.word	0x58000400

08000d34 <__NVIC_SetPriorityGrouping>:
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <__NVIC_SetPriorityGrouping+0x40>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <__NVIC_SetPriorityGrouping+0x40>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00
 8000d78:	05fa0000 	.word	0x05fa0000

08000d7c <__NVIC_GetPriorityGrouping>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_SetPriority>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	@ (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	@ (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	@ 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	@ 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f7ff ff8e 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff47 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff5e 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff90 	bl	8000dec <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5f 	bl	8000d98 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffb2 	bl	8000e54 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f00:	f3bf 8f5f 	dmb	sy
}
 8000f04:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <HAL_MPU_Disable+0x28>)
 8000f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0a:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_MPU_Disable+0x28>)
 8000f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f10:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f12:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <HAL_MPU_Disable+0x2c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	e000ed90 	.word	0xe000ed90

08000f2c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f34:	4a0b      	ldr	r2, [pc, #44]	@ (8000f64 <HAL_MPU_Enable+0x38>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <HAL_MPU_Enable+0x3c>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f42:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <HAL_MPU_Enable+0x3c>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f48:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4a:	f3bf 8f4f 	dsb	sy
}
 8000f4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f50:	f3bf 8f6f 	isb	sy
}
 8000f54:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed90 	.word	0xe000ed90
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	785a      	ldrb	r2, [r3, #1]
 8000f78:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <HAL_MPU_ConfigRegion+0x7c>)
 8000f7a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <HAL_MPU_ConfigRegion+0x7c>)
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <HAL_MPU_ConfigRegion+0x7c>)
 8000f82:	f023 0301 	bic.w	r3, r3, #1
 8000f86:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000f88:	4a17      	ldr	r2, [pc, #92]	@ (8000fe8 <HAL_MPU_ConfigRegion+0x7c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7b1b      	ldrb	r3, [r3, #12]
 8000f94:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7adb      	ldrb	r3, [r3, #11]
 8000f9a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7a9b      	ldrb	r3, [r3, #10]
 8000fa2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7b5b      	ldrb	r3, [r3, #13]
 8000faa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7b9b      	ldrb	r3, [r3, #14]
 8000fb2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7bdb      	ldrb	r3, [r3, #15]
 8000fba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7a5b      	ldrb	r3, [r3, #9]
 8000fc2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7a1b      	ldrb	r3, [r3, #8]
 8000fca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fcc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fd4:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fd6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fd8:	6113      	str	r3, [r2, #16]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed90 	.word	0xe000ed90

08000fec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e0e3      	b.n	80011c6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001004:	2b00      	cmp	r3, #0
 8001006:	d106      	bne.n	8001016 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2223      	movs	r2, #35	@ 0x23
 800100c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f002 fec7 	bl	8003da4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b6e      	ldr	r3, [pc, #440]	@ (80011d0 <HAL_ETH_Init+0x1e4>)
 8001018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800101c:	4a6c      	ldr	r2, [pc, #432]	@ (80011d0 <HAL_ETH_Init+0x1e4>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001026:	4b6a      	ldr	r3, [pc, #424]	@ (80011d0 <HAL_ETH_Init+0x1e4>)
 8001028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7a1b      	ldrb	r3, [r3, #8]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d103      	bne.n	8001044 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff fe65 	bl	8000d0c <HAL_SYSCFG_ETHInterfaceSelect>
 8001042:	e003      	b.n	800104c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001044:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001048:	f7ff fe60 	bl	8000d0c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800104c:	4b61      	ldr	r3, [pc, #388]	@ (80011d4 <HAL_ETH_Init+0x1e8>)
 800104e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001066:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001068:	f7ff fe44 	bl	8000cf4 <HAL_GetTick>
 800106c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800106e:	e011      	b.n	8001094 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001070:	f7ff fe40 	bl	8000cf4 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800107e:	d909      	bls.n	8001094 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2204      	movs	r2, #4
 8001084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	22e0      	movs	r2, #224	@ 0xe0
 800108c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e098      	b.n	80011c6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1e4      	bne.n	8001070 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fcf6 	bl	8001a98 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80010ac:	f002 fbb2 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a49      	ldr	r2, [pc, #292]	@ (80011d8 <HAL_ETH_Init+0x1ec>)
 80010b4:	fba2 2303 	umull	r2, r3, r2, r3
 80010b8:	0c9a      	lsrs	r2, r3, #18
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3a01      	subs	r2, #1
 80010c0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 fed9 	bl	8001e7c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80010d6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80010e6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d009      	beq.n	800110a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	22e0      	movs	r2, #224	@ 0xe0
 8001102:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e05d      	b.n	80011c6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001112:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <HAL_ETH_Init+0x1f0>)
 8001118:	4013      	ands	r3, r2
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6952      	ldr	r2, [r2, #20]
 800111e:	0051      	lsls	r1, r2, #1
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	430b      	orrs	r3, r1
 8001126:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800112a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 ff41 	bl	8001fb6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 ff87 	bl	8002048 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	3305      	adds	r3, #5
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	021a      	lsls	r2, r3, #8
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	3304      	adds	r3, #4
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	3303      	adds	r3, #3
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	061a      	lsls	r2, r3, #24
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	3302      	adds	r3, #2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	041b      	lsls	r3, r3, #16
 800116c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001178:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001186:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001188:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <HAL_ETH_Init+0x1f4>)
 800119a:	430b      	orrs	r3, r1
 800119c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <HAL_ETH_Init+0x1f8>)
 80011ae:	430b      	orrs	r3, r1
 80011b0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2210      	movs	r2, #16
 80011c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	58024400 	.word	0x58024400
 80011d4:	58000400 	.word	0x58000400
 80011d8:	431bde83 	.word	0x431bde83
 80011dc:	ffff8001 	.word	0xffff8001
 80011e0:	0c020060 	.word	0x0c020060
 80011e4:	0c20c000 	.word	0x0c20c000

080011e8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d153      	bne.n	80012a2 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2223      	movs	r2, #35	@ 0x23
 80011fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2204      	movs	r2, #4
 8001206:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f936 	bl	800147a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0202 	orr.w	r2, r2, #2
 800121c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0201 	orr.w	r2, r2, #1
 800122c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0201 	orr.w	r2, r2, #1
 800123e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800124a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800125a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001266:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001276:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001282:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 800128e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001292:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2223      	movs	r2, #35	@ 0x23
 800129a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
  }
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012ba:	2b23      	cmp	r3, #35	@ 0x23
 80012bc:	d13f      	bne.n	800133e <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2223      	movs	r2, #35	@ 0x23
 80012c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012de:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	f023 0301 	bic.w	r3, r3, #1
 80012f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012fa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0201 	bic.w	r2, r2, #1
 800130c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0202 	bic.w	r2, r2, #2
 8001330:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2210      	movs	r2, #16
 8001336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
  }
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001364:	f043 0201 	orr.w	r2, r3, #1
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e07f      	b.n	8001472 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001378:	2b23      	cmp	r3, #35	@ 0x23
 800137a:	d179      	bne.n	8001470 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800137c:	2200      	movs	r2, #0
 800137e:	68b9      	ldr	r1, [r7, #8]
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 febf 	bl	8002104 <ETH_Prepare_Tx_Descriptors>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d009      	beq.n	80013a0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001392:	f043 0202 	orr.w	r2, r3, #2
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e068      	b.n	8001472 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 80013a0:	f3bf 8f4f 	dsb	sy
}
 80013a4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3206      	adds	r2, #6
 80013ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d904      	bls.n	80013d0 <HAL_ETH_Transmit+0x84>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ca:	1f1a      	subs	r2, r3, #4
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3106      	adds	r1, #6
 80013dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013e4:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 80013e8:	f7ff fc84 	bl	8000cf4 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80013ee:	e039      	b.n	8001464 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013f8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80013fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d012      	beq.n	800142a <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800140a:	f043 0208 	orr.w	r2, r3, #8
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800141c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e023      	b.n	8001472 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001430:	d018      	beq.n	8001464 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001432:	f7ff fc5f 	bl	8000cf4 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	d302      	bcc.n	8001448 <HAL_ETH_Transmit+0xfc>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10d      	bne.n	8001464 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144e:	f043 0204 	orr.w	r2, r3, #4
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800145e:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e006      	b.n	8001472 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	dbc1      	blt.n	80013f0 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	e000      	b.n	8001472 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
  }
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b088      	sub	sp, #32
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001486:	2301      	movs	r3, #1
 8001488:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800148e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	3212      	adds	r2, #18
 8001496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014a0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80014a2:	e038      	b.n	8001516 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d112      	bne.n	80014d2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fdfd 	bl	80040b0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	74fb      	strb	r3, [r7, #19]
 80014c0:	e007      	b.n	80014d2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	461a      	mov	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	461a      	mov	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80014d2:	7cfb      	ldrb	r3, [r7, #19]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d01e      	beq.n	8001516 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	e003      	b.n	80014f2 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80014f0:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d902      	bls.n	8001504 <ETH_UpdateDescriptor+0x8a>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b04      	subs	r3, #4
 8001502:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	3212      	adds	r2, #18
 800150a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150e:	617b      	str	r3, [r7, #20]
      desccount--;
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	3b01      	subs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <ETH_UpdateDescriptor+0xa8>
 800151c:	7cfb      	ldrb	r3, [r7, #19]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1c0      	bne.n	80014a4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	429a      	cmp	r2, r3
 800152a:	d01b      	beq.n	8001564 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	3301      	adds	r3, #1
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001536:	f3bf 8f5f 	dmb	sy
}
 800153a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6919      	ldr	r1, [r3, #16]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	18ca      	adds	r2, r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001554:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e03e      	b.n	800160c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001596:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	055b      	lsls	r3, r3, #21
 80015a2:	4313      	orrs	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	041b      	lsls	r3, r3, #16
 80015b0:	4313      	orrs	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f043 030c 	orr.w	r3, r3, #12
 80015ba:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80015ce:	f7ff fb91 	bl	8000cf4 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80015d4:	e009      	b.n	80015ea <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80015d6:	f7ff fb8d 	bl	8000cf4 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015e4:	d901      	bls.n	80015ea <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e010      	b.n	800160c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ed      	bne.n	80015d6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e03c      	b.n	80016b0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800163e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	055b      	lsls	r3, r3, #21
 800164a:	4313      	orrs	r3, r2
 800164c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	041b      	lsls	r3, r3, #16
 8001658:	4313      	orrs	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f023 030c 	bic.w	r3, r3, #12
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <HAL_ETH_WritePHYRegister+0xa4>)
 8001676:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800167a:	4a0f      	ldr	r2, [pc, #60]	@ (80016b8 <HAL_ETH_WritePHYRegister+0xa4>)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001682:	f7ff fb37 	bl	8000cf4 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001688:	e009      	b.n	800169e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800168a:	f7ff fb33 	bl	8000cf4 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001698:	d901      	bls.n	800169e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e008      	b.n	80016b0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ed      	bne.n	800168a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40028000 	.word	0x40028000

080016bc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e1c3      	b.n	8001a58 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 020c 	and.w	r2, r3, #12
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf14      	ite	ne
 80016ec:	2301      	movne	r3, #1
 80016ee:	2300      	moveq	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf0c      	ite	eq
 8001716:	2301      	moveq	r3, #1
 8001718:	2300      	movne	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001748:	2b00      	cmp	r3, #0
 800174a:	bf0c      	ite	eq
 800174c:	2301      	moveq	r3, #1
 800174e:	2300      	movne	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800175e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf14      	ite	ne
 8001780:	2301      	movne	r3, #1
 8001782:	2300      	moveq	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf14      	ite	ne
 80017b6:	2301      	movne	r3, #1
 80017b8:	2300      	moveq	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf14      	ite	ne
 8001804:	2301      	movne	r3, #1
 8001806:	2300      	moveq	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf14      	ite	ne
 8001838:	2301      	movne	r3, #1
 800183a:	2300      	moveq	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800184a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf14      	ite	ne
 8001852:	2301      	movne	r3, #1
 8001854:	2300      	moveq	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	bf14      	ite	ne
 800187a:	2301      	movne	r3, #1
 800187c:	2300      	moveq	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf0c      	ite	eq
 80018b0:	2301      	moveq	r3, #1
 80018b2:	2300      	movne	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf14      	ite	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	2300      	moveq	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80018e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf14      	ite	ne
 8001904:	2301      	movne	r3, #1
 8001906:	2300      	moveq	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0e5b      	lsrs	r3, r3, #25
 800191a:	f003 021f 	and.w	r2, r3, #31
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f003 020f 	and.w	r2, r3, #15
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	bf14      	ite	ne
 800195a:	2301      	movne	r3, #1
 800195c:	2300      	moveq	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001972:	2b00      	cmp	r3, #0
 8001974:	bf0c      	ite	eq
 8001976:	2301      	moveq	r3, #1
 8001978:	2300      	movne	r3, #0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001998:	0c1b      	lsrs	r3, r3, #16
 800199a:	b29a      	uxth	r2, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c6:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80019e4:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80019f4:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf14      	ite	ne
 8001a0c:	2301      	movne	r3, #1
 8001a0e:	2300      	moveq	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf14      	ite	ne
 8001a2a:	2301      	movne	r3, #1
 8001a2c:	2300      	moveq	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8001a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e00b      	b.n	8001a90 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d105      	bne.n	8001a8e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001a82:	6839      	ldr	r1, [r7, #0]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f857 	bl	8001b38 <ETH_SetMACConfig>

    return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
  }
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ab2:	f001 feaf 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 8001ab6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4a1a      	ldr	r2, [pc, #104]	@ (8001b24 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d804      	bhi.n	8001aca <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e022      	b.n	8001b10 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	4a16      	ldr	r2, [pc, #88]	@ (8001b28 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d204      	bcs.n	8001adc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e019      	b.n	8001b10 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4a13      	ldr	r2, [pc, #76]	@ (8001b2c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d915      	bls.n	8001b10 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4a12      	ldr	r2, [pc, #72]	@ (8001b30 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d804      	bhi.n	8001af6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e00c      	b.n	8001b10 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b34 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d804      	bhi.n	8001b08 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e003      	b.n	8001b10 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	02160ebf 	.word	0x02160ebf
 8001b28:	03938700 	.word	0x03938700
 8001b2c:	05f5e0ff 	.word	0x05f5e0ff
 8001b30:	08f0d17f 	.word	0x08f0d17f
 8001b34:	0ee6b27f 	.word	0x0ee6b27f

08001b38 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001b4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	791b      	ldrb	r3, [r3, #4]
 8001b50:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001b52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	7b1b      	ldrb	r3, [r3, #12]
 8001b58:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001b5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	7b5b      	ldrb	r3, [r3, #13]
 8001b60:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	7b9b      	ldrb	r3, [r3, #14]
 8001b68:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	7bdb      	ldrb	r3, [r3, #15]
 8001b70:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b72:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	7c12      	ldrb	r2, [r2, #16]
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d102      	bne.n	8001b82 <ETH_SetMACConfig+0x4a>
 8001b7c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b80:	e000      	b.n	8001b84 <ETH_SetMACConfig+0x4c>
 8001b82:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b84:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	7c52      	ldrb	r2, [r2, #17]
 8001b8a:	2a00      	cmp	r2, #0
 8001b8c:	d102      	bne.n	8001b94 <ETH_SetMACConfig+0x5c>
 8001b8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b92:	e000      	b.n	8001b96 <ETH_SetMACConfig+0x5e>
 8001b94:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	7c9b      	ldrb	r3, [r3, #18]
 8001b9c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b9e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001ba4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001baa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	7f1b      	ldrb	r3, [r3, #28]
 8001bb0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001bb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	7f5b      	ldrb	r3, [r3, #29]
 8001bb8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001bba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	7f92      	ldrb	r2, [r2, #30]
 8001bc0:	2a00      	cmp	r2, #0
 8001bc2:	d102      	bne.n	8001bca <ETH_SetMACConfig+0x92>
 8001bc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bc8:	e000      	b.n	8001bcc <ETH_SetMACConfig+0x94>
 8001bca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001bcc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	7fdb      	ldrb	r3, [r3, #31]
 8001bd2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001bd4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d102      	bne.n	8001be6 <ETH_SetMACConfig+0xae>
 8001be0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001be4:	e000      	b.n	8001be8 <ETH_SetMACConfig+0xb0>
 8001be6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001be8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001bee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001bf6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001bf8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b56      	ldr	r3, [pc, #344]	@ (8001d64 <ETH_SetMACConfig+0x22c>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	68f9      	ldr	r1, [r7, #12]
 8001c12:	430b      	orrs	r3, r1
 8001c14:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c1a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c22:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c2c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001c36:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c38:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d102      	bne.n	8001c4a <ETH_SetMACConfig+0x112>
 8001c44:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c48:	e000      	b.n	8001c4c <ETH_SetMACConfig+0x114>
 8001c4a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c4c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4b42      	ldr	r3, [pc, #264]	@ (8001d68 <ETH_SetMACConfig+0x230>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	430b      	orrs	r3, r1
 8001c68:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c70:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4b3a      	ldr	r3, [pc, #232]	@ (8001d6c <ETH_SetMACConfig+0x234>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c94:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c9a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001ca2:	2a00      	cmp	r2, #0
 8001ca4:	d101      	bne.n	8001caa <ETH_SetMACConfig+0x172>
 8001ca6:	2280      	movs	r2, #128	@ 0x80
 8001ca8:	e000      	b.n	8001cac <ETH_SetMACConfig+0x174>
 8001caa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001cac:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cb2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001cbe:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	68f9      	ldr	r1, [r7, #12]
 8001cca:	430b      	orrs	r3, r1
 8001ccc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001cd4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001cdc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cea:	f023 0103 	bic.w	r1, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001d02:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001d1e:	2a00      	cmp	r2, #0
 8001d20:	d101      	bne.n	8001d26 <ETH_SetMACConfig+0x1ee>
 8001d22:	2240      	movs	r2, #64	@ 0x40
 8001d24:	e000      	b.n	8001d28 <ETH_SetMACConfig+0x1f0>
 8001d26:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d28:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001d30:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001d3a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001d48:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	00048083 	.word	0x00048083
 8001d68:	c0f88000 	.word	0xc0f88000
 8001d6c:	fffffef0 	.word	0xfffffef0

08001d70 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <ETH_SetDMAConfig+0xf8>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	6811      	ldr	r1, [r2, #0]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d96:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	791b      	ldrb	r3, [r3, #4]
 8001d9c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001da2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	7b1b      	ldrb	r3, [r3, #12]
 8001da8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <ETH_SetDMAConfig+0xfc>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	68f9      	ldr	r1, [r7, #12]
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dc8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	7b5b      	ldrb	r3, [r3, #13]
 8001dce:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001de4:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <ETH_SetDMAConfig+0x100>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	68f9      	ldr	r1, [r7, #12]
 8001dee:	430b      	orrs	r3, r1
 8001df0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001df4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	7d1b      	ldrb	r3, [r3, #20]
 8001e00:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e02:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	7f5b      	ldrb	r3, [r3, #29]
 8001e08:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e16:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001e1a:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <ETH_SetDMAConfig+0x104>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	68f9      	ldr	r1, [r7, #12]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e2a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	7f1b      	ldrb	r3, [r3, #28]
 8001e32:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e44:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <ETH_SetDMAConfig+0x108>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	68f9      	ldr	r1, [r7, #12]
 8001e52:	430b      	orrs	r3, r1
 8001e54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e58:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	ffff87fd 	.word	0xffff87fd
 8001e6c:	ffff2ffe 	.word	0xffff2ffe
 8001e70:	fffec000 	.word	0xfffec000
 8001e74:	ffc0efef 	.word	0xffc0efef
 8001e78:	7fc0ffff 	.word	0x7fc0ffff

08001e7c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b0a4      	sub	sp, #144	@ 0x90
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001eb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ebc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001ed4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001ed8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001efe:	2300      	movs	r3, #0
 8001f00:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f14:	2320      	movs	r3, #32
 8001f16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f26:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f30:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001f56:	2300      	movs	r3, #0
 8001f58:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f64:	4619      	mov	r1, r3
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fde6 	bl	8001b38 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f70:	2301      	movs	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f86:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f8a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f94:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001f9c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001fa0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fee1 	bl	8001d70 <ETH_SetDMAConfig>
}
 8001fae:	bf00      	nop
 8001fb0:	3790      	adds	r7, #144	@ 0x90
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	e01d      	b.n	8002000 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68d9      	ldr	r1, [r3, #12]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	440b      	add	r3, r1
 8001fd4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	3206      	adds	r2, #6
 8001ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d9de      	bls.n	8001fc4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002014:	461a      	mov	r2, r3
 8002016:	2303      	movs	r3, #3
 8002018:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002028:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002038:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e023      	b.n	800209e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6919      	ldr	r1, [r3, #16]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2200      	movs	r2, #0
 8002072:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	3212      	adds	r2, #18
 8002094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	3301      	adds	r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d9d8      	bls.n	8002056 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ca:	461a      	mov	r2, r3
 80020cc:	2303      	movs	r3, #3
 80020ce:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020de:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002104:	b480      	push	{r7}
 8002106:	b091      	sub	sp, #68	@ 0x44
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3318      	adds	r3, #24
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800212a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800213a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002142:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002146:	d007      	beq.n	8002158 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800214a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800214c:	3304      	adds	r3, #4
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002158:	2302      	movs	r3, #2
 800215a:	e266      	b.n	800262a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d044      	beq.n	80021f2 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	4b75      	ldr	r3, [pc, #468]	@ (8002344 <ETH_Prepare_Tx_Descriptors+0x240>)
 800216e:	4013      	ands	r3, r2
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002174:	431a      	orrs	r2, r3
 8002176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002178:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800217a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002184:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002194:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d027      	beq.n	80021f2 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80021a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	431a      	orrs	r2, r3
 80021b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80021b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021be:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80021c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021cc:	431a      	orrs	r2, r3
 80021ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80021e0:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80021f0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00e      	beq.n	800221c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80021fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	4b51      	ldr	r3, [pc, #324]	@ (8002348 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002204:	4013      	ands	r3, r2
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	6992      	ldr	r2, [r2, #24]
 800220a:	431a      	orrs	r2, r3
 800220c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800220e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8002218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b00      	cmp	r3, #0
 8002232:	d036      	beq.n	80022a2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800223c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002240:	f3bf 8f5f 	dmb	sy
}
 8002244:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800224e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002250:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002254:	3301      	adds	r3, #1
 8002256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800225a:	2b03      	cmp	r3, #3
 800225c:	d902      	bls.n	8002264 <ETH_Prepare_Tx_Descriptors+0x160>
 800225e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002260:	3b04      	subs	r3, #4
 8002262:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800226e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002270:	3301      	adds	r3, #1
 8002272:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800227c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002280:	d10f      	bne.n	80022a2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	6a3a      	ldr	r2, [r7, #32]
 8002286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800228c:	f3bf 8f5f 	dmb	sy
}
 8002290:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800229a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	e1c3      	b.n	800262a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80022a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a4:	3301      	adds	r3, #1
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80022a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80022b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	4b24      	ldr	r3, [pc, #144]	@ (8002348 <ETH_Prepare_Tx_Descriptors+0x244>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022bc:	6852      	ldr	r2, [r2, #4]
 80022be:	431a      	orrs	r2, r3
 80022c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c2:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80022c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d012      	beq.n	80022f2 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80022cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80022d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022da:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80022dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <ETH_Prepare_Tx_Descriptors+0x248>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022e6:	6852      	ldr	r2, [r2, #4]
 80022e8:	0412      	lsls	r2, r2, #16
 80022ea:	431a      	orrs	r2, r3
 80022ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	e008      	b.n	8002304 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80022f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80022f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b13      	ldr	r3, [pc, #76]	@ (800234c <ETH_Prepare_Tx_Descriptors+0x248>)
 80022fe:	4013      	ands	r3, r2
 8002300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002302:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	d021      	beq.n	8002354 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	04db      	lsls	r3, r3, #19
 800231e:	431a      	orrs	r2, r3
 8002320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002322:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	4b09      	ldr	r3, [pc, #36]	@ (8002350 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800232a:	4013      	ands	r3, r2
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	69d2      	ldr	r2, [r2, #28]
 8002330:	431a      	orrs	r2, r3
 8002332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002334:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800233e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	e02e      	b.n	80023a2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002344:	ffff0000 	.word	0xffff0000
 8002348:	ffffc000 	.word	0xffffc000
 800234c:	c000ffff 	.word	0xc000ffff
 8002350:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4b7b      	ldr	r3, [pc, #492]	@ (8002548 <ETH_Prepare_Tx_Descriptors+0x444>)
 800235a:	4013      	ands	r3, r2
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	6852      	ldr	r2, [r2, #4]
 8002360:	431a      	orrs	r2, r3
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	431a      	orrs	r2, r3
 8002380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002382:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	431a      	orrs	r2, r3
 800239e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80023ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ba:	431a      	orrs	r2, r3
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80023c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80023c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ca:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80023cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80023d8:	f3bf 8f5f 	dmb	sy
}
 80023dc:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80023de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e8:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80da 	beq.w	80025ac <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80023f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	431a      	orrs	r2, r3
 8002406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002408:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800240a:	e0cf      	b.n	80025ac <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800240c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002416:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800241a:	3301      	adds	r3, #1
 800241c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800241e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002420:	2b03      	cmp	r3, #3
 8002422:	d902      	bls.n	800242a <ETH_Prepare_Tx_Descriptors+0x326>
 8002424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002426:	3b04      	subs	r3, #4
 8002428:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800242e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002432:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800243c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002448:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800244c:	d007      	beq.n	800245e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800244e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002452:	3304      	adds	r3, #4
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d029      	beq.n	80024b2 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800246c:	2300      	movs	r3, #0
 800246e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002470:	e019      	b.n	80024a6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002472:	f3bf 8f5f 	dmb	sy
}
 8002476:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002482:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002486:	3301      	adds	r3, #1
 8002488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800248a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800248c:	2b03      	cmp	r3, #3
 800248e:	d902      	bls.n	8002496 <ETH_Prepare_Tx_Descriptors+0x392>
 8002490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002492:	3b04      	subs	r3, #4
 8002494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80024a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a2:	3301      	adds	r3, #1
 80024a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d3e1      	bcc.n	8002472 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80024ae:	2302      	movs	r3, #2
 80024b0:	e0bb      	b.n	800262a <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 80024b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b4:	3301      	adds	r3, #1
 80024b6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80024b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80024be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80024c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	4b1f      	ldr	r3, [pc, #124]	@ (800254c <ETH_Prepare_Tx_Descriptors+0x448>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024d2:	6852      	ldr	r2, [r2, #4]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80024da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d012      	beq.n	8002508 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80024e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80024e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	4b16      	ldr	r3, [pc, #88]	@ (8002550 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024fc:	6852      	ldr	r2, [r2, #4]
 80024fe:	0412      	lsls	r2, r2, #16
 8002500:	431a      	orrs	r2, r3
 8002502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	e008      	b.n	800251a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250a:	2200      	movs	r2, #0
 800250c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800250e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002514:	4013      	ands	r3, r2
 8002516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002518:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	d018      	beq.n	8002558 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <ETH_Prepare_Tx_Descriptors+0x450>)
 800252c:	4013      	ands	r3, r2
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	69d2      	ldr	r2, [r2, #28]
 8002532:	431a      	orrs	r2, r3
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002542:	60da      	str	r2, [r3, #12]
 8002544:	e020      	b.n	8002588 <ETH_Prepare_Tx_Descriptors+0x484>
 8002546:	bf00      	nop
 8002548:	ffff8000 	.word	0xffff8000
 800254c:	ffffc000 	.word	0xffffc000
 8002550:	c000ffff 	.word	0xc000ffff
 8002554:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	4b36      	ldr	r3, [pc, #216]	@ (8002638 <ETH_Prepare_Tx_Descriptors+0x534>)
 800255e:	4013      	ands	r3, r2
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	6852      	ldr	r2, [r2, #4]
 8002564:	431a      	orrs	r2, r3
 8002566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002568:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	431a      	orrs	r2, r3
 8002584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002586:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258a:	3301      	adds	r3, #1
 800258c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800258e:	f3bf 8f5f 	dmb	sy
}
 8002592:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800259c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025aa:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80025ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f47f af2b 	bne.w	800240c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80025bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	e005      	b.n	80025d6 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80025ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80025d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e0:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ea:	3304      	adds	r3, #4
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025f6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f8:	f3ef 8310 	mrs	r3, PRIMASK
 80025fc:	613b      	str	r3, [r7, #16]
  return(result);
 80025fe:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	2301      	movs	r3, #1
 8002604:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f383 8810 	msr	PRIMASK, r3
}
 800260c:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002614:	4413      	add	r3, r2
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	629a      	str	r2, [r3, #40]	@ 0x28
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f383 8810 	msr	PRIMASK, r3
}
 8002626:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3744      	adds	r7, #68	@ 0x44
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	ffff8000 	.word	0xffff8000

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	@ 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800264a:	4b86      	ldr	r3, [pc, #536]	@ (8002864 <HAL_GPIO_Init+0x228>)
 800264c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800264e:	e18c      	b.n	800296a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2101      	movs	r1, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 817e 	beq.w	8002964 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d005      	beq.n	8002680 <HAL_GPIO_Init+0x44>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d130      	bne.n	80026e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026b6:	2201      	movs	r2, #1
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 0201 	and.w	r2, r3, #1
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d017      	beq.n	800271e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d123      	bne.n	8002772 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	08da      	lsrs	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3208      	adds	r2, #8
 8002732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	220f      	movs	r2, #15
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	08da      	lsrs	r2, r3, #3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3208      	adds	r2, #8
 800276c:	69b9      	ldr	r1, [r7, #24]
 800276e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2203      	movs	r2, #3
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0203 	and.w	r2, r3, #3
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80d8 	beq.w	8002964 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002868 <HAL_GPIO_Init+0x22c>)
 80027b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002868 <HAL_GPIO_Init+0x22c>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027c4:	4b28      	ldr	r3, [pc, #160]	@ (8002868 <HAL_GPIO_Init+0x22c>)
 80027c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027d2:	4a26      	ldr	r2, [pc, #152]	@ (800286c <HAL_GPIO_Init+0x230>)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	220f      	movs	r2, #15
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <HAL_GPIO_Init+0x234>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d04a      	beq.n	8002894 <HAL_GPIO_Init+0x258>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1c      	ldr	r2, [pc, #112]	@ (8002874 <HAL_GPIO_Init+0x238>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02b      	beq.n	800285e <HAL_GPIO_Init+0x222>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a1b      	ldr	r2, [pc, #108]	@ (8002878 <HAL_GPIO_Init+0x23c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d025      	beq.n	800285a <HAL_GPIO_Init+0x21e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1a      	ldr	r2, [pc, #104]	@ (800287c <HAL_GPIO_Init+0x240>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01f      	beq.n	8002856 <HAL_GPIO_Init+0x21a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a19      	ldr	r2, [pc, #100]	@ (8002880 <HAL_GPIO_Init+0x244>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d019      	beq.n	8002852 <HAL_GPIO_Init+0x216>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a18      	ldr	r2, [pc, #96]	@ (8002884 <HAL_GPIO_Init+0x248>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_GPIO_Init+0x212>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a17      	ldr	r2, [pc, #92]	@ (8002888 <HAL_GPIO_Init+0x24c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00d      	beq.n	800284a <HAL_GPIO_Init+0x20e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a16      	ldr	r2, [pc, #88]	@ (800288c <HAL_GPIO_Init+0x250>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <HAL_GPIO_Init+0x20a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a15      	ldr	r2, [pc, #84]	@ (8002890 <HAL_GPIO_Init+0x254>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_GPIO_Init+0x206>
 800283e:	2309      	movs	r3, #9
 8002840:	e029      	b.n	8002896 <HAL_GPIO_Init+0x25a>
 8002842:	230a      	movs	r3, #10
 8002844:	e027      	b.n	8002896 <HAL_GPIO_Init+0x25a>
 8002846:	2307      	movs	r3, #7
 8002848:	e025      	b.n	8002896 <HAL_GPIO_Init+0x25a>
 800284a:	2306      	movs	r3, #6
 800284c:	e023      	b.n	8002896 <HAL_GPIO_Init+0x25a>
 800284e:	2305      	movs	r3, #5
 8002850:	e021      	b.n	8002896 <HAL_GPIO_Init+0x25a>
 8002852:	2304      	movs	r3, #4
 8002854:	e01f      	b.n	8002896 <HAL_GPIO_Init+0x25a>
 8002856:	2303      	movs	r3, #3
 8002858:	e01d      	b.n	8002896 <HAL_GPIO_Init+0x25a>
 800285a:	2302      	movs	r3, #2
 800285c:	e01b      	b.n	8002896 <HAL_GPIO_Init+0x25a>
 800285e:	2301      	movs	r3, #1
 8002860:	e019      	b.n	8002896 <HAL_GPIO_Init+0x25a>
 8002862:	bf00      	nop
 8002864:	58000080 	.word	0x58000080
 8002868:	58024400 	.word	0x58024400
 800286c:	58000400 	.word	0x58000400
 8002870:	58020000 	.word	0x58020000
 8002874:	58020400 	.word	0x58020400
 8002878:	58020800 	.word	0x58020800
 800287c:	58020c00 	.word	0x58020c00
 8002880:	58021000 	.word	0x58021000
 8002884:	58021400 	.word	0x58021400
 8002888:	58021800 	.word	0x58021800
 800288c:	58021c00 	.word	0x58021c00
 8002890:	58022400 	.word	0x58022400
 8002894:	2300      	movs	r3, #0
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	f002 0203 	and.w	r2, r2, #3
 800289c:	0092      	lsls	r2, r2, #2
 800289e:	4093      	lsls	r3, r2
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a6:	4938      	ldr	r1, [pc, #224]	@ (8002988 <HAL_GPIO_Init+0x34c>)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3302      	adds	r3, #2
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002908:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	3301      	adds	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	f47f ae6b 	bne.w	8002650 <HAL_GPIO_Init+0x14>
  }
}
 800297a:	bf00      	nop
 800297c:	bf00      	nop
 800297e:	3724      	adds	r7, #36	@ 0x24
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	58000400 	.word	0x58000400

0800298c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002994:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <HAL_PWREx_ConfigSupply+0x70>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b04      	cmp	r3, #4
 800299e:	d00a      	beq.n	80029b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029a0:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <HAL_PWREx_ConfigSupply+0x70>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d001      	beq.n	80029b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e01f      	b.n	80029f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e01d      	b.n	80029f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_PWREx_ConfigSupply+0x70>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f023 0207 	bic.w	r2, r3, #7
 80029be:	490f      	ldr	r1, [pc, #60]	@ (80029fc <HAL_PWREx_ConfigSupply+0x70>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80029c6:	f7fe f995 	bl	8000cf4 <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029cc:	e009      	b.n	80029e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029ce:	f7fe f991 	bl	8000cf4 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029dc:	d901      	bls.n	80029e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e007      	b.n	80029f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_PWREx_ConfigSupply+0x70>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ee:	d1ee      	bne.n	80029ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	58024800 	.word	0x58024800

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	@ 0x30
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e3c8      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8087 	beq.w	8002b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a20:	4b88      	ldr	r3, [pc, #544]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a2a:	4b86      	ldr	r3, [pc, #536]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d007      	beq.n	8002a46 <HAL_RCC_OscConfig+0x46>
 8002a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a38:	2b18      	cmp	r3, #24
 8002a3a:	d110      	bne.n	8002a5e <HAL_RCC_OscConfig+0x5e>
 8002a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d10b      	bne.n	8002a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a46:	4b7f      	ldr	r3, [pc, #508]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d06c      	beq.n	8002b2c <HAL_RCC_OscConfig+0x12c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d168      	bne.n	8002b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e3a2      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x76>
 8002a68:	4b76      	ldr	r3, [pc, #472]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a75      	ldr	r2, [pc, #468]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	e02e      	b.n	8002ad4 <HAL_RCC_OscConfig+0xd4>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x98>
 8002a7e:	4b71      	ldr	r3, [pc, #452]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a70      	ldr	r2, [pc, #448]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6d      	ldr	r2, [pc, #436]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002a90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e01d      	b.n	8002ad4 <HAL_RCC_OscConfig+0xd4>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0xbc>
 8002aa2:	4b68      	ldr	r3, [pc, #416]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a67      	ldr	r2, [pc, #412]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b65      	ldr	r3, [pc, #404]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a64      	ldr	r2, [pc, #400]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCC_OscConfig+0xd4>
 8002abc:	4b61      	ldr	r3, [pc, #388]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a60      	ldr	r2, [pc, #384]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a5d      	ldr	r2, [pc, #372]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d013      	beq.n	8002b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe f90a 	bl	8000cf4 <HAL_GetTick>
 8002ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe f906 	bl	8000cf4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	@ 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e356      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002af6:	4b53      	ldr	r3, [pc, #332]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0xe4>
 8002b02:	e014      	b.n	8002b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe f8f6 	bl	8000cf4 <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fe f8f2 	bl	8000cf4 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	@ 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e342      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b1e:	4b49      	ldr	r3, [pc, #292]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x10c>
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 808c 	beq.w	8002c54 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b3c:	4b41      	ldr	r3, [pc, #260]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b46:	4b3f      	ldr	r3, [pc, #252]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <HAL_RCC_OscConfig+0x162>
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	2b18      	cmp	r3, #24
 8002b56:	d137      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x1c8>
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d132      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b62:	4b38      	ldr	r3, [pc, #224]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x17a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e314      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b7a:	4b32      	ldr	r3, [pc, #200]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0219 	bic.w	r2, r3, #25
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	492f      	ldr	r1, [pc, #188]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe f8b2 	bl	8000cf4 <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b94:	f7fe f8ae 	bl	8000cf4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e2fe      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ba6:	4b27      	ldr	r3, [pc, #156]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb2:	4b24      	ldr	r3, [pc, #144]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	061b      	lsls	r3, r3, #24
 8002bc0:	4920      	ldr	r1, [pc, #128]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc6:	e045      	b.n	8002c54 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d026      	beq.n	8002c1e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 0219 	bic.w	r2, r3, #25
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4919      	ldr	r1, [pc, #100]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe f887 	bl	8000cf4 <HAL_GetTick>
 8002be6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe f883 	bl	8000cf4 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e2d3      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bfc:	4b11      	ldr	r3, [pc, #68]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	490b      	ldr	r1, [pc, #44]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e01a      	b.n	8002c54 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a08      	ldr	r2, [pc, #32]	@ (8002c44 <HAL_RCC_OscConfig+0x244>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe f863 	bl	8000cf4 <HAL_GetTick>
 8002c2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c32:	f7fe f85f 	bl	8000cf4 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d903      	bls.n	8002c48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e2af      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
 8002c44:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c48:	4b96      	ldr	r3, [pc, #600]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ee      	bne.n	8002c32 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d06a      	beq.n	8002d36 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c60:	4b90      	ldr	r3, [pc, #576]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c68:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c6a:	4b8e      	ldr	r3, [pc, #568]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d007      	beq.n	8002c86 <HAL_RCC_OscConfig+0x286>
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b18      	cmp	r3, #24
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x2b4>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d116      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c86:	4b87      	ldr	r3, [pc, #540]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <HAL_RCC_OscConfig+0x29e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	2b80      	cmp	r3, #128	@ 0x80
 8002c98:	d001      	beq.n	8002c9e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e282      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c9e:	4b81      	ldr	r3, [pc, #516]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	061b      	lsls	r3, r3, #24
 8002cac:	497d      	ldr	r1, [pc, #500]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cb2:	e040      	b.n	8002d36 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d023      	beq.n	8002d04 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002cbc:	4b79      	ldr	r3, [pc, #484]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a78      	ldr	r2, [pc, #480]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe f814 	bl	8000cf4 <HAL_GetTick>
 8002ccc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cd0:	f7fe f810 	bl	8000cf4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e260      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ce2:	4b70      	ldr	r3, [pc, #448]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cee:	4b6d      	ldr	r3, [pc, #436]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	061b      	lsls	r3, r3, #24
 8002cfc:	4969      	ldr	r1, [pc, #420]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60cb      	str	r3, [r1, #12]
 8002d02:	e018      	b.n	8002d36 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d04:	4b67      	ldr	r3, [pc, #412]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a66      	ldr	r2, [pc, #408]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fd fff0 	bl	8000cf4 <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d18:	f7fd ffec 	bl	8000cf4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e23c      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d2a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d036      	beq.n	8002db0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d019      	beq.n	8002d7e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4a:	4b56      	ldr	r3, [pc, #344]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4e:	4a55      	ldr	r2, [pc, #340]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d56:	f7fd ffcd 	bl	8000cf4 <HAL_GetTick>
 8002d5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5e:	f7fd ffc9 	bl	8000cf4 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e219      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d70:	4b4c      	ldr	r3, [pc, #304]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x35e>
 8002d7c:	e018      	b.n	8002db0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d82:	4a48      	ldr	r2, [pc, #288]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8a:	f7fd ffb3 	bl	8000cf4 <HAL_GetTick>
 8002d8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d92:	f7fd ffaf 	bl	8000cf4 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1ff      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002da4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d036      	beq.n	8002e2a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d019      	beq.n	8002df8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dc4:	4b37      	ldr	r3, [pc, #220]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a36      	ldr	r2, [pc, #216]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002dca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dd0:	f7fd ff90 	bl	8000cf4 <HAL_GetTick>
 8002dd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dd8:	f7fd ff8c 	bl	8000cf4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1dc      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dea:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x3d8>
 8002df6:	e018      	b.n	8002e2a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002df8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a29      	ldr	r2, [pc, #164]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002dfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e04:	f7fd ff76 	bl	8000cf4 <HAL_GetTick>
 8002e08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e0c:	f7fd ff72 	bl	8000cf4 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e1c2      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8086 	beq.w	8002f44 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e44:	f7fd ff56 	bl	8000cf4 <HAL_GetTick>
 8002e48:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4c:	f7fd ff52 	bl	8000cf4 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	@ 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e1a2      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ea8 <HAL_RCC_OscConfig+0x4a8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d106      	bne.n	8002e80 <HAL_RCC_OscConfig+0x480>
 8002e72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e76:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7e:	e032      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d111      	bne.n	8002eac <HAL_RCC_OscConfig+0x4ac>
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8c:	4a05      	ldr	r2, [pc, #20]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002e8e:	f023 0301 	bic.w	r3, r3, #1
 8002e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e94:	4b03      	ldr	r3, [pc, #12]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e98:	4a02      	ldr	r2, [pc, #8]	@ (8002ea4 <HAL_RCC_OscConfig+0x4a4>)
 8002e9a:	f023 0304 	bic.w	r3, r3, #4
 8002e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea0:	e021      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e6>
 8002ea2:	bf00      	nop
 8002ea4:	58024400 	.word	0x58024400
 8002ea8:	58024800 	.word	0x58024800
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d10c      	bne.n	8002ece <HAL_RCC_OscConfig+0x4ce>
 8002eb4:	4b83      	ldr	r3, [pc, #524]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb8:	4a82      	ldr	r2, [pc, #520]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec0:	4b80      	ldr	r3, [pc, #512]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec4:	4a7f      	ldr	r2, [pc, #508]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ecc:	e00b      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e6>
 8002ece:	4b7d      	ldr	r3, [pc, #500]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed2:	4a7c      	ldr	r2, [pc, #496]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eda:	4b7a      	ldr	r3, [pc, #488]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ede:	4a79      	ldr	r2, [pc, #484]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d015      	beq.n	8002f1a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eee:	f7fd ff01 	bl	8000cf4 <HAL_GetTick>
 8002ef2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef6:	f7fd fefd 	bl	8000cf4 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e14b      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f0c:	4b6d      	ldr	r3, [pc, #436]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ee      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x4f6>
 8002f18:	e014      	b.n	8002f44 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1a:	f7fd feeb 	bl	8000cf4 <HAL_GetTick>
 8002f1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fd fee7 	bl	8000cf4 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e135      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f38:	4b62      	ldr	r3, [pc, #392]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ee      	bne.n	8002f22 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 812a 	beq.w	80031a2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f56:	2b18      	cmp	r3, #24
 8002f58:	f000 80ba 	beq.w	80030d0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	f040 8095 	bne.w	8003090 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b57      	ldr	r3, [pc, #348]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a56      	ldr	r2, [pc, #344]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002f6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f72:	f7fd febf 	bl	8000cf4 <HAL_GetTick>
 8002f76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fd febb 	bl	8000cf4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e10b      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f8c:	4b4d      	ldr	r3, [pc, #308]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f98:	4b4a      	ldr	r3, [pc, #296]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002f9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80030c8 <HAL_RCC_OscConfig+0x6c8>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fa8:	0112      	lsls	r2, r2, #4
 8002faa:	430a      	orrs	r2, r1
 8002fac:	4945      	ldr	r1, [pc, #276]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	628b      	str	r3, [r1, #40]	@ 0x28
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	025b      	lsls	r3, r3, #9
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	061b      	lsls	r3, r3, #24
 8002fde:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002fe2:	4938      	ldr	r1, [pc, #224]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002fe8:	4b36      	ldr	r3, [pc, #216]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	4a35      	ldr	r2, [pc, #212]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ff4:	4b33      	ldr	r3, [pc, #204]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8002ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ff8:	4b34      	ldr	r3, [pc, #208]	@ (80030cc <HAL_RCC_OscConfig+0x6cc>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003000:	00d2      	lsls	r2, r2, #3
 8003002:	4930      	ldr	r1, [pc, #192]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003008:	4b2e      	ldr	r3, [pc, #184]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300c:	f023 020c 	bic.w	r2, r3, #12
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	492b      	ldr	r1, [pc, #172]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800301a:	4b2a      	ldr	r3, [pc, #168]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 800301c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301e:	f023 0202 	bic.w	r2, r3, #2
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003026:	4927      	ldr	r1, [pc, #156]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800302c:	4b25      	ldr	r3, [pc, #148]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	4a24      	ldr	r2, [pc, #144]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003038:	4b22      	ldr	r3, [pc, #136]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	4a21      	ldr	r2, [pc, #132]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 800303e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003044:	4b1f      	ldr	r3, [pc, #124]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	4a1e      	ldr	r2, [pc, #120]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 800304a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800304e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003050:	4b1c      	ldr	r3, [pc, #112]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	4a1b      	ldr	r2, [pc, #108]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305c:	4b19      	ldr	r3, [pc, #100]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a18      	ldr	r2, [pc, #96]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fd fe44 	bl	8000cf4 <HAL_GetTick>
 800306c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fd fe40 	bl	8000cf4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e090      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003082:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x670>
 800308e:	e088      	b.n	80031a2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003090:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0b      	ldr	r2, [pc, #44]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 8003096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800309a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fd fe2a 	bl	8000cf4 <HAL_GetTick>
 80030a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fd fe26 	bl	8000cf4 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e076      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030b6:	4b03      	ldr	r3, [pc, #12]	@ (80030c4 <HAL_RCC_OscConfig+0x6c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x6a4>
 80030c2:	e06e      	b.n	80031a2 <HAL_RCC_OscConfig+0x7a2>
 80030c4:	58024400 	.word	0x58024400
 80030c8:	fffffc0c 	.word	0xfffffc0c
 80030cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030d0:	4b36      	ldr	r3, [pc, #216]	@ (80031ac <HAL_RCC_OscConfig+0x7ac>)
 80030d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030d6:	4b35      	ldr	r3, [pc, #212]	@ (80031ac <HAL_RCC_OscConfig+0x7ac>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d031      	beq.n	8003148 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f003 0203 	and.w	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d12a      	bne.n	8003148 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d122      	bne.n	8003148 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d11a      	bne.n	8003148 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	0a5b      	lsrs	r3, r3, #9
 8003116:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d111      	bne.n	8003148 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	0c1b      	lsrs	r3, r3, #16
 8003128:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003130:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d108      	bne.n	8003148 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	0e1b      	lsrs	r3, r3, #24
 800313a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003142:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e02b      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800314c:	4b17      	ldr	r3, [pc, #92]	@ (80031ac <HAL_RCC_OscConfig+0x7ac>)
 800314e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003150:	08db      	lsrs	r3, r3, #3
 8003152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003156:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	429a      	cmp	r2, r3
 8003160:	d01f      	beq.n	80031a2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003162:	4b12      	ldr	r3, [pc, #72]	@ (80031ac <HAL_RCC_OscConfig+0x7ac>)
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	4a11      	ldr	r2, [pc, #68]	@ (80031ac <HAL_RCC_OscConfig+0x7ac>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800316e:	f7fd fdc1 	bl	8000cf4 <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003174:	bf00      	nop
 8003176:	f7fd fdbd 	bl	8000cf4 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	4293      	cmp	r3, r2
 8003180:	d0f9      	beq.n	8003176 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003182:	4b0a      	ldr	r3, [pc, #40]	@ (80031ac <HAL_RCC_OscConfig+0x7ac>)
 8003184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003186:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <HAL_RCC_OscConfig+0x7b0>)
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800318e:	00d2      	lsls	r2, r2, #3
 8003190:	4906      	ldr	r1, [pc, #24]	@ (80031ac <HAL_RCC_OscConfig+0x7ac>)
 8003192:	4313      	orrs	r3, r2
 8003194:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003196:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <HAL_RCC_OscConfig+0x7ac>)
 8003198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319a:	4a04      	ldr	r2, [pc, #16]	@ (80031ac <HAL_RCC_OscConfig+0x7ac>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3730      	adds	r7, #48	@ 0x30
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	58024400 	.word	0x58024400
 80031b0:	ffff0007 	.word	0xffff0007

080031b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e19c      	b.n	8003502 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c8:	4b8a      	ldr	r3, [pc, #552]	@ (80033f4 <HAL_RCC_ClockConfig+0x240>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d910      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b87      	ldr	r3, [pc, #540]	@ (80033f4 <HAL_RCC_ClockConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 020f 	bic.w	r2, r3, #15
 80031de:	4985      	ldr	r1, [pc, #532]	@ (80033f4 <HAL_RCC_ClockConfig+0x240>)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b83      	ldr	r3, [pc, #524]	@ (80033f4 <HAL_RCC_ClockConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e184      	b.n	8003502 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	4b7b      	ldr	r3, [pc, #492]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003210:	429a      	cmp	r2, r3
 8003212:	d908      	bls.n	8003226 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003214:	4b78      	ldr	r3, [pc, #480]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	4975      	ldr	r1, [pc, #468]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003222:	4313      	orrs	r3, r2
 8003224:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	4b70      	ldr	r3, [pc, #448]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800323e:	429a      	cmp	r2, r3
 8003240:	d908      	bls.n	8003254 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003242:	4b6d      	ldr	r3, [pc, #436]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	496a      	ldr	r1, [pc, #424]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003250:	4313      	orrs	r3, r2
 8003252:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	4b64      	ldr	r3, [pc, #400]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800326c:	429a      	cmp	r2, r3
 800326e:	d908      	bls.n	8003282 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003270:	4b61      	ldr	r3, [pc, #388]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	495e      	ldr	r1, [pc, #376]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 800327e:	4313      	orrs	r3, r2
 8003280:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d010      	beq.n	80032b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	4b59      	ldr	r3, [pc, #356]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800329a:	429a      	cmp	r2, r3
 800329c:	d908      	bls.n	80032b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800329e:	4b56      	ldr	r3, [pc, #344]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4953      	ldr	r1, [pc, #332]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	4b4d      	ldr	r3, [pc, #308]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d908      	bls.n	80032de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b4a      	ldr	r3, [pc, #296]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f023 020f 	bic.w	r2, r3, #15
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4947      	ldr	r1, [pc, #284]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d055      	beq.n	8003396 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032ea:	4b43      	ldr	r3, [pc, #268]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	4940      	ldr	r1, [pc, #256]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d107      	bne.n	8003314 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003304:	4b3c      	ldr	r3, [pc, #240]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d121      	bne.n	8003354 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0f6      	b.n	8003502 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d107      	bne.n	800332c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800331c:	4b36      	ldr	r3, [pc, #216]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d115      	bne.n	8003354 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0ea      	b.n	8003502 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d107      	bne.n	8003344 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003334:	4b30      	ldr	r3, [pc, #192]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0de      	b.n	8003502 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003344:	4b2c      	ldr	r3, [pc, #176]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0d6      	b.n	8003502 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003354:	4b28      	ldr	r3, [pc, #160]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f023 0207 	bic.w	r2, r3, #7
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4925      	ldr	r1, [pc, #148]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003362:	4313      	orrs	r3, r2
 8003364:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003366:	f7fd fcc5 	bl	8000cf4 <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336c:	e00a      	b.n	8003384 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336e:	f7fd fcc1 	bl	8000cf4 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0be      	b.n	8003502 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003384:	4b1c      	ldr	r3, [pc, #112]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	429a      	cmp	r2, r3
 8003394:	d1eb      	bne.n	800336e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d010      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	4b14      	ldr	r3, [pc, #80]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d208      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b2:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f023 020f 	bic.w	r2, r3, #15
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	490e      	ldr	r1, [pc, #56]	@ (80033f8 <HAL_RCC_ClockConfig+0x244>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033c4:	4b0b      	ldr	r3, [pc, #44]	@ (80033f4 <HAL_RCC_ClockConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d214      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d2:	4b08      	ldr	r3, [pc, #32]	@ (80033f4 <HAL_RCC_ClockConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 020f 	bic.w	r2, r3, #15
 80033da:	4906      	ldr	r1, [pc, #24]	@ (80033f4 <HAL_RCC_ClockConfig+0x240>)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	4313      	orrs	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <HAL_RCC_ClockConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e086      	b.n	8003502 <HAL_RCC_ClockConfig+0x34e>
 80033f4:	52002000 	.word	0x52002000
 80033f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d010      	beq.n	800342a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	4b3f      	ldr	r3, [pc, #252]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003414:	429a      	cmp	r2, r3
 8003416:	d208      	bcs.n	800342a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003418:	4b3c      	ldr	r3, [pc, #240]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	4939      	ldr	r1, [pc, #228]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 8003426:	4313      	orrs	r3, r2
 8003428:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d010      	beq.n	8003458 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	4b34      	ldr	r3, [pc, #208]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003442:	429a      	cmp	r2, r3
 8003444:	d208      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003446:	4b31      	ldr	r3, [pc, #196]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	492e      	ldr	r1, [pc, #184]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 8003454:	4313      	orrs	r3, r2
 8003456:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	d010      	beq.n	8003486 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	4b28      	ldr	r3, [pc, #160]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003470:	429a      	cmp	r2, r3
 8003472:	d208      	bcs.n	8003486 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003474:	4b25      	ldr	r3, [pc, #148]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	4922      	ldr	r1, [pc, #136]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 8003482:	4313      	orrs	r3, r2
 8003484:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d010      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	4b1d      	ldr	r3, [pc, #116]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800349e:	429a      	cmp	r2, r3
 80034a0:	d208      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034a2:	4b1a      	ldr	r3, [pc, #104]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4917      	ldr	r1, [pc, #92]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034b4:	f000 f834 	bl	8003520 <HAL_RCC_GetSysClockFreq>
 80034b8:	4602      	mov	r2, r0
 80034ba:	4b14      	ldr	r3, [pc, #80]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	4912      	ldr	r1, [pc, #72]	@ (8003510 <HAL_RCC_ClockConfig+0x35c>)
 80034c6:	5ccb      	ldrb	r3, [r1, r3]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
 80034d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034d2:	4b0e      	ldr	r3, [pc, #56]	@ (800350c <HAL_RCC_ClockConfig+0x358>)
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	4a0d      	ldr	r2, [pc, #52]	@ (8003510 <HAL_RCC_ClockConfig+0x35c>)
 80034dc:	5cd3      	ldrb	r3, [r2, r3]
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
 80034e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003514 <HAL_RCC_ClockConfig+0x360>)
 80034ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003518 <HAL_RCC_ClockConfig+0x364>)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80034f2:	4b0a      	ldr	r3, [pc, #40]	@ (800351c <HAL_RCC_ClockConfig+0x368>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd fbb2 	bl	8000c60 <HAL_InitTick>
 80034fc:	4603      	mov	r3, r0
 80034fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	58024400 	.word	0x58024400
 8003510:	08011630 	.word	0x08011630
 8003514:	24000004 	.word	0x24000004
 8003518:	24000000 	.word	0x24000000
 800351c:	24000008 	.word	0x24000008

08003520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	@ 0x24
 8003524:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003526:	4bb3      	ldr	r3, [pc, #716]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800352e:	2b18      	cmp	r3, #24
 8003530:	f200 8155 	bhi.w	80037de <HAL_RCC_GetSysClockFreq+0x2be>
 8003534:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353a:	bf00      	nop
 800353c:	080035a1 	.word	0x080035a1
 8003540:	080037df 	.word	0x080037df
 8003544:	080037df 	.word	0x080037df
 8003548:	080037df 	.word	0x080037df
 800354c:	080037df 	.word	0x080037df
 8003550:	080037df 	.word	0x080037df
 8003554:	080037df 	.word	0x080037df
 8003558:	080037df 	.word	0x080037df
 800355c:	080035c7 	.word	0x080035c7
 8003560:	080037df 	.word	0x080037df
 8003564:	080037df 	.word	0x080037df
 8003568:	080037df 	.word	0x080037df
 800356c:	080037df 	.word	0x080037df
 8003570:	080037df 	.word	0x080037df
 8003574:	080037df 	.word	0x080037df
 8003578:	080037df 	.word	0x080037df
 800357c:	080035cd 	.word	0x080035cd
 8003580:	080037df 	.word	0x080037df
 8003584:	080037df 	.word	0x080037df
 8003588:	080037df 	.word	0x080037df
 800358c:	080037df 	.word	0x080037df
 8003590:	080037df 	.word	0x080037df
 8003594:	080037df 	.word	0x080037df
 8003598:	080037df 	.word	0x080037df
 800359c:	080035d3 	.word	0x080035d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035a0:	4b94      	ldr	r3, [pc, #592]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d009      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035ac:	4b91      	ldr	r3, [pc, #580]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	08db      	lsrs	r3, r3, #3
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	4a90      	ldr	r2, [pc, #576]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
 80035bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80035be:	e111      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035c0:	4b8d      	ldr	r3, [pc, #564]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035c2:	61bb      	str	r3, [r7, #24]
      break;
 80035c4:	e10e      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80035c6:	4b8d      	ldr	r3, [pc, #564]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035c8:	61bb      	str	r3, [r7, #24]
      break;
 80035ca:	e10b      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80035cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035ce:	61bb      	str	r3, [r7, #24]
      break;
 80035d0:	e108      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035d2:	4b88      	ldr	r3, [pc, #544]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80035dc:	4b85      	ldr	r3, [pc, #532]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035e8:	4b82      	ldr	r3, [pc, #520]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80035f2:	4b80      	ldr	r3, [pc, #512]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f6:	08db      	lsrs	r3, r3, #3
 80035f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80e1 	beq.w	80037d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b02      	cmp	r3, #2
 800361a:	f000 8083 	beq.w	8003724 <HAL_RCC_GetSysClockFreq+0x204>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b02      	cmp	r3, #2
 8003622:	f200 80a1 	bhi.w	8003768 <HAL_RCC_GetSysClockFreq+0x248>
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x114>
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d056      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003632:	e099      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003634:	4b6f      	ldr	r3, [pc, #444]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d02d      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003640:	4b6c      	ldr	r3, [pc, #432]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	08db      	lsrs	r3, r3, #3
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	4a6b      	ldr	r2, [pc, #428]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
 8003650:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	ee07 3a90 	vmov	s15, r3
 8003658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800366a:	4b62      	ldr	r3, [pc, #392]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800367a:	ed97 6a02 	vldr	s12, [r7, #8]
 800367e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003804 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800368a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800368e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003696:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800369a:	e087      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003808 <HAL_RCC_GetSysClockFreq+0x2e8>
 80036aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ae:	4b51      	ldr	r3, [pc, #324]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036be:	ed97 6a02 	vldr	s12, [r7, #8]
 80036c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003804 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036de:	e065      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800380c <HAL_RCC_GetSysClockFreq+0x2ec>
 80036ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f2:	4b40      	ldr	r3, [pc, #256]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003702:	ed97 6a02 	vldr	s12, [r7, #8]
 8003706:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003804 <HAL_RCC_GetSysClockFreq+0x2e4>
 800370a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800370e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003722:	e043      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003810 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003736:	4b2f      	ldr	r3, [pc, #188]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003746:	ed97 6a02 	vldr	s12, [r7, #8]
 800374a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003804 <HAL_RCC_GetSysClockFreq+0x2e4>
 800374e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800375a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800375e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003762:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003766:	e021      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003772:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800380c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800377a:	4b1e      	ldr	r3, [pc, #120]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800378a:	ed97 6a02 	vldr	s12, [r7, #8]
 800378e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003804 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800379a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800379e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80037ac:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b0:	0a5b      	lsrs	r3, r3, #9
 80037b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037b6:	3301      	adds	r3, #1
 80037b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80037c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d0:	ee17 3a90 	vmov	r3, s15
 80037d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80037d6:	e005      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
      break;
 80037dc:	e002      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80037de:	4b07      	ldr	r3, [pc, #28]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037e0:	61bb      	str	r3, [r7, #24]
      break;
 80037e2:	bf00      	nop
  }

  return sysclockfreq;
 80037e4:	69bb      	ldr	r3, [r7, #24]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3724      	adds	r7, #36	@ 0x24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	58024400 	.word	0x58024400
 80037f8:	03d09000 	.word	0x03d09000
 80037fc:	003d0900 	.word	0x003d0900
 8003800:	017d7840 	.word	0x017d7840
 8003804:	46000000 	.word	0x46000000
 8003808:	4c742400 	.word	0x4c742400
 800380c:	4a742400 	.word	0x4a742400
 8003810:	4bbebc20 	.word	0x4bbebc20

08003814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800381a:	f7ff fe81 	bl	8003520 <HAL_RCC_GetSysClockFreq>
 800381e:	4602      	mov	r2, r0
 8003820:	4b10      	ldr	r3, [pc, #64]	@ (8003864 <HAL_RCC_GetHCLKFreq+0x50>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	490f      	ldr	r1, [pc, #60]	@ (8003868 <HAL_RCC_GetHCLKFreq+0x54>)
 800382c:	5ccb      	ldrb	r3, [r1, r3]
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003838:	4b0a      	ldr	r3, [pc, #40]	@ (8003864 <HAL_RCC_GetHCLKFreq+0x50>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	4a09      	ldr	r2, [pc, #36]	@ (8003868 <HAL_RCC_GetHCLKFreq+0x54>)
 8003842:	5cd3      	ldrb	r3, [r2, r3]
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	fa22 f303 	lsr.w	r3, r2, r3
 800384e:	4a07      	ldr	r2, [pc, #28]	@ (800386c <HAL_RCC_GetHCLKFreq+0x58>)
 8003850:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003852:	4a07      	ldr	r2, [pc, #28]	@ (8003870 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003858:	4b04      	ldr	r3, [pc, #16]	@ (800386c <HAL_RCC_GetHCLKFreq+0x58>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	58024400 	.word	0x58024400
 8003868:	08011630 	.word	0x08011630
 800386c:	24000004 	.word	0x24000004
 8003870:	24000000 	.word	0x24000000

08003874 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800387a:	4b87      	ldr	r3, [pc, #540]	@ (8003a98 <MX_LWIP_Init+0x224>)
 800387c:	22c0      	movs	r2, #192	@ 0xc0
 800387e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003880:	4b85      	ldr	r3, [pc, #532]	@ (8003a98 <MX_LWIP_Init+0x224>)
 8003882:	22a8      	movs	r2, #168	@ 0xa8
 8003884:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003886:	4b84      	ldr	r3, [pc, #528]	@ (8003a98 <MX_LWIP_Init+0x224>)
 8003888:	2200      	movs	r2, #0
 800388a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800388c:	4b82      	ldr	r3, [pc, #520]	@ (8003a98 <MX_LWIP_Init+0x224>)
 800388e:	2202      	movs	r2, #2
 8003890:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003892:	4b82      	ldr	r3, [pc, #520]	@ (8003a9c <MX_LWIP_Init+0x228>)
 8003894:	22ff      	movs	r2, #255	@ 0xff
 8003896:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003898:	4b80      	ldr	r3, [pc, #512]	@ (8003a9c <MX_LWIP_Init+0x228>)
 800389a:	22ff      	movs	r2, #255	@ 0xff
 800389c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800389e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a9c <MX_LWIP_Init+0x228>)
 80038a0:	22ff      	movs	r2, #255	@ 0xff
 80038a2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80038a4:	4b7d      	ldr	r3, [pc, #500]	@ (8003a9c <MX_LWIP_Init+0x228>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80038aa:	4b7d      	ldr	r3, [pc, #500]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 80038ac:	22c0      	movs	r2, #192	@ 0xc0
 80038ae:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80038b0:	4b7b      	ldr	r3, [pc, #492]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 80038b2:	22a8      	movs	r2, #168	@ 0xa8
 80038b4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80038b6:	4b7a      	ldr	r3, [pc, #488]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80038bc:	4b78      	ldr	r3, [pc, #480]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 80038be:	2201      	movs	r2, #1
 80038c0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80038c2:	f000 fd0f 	bl	80042e4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80038c6:	4b74      	ldr	r3, [pc, #464]	@ (8003a98 <MX_LWIP_Init+0x224>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	061a      	lsls	r2, r3, #24
 80038cc:	4b72      	ldr	r3, [pc, #456]	@ (8003a98 <MX_LWIP_Init+0x224>)
 80038ce:	785b      	ldrb	r3, [r3, #1]
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	431a      	orrs	r2, r3
 80038d4:	4b70      	ldr	r3, [pc, #448]	@ (8003a98 <MX_LWIP_Init+0x224>)
 80038d6:	789b      	ldrb	r3, [r3, #2]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	4313      	orrs	r3, r2
 80038dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003a98 <MX_LWIP_Init+0x224>)
 80038de:	78d2      	ldrb	r2, [r2, #3]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	061a      	lsls	r2, r3, #24
 80038e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003a98 <MX_LWIP_Init+0x224>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	0619      	lsls	r1, r3, #24
 80038ea:	4b6b      	ldr	r3, [pc, #428]	@ (8003a98 <MX_LWIP_Init+0x224>)
 80038ec:	785b      	ldrb	r3, [r3, #1]
 80038ee:	041b      	lsls	r3, r3, #16
 80038f0:	4319      	orrs	r1, r3
 80038f2:	4b69      	ldr	r3, [pc, #420]	@ (8003a98 <MX_LWIP_Init+0x224>)
 80038f4:	789b      	ldrb	r3, [r3, #2]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	430b      	orrs	r3, r1
 80038fa:	4967      	ldr	r1, [pc, #412]	@ (8003a98 <MX_LWIP_Init+0x224>)
 80038fc:	78c9      	ldrb	r1, [r1, #3]
 80038fe:	430b      	orrs	r3, r1
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003906:	431a      	orrs	r2, r3
 8003908:	4b63      	ldr	r3, [pc, #396]	@ (8003a98 <MX_LWIP_Init+0x224>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	0619      	lsls	r1, r3, #24
 800390e:	4b62      	ldr	r3, [pc, #392]	@ (8003a98 <MX_LWIP_Init+0x224>)
 8003910:	785b      	ldrb	r3, [r3, #1]
 8003912:	041b      	lsls	r3, r3, #16
 8003914:	4319      	orrs	r1, r3
 8003916:	4b60      	ldr	r3, [pc, #384]	@ (8003a98 <MX_LWIP_Init+0x224>)
 8003918:	789b      	ldrb	r3, [r3, #2]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	430b      	orrs	r3, r1
 800391e:	495e      	ldr	r1, [pc, #376]	@ (8003a98 <MX_LWIP_Init+0x224>)
 8003920:	78c9      	ldrb	r1, [r1, #3]
 8003922:	430b      	orrs	r3, r1
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800392a:	431a      	orrs	r2, r3
 800392c:	4b5a      	ldr	r3, [pc, #360]	@ (8003a98 <MX_LWIP_Init+0x224>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	0619      	lsls	r1, r3, #24
 8003932:	4b59      	ldr	r3, [pc, #356]	@ (8003a98 <MX_LWIP_Init+0x224>)
 8003934:	785b      	ldrb	r3, [r3, #1]
 8003936:	041b      	lsls	r3, r3, #16
 8003938:	4319      	orrs	r1, r3
 800393a:	4b57      	ldr	r3, [pc, #348]	@ (8003a98 <MX_LWIP_Init+0x224>)
 800393c:	789b      	ldrb	r3, [r3, #2]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	430b      	orrs	r3, r1
 8003942:	4955      	ldr	r1, [pc, #340]	@ (8003a98 <MX_LWIP_Init+0x224>)
 8003944:	78c9      	ldrb	r1, [r1, #3]
 8003946:	430b      	orrs	r3, r1
 8003948:	0e1b      	lsrs	r3, r3, #24
 800394a:	4313      	orrs	r3, r2
 800394c:	4a55      	ldr	r2, [pc, #340]	@ (8003aa4 <MX_LWIP_Init+0x230>)
 800394e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003950:	4b52      	ldr	r3, [pc, #328]	@ (8003a9c <MX_LWIP_Init+0x228>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	061a      	lsls	r2, r3, #24
 8003956:	4b51      	ldr	r3, [pc, #324]	@ (8003a9c <MX_LWIP_Init+0x228>)
 8003958:	785b      	ldrb	r3, [r3, #1]
 800395a:	041b      	lsls	r3, r3, #16
 800395c:	431a      	orrs	r2, r3
 800395e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a9c <MX_LWIP_Init+0x228>)
 8003960:	789b      	ldrb	r3, [r3, #2]
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	4313      	orrs	r3, r2
 8003966:	4a4d      	ldr	r2, [pc, #308]	@ (8003a9c <MX_LWIP_Init+0x228>)
 8003968:	78d2      	ldrb	r2, [r2, #3]
 800396a:	4313      	orrs	r3, r2
 800396c:	061a      	lsls	r2, r3, #24
 800396e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a9c <MX_LWIP_Init+0x228>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	0619      	lsls	r1, r3, #24
 8003974:	4b49      	ldr	r3, [pc, #292]	@ (8003a9c <MX_LWIP_Init+0x228>)
 8003976:	785b      	ldrb	r3, [r3, #1]
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	4319      	orrs	r1, r3
 800397c:	4b47      	ldr	r3, [pc, #284]	@ (8003a9c <MX_LWIP_Init+0x228>)
 800397e:	789b      	ldrb	r3, [r3, #2]
 8003980:	021b      	lsls	r3, r3, #8
 8003982:	430b      	orrs	r3, r1
 8003984:	4945      	ldr	r1, [pc, #276]	@ (8003a9c <MX_LWIP_Init+0x228>)
 8003986:	78c9      	ldrb	r1, [r1, #3]
 8003988:	430b      	orrs	r3, r1
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003990:	431a      	orrs	r2, r3
 8003992:	4b42      	ldr	r3, [pc, #264]	@ (8003a9c <MX_LWIP_Init+0x228>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	0619      	lsls	r1, r3, #24
 8003998:	4b40      	ldr	r3, [pc, #256]	@ (8003a9c <MX_LWIP_Init+0x228>)
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	041b      	lsls	r3, r3, #16
 800399e:	4319      	orrs	r1, r3
 80039a0:	4b3e      	ldr	r3, [pc, #248]	@ (8003a9c <MX_LWIP_Init+0x228>)
 80039a2:	789b      	ldrb	r3, [r3, #2]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	430b      	orrs	r3, r1
 80039a8:	493c      	ldr	r1, [pc, #240]	@ (8003a9c <MX_LWIP_Init+0x228>)
 80039aa:	78c9      	ldrb	r1, [r1, #3]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80039b4:	431a      	orrs	r2, r3
 80039b6:	4b39      	ldr	r3, [pc, #228]	@ (8003a9c <MX_LWIP_Init+0x228>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	0619      	lsls	r1, r3, #24
 80039bc:	4b37      	ldr	r3, [pc, #220]	@ (8003a9c <MX_LWIP_Init+0x228>)
 80039be:	785b      	ldrb	r3, [r3, #1]
 80039c0:	041b      	lsls	r3, r3, #16
 80039c2:	4319      	orrs	r1, r3
 80039c4:	4b35      	ldr	r3, [pc, #212]	@ (8003a9c <MX_LWIP_Init+0x228>)
 80039c6:	789b      	ldrb	r3, [r3, #2]
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	430b      	orrs	r3, r1
 80039cc:	4933      	ldr	r1, [pc, #204]	@ (8003a9c <MX_LWIP_Init+0x228>)
 80039ce:	78c9      	ldrb	r1, [r1, #3]
 80039d0:	430b      	orrs	r3, r1
 80039d2:	0e1b      	lsrs	r3, r3, #24
 80039d4:	4313      	orrs	r3, r2
 80039d6:	4a34      	ldr	r2, [pc, #208]	@ (8003aa8 <MX_LWIP_Init+0x234>)
 80039d8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80039da:	4b31      	ldr	r3, [pc, #196]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	061a      	lsls	r2, r3, #24
 80039e0:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	431a      	orrs	r2, r3
 80039e8:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 80039ea:	789b      	ldrb	r3, [r3, #2]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	4313      	orrs	r3, r2
 80039f0:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 80039f2:	78d2      	ldrb	r2, [r2, #3]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	061a      	lsls	r2, r3, #24
 80039f8:	4b29      	ldr	r3, [pc, #164]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	0619      	lsls	r1, r3, #24
 80039fe:	4b28      	ldr	r3, [pc, #160]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 8003a00:	785b      	ldrb	r3, [r3, #1]
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	4319      	orrs	r1, r3
 8003a06:	4b26      	ldr	r3, [pc, #152]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 8003a08:	789b      	ldrb	r3, [r3, #2]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	4924      	ldr	r1, [pc, #144]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 8003a10:	78c9      	ldrb	r1, [r1, #3]
 8003a12:	430b      	orrs	r3, r1
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	0619      	lsls	r1, r3, #24
 8003a22:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 8003a24:	785b      	ldrb	r3, [r3, #1]
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	4319      	orrs	r1, r3
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 8003a2c:	789b      	ldrb	r3, [r3, #2]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	430b      	orrs	r3, r1
 8003a32:	491b      	ldr	r1, [pc, #108]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 8003a34:	78c9      	ldrb	r1, [r1, #3]
 8003a36:	430b      	orrs	r3, r1
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	4b17      	ldr	r3, [pc, #92]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	0619      	lsls	r1, r3, #24
 8003a46:	4b16      	ldr	r3, [pc, #88]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 8003a48:	785b      	ldrb	r3, [r3, #1]
 8003a4a:	041b      	lsls	r3, r3, #16
 8003a4c:	4319      	orrs	r1, r3
 8003a4e:	4b14      	ldr	r3, [pc, #80]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 8003a50:	789b      	ldrb	r3, [r3, #2]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	430b      	orrs	r3, r1
 8003a56:	4912      	ldr	r1, [pc, #72]	@ (8003aa0 <MX_LWIP_Init+0x22c>)
 8003a58:	78c9      	ldrb	r1, [r1, #3]
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	0e1b      	lsrs	r3, r3, #24
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	4a12      	ldr	r2, [pc, #72]	@ (8003aac <MX_LWIP_Init+0x238>)
 8003a62:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003a64:	4b12      	ldr	r3, [pc, #72]	@ (8003ab0 <MX_LWIP_Init+0x23c>)
 8003a66:	9302      	str	r3, [sp, #8]
 8003a68:	4b12      	ldr	r3, [pc, #72]	@ (8003ab4 <MX_LWIP_Init+0x240>)
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	4b0e      	ldr	r3, [pc, #56]	@ (8003aac <MX_LWIP_Init+0x238>)
 8003a72:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa8 <MX_LWIP_Init+0x234>)
 8003a74:	490b      	ldr	r1, [pc, #44]	@ (8003aa4 <MX_LWIP_Init+0x230>)
 8003a76:	4810      	ldr	r0, [pc, #64]	@ (8003ab8 <MX_LWIP_Init+0x244>)
 8003a78:	f001 f91c 	bl	8004cb4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003a7c:	480e      	ldr	r0, [pc, #56]	@ (8003ab8 <MX_LWIP_Init+0x244>)
 8003a7e:	f001 facb 	bl	8005018 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003a82:	480d      	ldr	r0, [pc, #52]	@ (8003ab8 <MX_LWIP_Init+0x244>)
 8003a84:	f001 fad8 	bl	8005038 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003a88:	490c      	ldr	r1, [pc, #48]	@ (8003abc <MX_LWIP_Init+0x248>)
 8003a8a:	480b      	ldr	r0, [pc, #44]	@ (8003ab8 <MX_LWIP_Init+0x244>)
 8003a8c:	f001 fbd6 	bl	800523c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	240001b0 	.word	0x240001b0
 8003a9c:	240001b4 	.word	0x240001b4
 8003aa0:	240001b8 	.word	0x240001b8
 8003aa4:	240001a4 	.word	0x240001a4
 8003aa8:	240001a8 	.word	0x240001a8
 8003aac:	240001ac 	.word	0x240001ac
 8003ab0:	0800da79 	.word	0x0800da79
 8003ab4:	08003d05 	.word	0x08003d05
 8003ab8:	24000170 	.word	0x24000170
 8003abc:	08003ac1 	.word	0x08003ac1

08003ac0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003ae0:	4b3f      	ldr	r3, [pc, #252]	@ (8003be0 <low_level_init+0x10c>)
 8003ae2:	4a40      	ldr	r2, [pc, #256]	@ (8003be4 <low_level_init+0x110>)
 8003ae4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003aea:	2380      	movs	r3, #128	@ 0x80
 8003aec:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003aee:	23e1      	movs	r3, #225	@ 0xe1
 8003af0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003af2:	2300      	movs	r3, #0
 8003af4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003af6:	2300      	movs	r3, #0
 8003af8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003afa:	2300      	movs	r3, #0
 8003afc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003afe:	4a38      	ldr	r2, [pc, #224]	@ (8003be0 <low_level_init+0x10c>)
 8003b00:	f107 0308 	add.w	r3, r7, #8
 8003b04:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003b06:	4b36      	ldr	r3, [pc, #216]	@ (8003be0 <low_level_init+0x10c>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003b0c:	4b34      	ldr	r3, [pc, #208]	@ (8003be0 <low_level_init+0x10c>)
 8003b0e:	4a36      	ldr	r2, [pc, #216]	@ (8003be8 <low_level_init+0x114>)
 8003b10:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003b12:	4b33      	ldr	r3, [pc, #204]	@ (8003be0 <low_level_init+0x10c>)
 8003b14:	4a35      	ldr	r2, [pc, #212]	@ (8003bec <low_level_init+0x118>)
 8003b16:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003b18:	4b31      	ldr	r3, [pc, #196]	@ (8003be0 <low_level_init+0x10c>)
 8003b1a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003b1e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003b20:	482f      	ldr	r0, [pc, #188]	@ (8003be0 <low_level_init+0x10c>)
 8003b22:	f7fd fa63 	bl	8000fec <HAL_ETH_Init>
 8003b26:	4603      	mov	r3, r0
 8003b28:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003b2a:	2238      	movs	r2, #56	@ 0x38
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4830      	ldr	r0, [pc, #192]	@ (8003bf0 <low_level_init+0x11c>)
 8003b30:	f00a f9dd 	bl	800deee <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003b34:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf0 <low_level_init+0x11c>)
 8003b36:	2221      	movs	r2, #33	@ 0x21
 8003b38:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf0 <low_level_init+0x11c>)
 8003b3c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b40:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003b42:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf0 <low_level_init+0x11c>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003b48:	482a      	ldr	r0, [pc, #168]	@ (8003bf4 <low_level_init+0x120>)
 8003b4a:	f000 ff7b 	bl	8004a44 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2206      	movs	r2, #6
 8003b52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003b56:	4b22      	ldr	r3, [pc, #136]	@ (8003be0 <low_level_init+0x10c>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003b62:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <low_level_init+0x10c>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	785a      	ldrb	r2, [r3, #1]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003be0 <low_level_init+0x10c>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	789a      	ldrb	r2, [r3, #2]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003b7a:	4b19      	ldr	r3, [pc, #100]	@ (8003be0 <low_level_init+0x10c>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	78da      	ldrb	r2, [r3, #3]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003b86:	4b16      	ldr	r3, [pc, #88]	@ (8003be0 <low_level_init+0x10c>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	791a      	ldrb	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003b92:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <low_level_init+0x10c>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	795a      	ldrb	r2, [r3, #5]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003ba4:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003bac:	f043 030a 	orr.w	r3, r3, #10
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003bb8:	490f      	ldr	r1, [pc, #60]	@ (8003bf8 <low_level_init+0x124>)
 8003bba:	4810      	ldr	r0, [pc, #64]	@ (8003bfc <low_level_init+0x128>)
 8003bbc:	f7fc ff0d 	bl	80009da <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8003bc0:	480e      	ldr	r0, [pc, #56]	@ (8003bfc <low_level_init+0x128>)
 8003bc2:	f7fc ff3c 	bl	8000a3e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f9e3 	bl	8003f98 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003bd2:	e001      	b.n	8003bd8 <low_level_init+0x104>
    Error_Handler();
 8003bd4:	f7fc fd45 	bl	8000662 <Error_Handler>
}
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	24004b48 	.word	0x24004b48
 8003be4:	40028000 	.word	0x40028000
 8003be8:	240000ec 	.word	0x240000ec
 8003bec:	2400008c 	.word	0x2400008c
 8003bf0:	24004bf8 	.word	0x24004bf8
 8003bf4:	08011640 	.word	0x08011640
 8003bf8:	24000010 	.word	0x24000010
 8003bfc:	24004c30 	.word	0x24004c30

08003c00 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b092      	sub	sp, #72	@ 0x48
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003c18:	f107 030c 	add.w	r3, r7, #12
 8003c1c:	2230      	movs	r2, #48	@ 0x30
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f00a f964 	bl	800deee <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003c26:	f107 030c 	add.w	r3, r7, #12
 8003c2a:	2230      	movs	r2, #48	@ 0x30
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f00a f95d 	bl	800deee <memset>

  for(q = p; q != NULL; q = q->next)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c38:	e045      	b.n	8003cc6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d902      	bls.n	8003c46 <low_level_output+0x46>
      return ERR_IF;
 8003c40:	f06f 030b 	mvn.w	r3, #11
 8003c44:	e055      	b.n	8003cf2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8003c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c48:	6859      	ldr	r1, [r3, #4]
 8003c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	3348      	adds	r3, #72	@ 0x48
 8003c56:	443b      	add	r3, r7
 8003c58:	3b3c      	subs	r3, #60	@ 0x3c
 8003c5a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c5e:	895b      	ldrh	r3, [r3, #10]
 8003c60:	4619      	mov	r1, r3
 8003c62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	3348      	adds	r3, #72	@ 0x48
 8003c6e:	443b      	add	r3, r7
 8003c70:	3b38      	subs	r3, #56	@ 0x38
 8003c72:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d011      	beq.n	8003c9e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7c:	1e5a      	subs	r2, r3, #1
 8003c7e:	f107 000c 	add.w	r0, r7, #12
 8003c82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003c84:	460b      	mov	r3, r1
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	440b      	add	r3, r1
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	18c1      	adds	r1, r0, r3
 8003c8e:	4613      	mov	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	3348      	adds	r3, #72	@ 0x48
 8003c98:	443b      	add	r3, r7
 8003c9a:	3b34      	subs	r3, #52	@ 0x34
 8003c9c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003ca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ca8:	4613      	mov	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	3348      	adds	r3, #72	@ 0x48
 8003cb2:	443b      	add	r3, r7
 8003cb4:	3b34      	subs	r3, #52	@ 0x34
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1b6      	bne.n	8003c3a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	891b      	ldrh	r3, [r3, #8]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003cfc <low_level_output+0xfc>)
 8003cd4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003cd6:	4a09      	ldr	r2, [pc, #36]	@ (8003cfc <low_level_output+0xfc>)
 8003cd8:	f107 030c 	add.w	r3, r7, #12
 8003cdc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003cde:	4a07      	ldr	r2, [pc, #28]	@ (8003cfc <low_level_output+0xfc>)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003ce4:	2214      	movs	r2, #20
 8003ce6:	4905      	ldr	r1, [pc, #20]	@ (8003cfc <low_level_output+0xfc>)
 8003ce8:	4805      	ldr	r0, [pc, #20]	@ (8003d00 <low_level_output+0x100>)
 8003cea:	f7fd fb2f 	bl	800134c <HAL_ETH_Transmit>

  return errval;
 8003cee:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3748      	adds	r7, #72	@ 0x48
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	24004bf8 	.word	0x24004bf8
 8003d00:	24004b48 	.word	0x24004b48

08003d04 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <ethernetif_init+0x1c>
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <ethernetif_init+0x48>)
 8003d14:	f240 127b 	movw	r2, #379	@ 0x17b
 8003d18:	490d      	ldr	r1, [pc, #52]	@ (8003d50 <ethernetif_init+0x4c>)
 8003d1a:	480e      	ldr	r0, [pc, #56]	@ (8003d54 <ethernetif_init+0x50>)
 8003d1c:	f00a f882 	bl	800de24 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2273      	movs	r2, #115	@ 0x73
 8003d24:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2274      	movs	r2, #116	@ 0x74
 8003d2c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a09      	ldr	r2, [pc, #36]	@ (8003d58 <ethernetif_init+0x54>)
 8003d34:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a08      	ldr	r2, [pc, #32]	@ (8003d5c <ethernetif_init+0x58>)
 8003d3a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fec9 	bl	8003ad4 <low_level_init>

  return ERR_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	0800ec50 	.word	0x0800ec50
 8003d50:	0800ec6c 	.word	0x0800ec6c
 8003d54:	0800ec7c 	.word	0x0800ec7c
 8003d58:	0800bee5 	.word	0x0800bee5
 8003d5c:	08003c01 	.word	0x08003c01

08003d60 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003d6c:	68f9      	ldr	r1, [r7, #12]
 8003d6e:	4807      	ldr	r0, [pc, #28]	@ (8003d8c <pbuf_free_custom+0x2c>)
 8003d70:	f000 ff4a 	bl	8004c08 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003d74:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <pbuf_free_custom+0x30>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d102      	bne.n	8003d82 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003d7c:	4b04      	ldr	r3, [pc, #16]	@ (8003d90 <pbuf_free_custom+0x30>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
  }
}
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	08011640 	.word	0x08011640
 8003d90:	24004b44 	.word	0x24004b44

08003d94 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003d98:	f7fc ffac 	bl	8000cf4 <HAL_GetTick>
 8003d9c:	4603      	mov	r3, r0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08e      	sub	sp, #56	@ 0x38
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a49      	ldr	r2, [pc, #292]	@ (8003ee8 <HAL_ETH_MspInit+0x144>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	f040 808b 	bne.w	8003ede <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003dc8:	4b48      	ldr	r3, [pc, #288]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003dca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003dce:	4a47      	ldr	r2, [pc, #284]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dd4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003dd8:	4b44      	ldr	r3, [pc, #272]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003dde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003de6:	4b41      	ldr	r3, [pc, #260]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003dec:	4a3f      	ldr	r2, [pc, #252]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003dee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003df6:	4b3d      	ldr	r3, [pc, #244]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003e04:	4b39      	ldr	r3, [pc, #228]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003e0a:	4a38      	ldr	r2, [pc, #224]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e10:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003e14:	4b35      	ldr	r3, [pc, #212]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e22:	4b32      	ldr	r3, [pc, #200]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e28:	4a30      	ldr	r2, [pc, #192]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003e2a:	f043 0304 	orr.w	r3, r3, #4
 8003e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e32:	4b2e      	ldr	r3, [pc, #184]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e40:	4b2a      	ldr	r3, [pc, #168]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e46:	4a29      	ldr	r2, [pc, #164]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e50:	4b26      	ldr	r3, [pc, #152]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5e:	4b23      	ldr	r3, [pc, #140]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e64:	4a21      	ldr	r2, [pc, #132]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003e66:	f043 0302 	orr.w	r3, r3, #2
 8003e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003eec <HAL_ETH_MspInit+0x148>)
 8003e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003e7c:	2332      	movs	r3, #50	@ 0x32
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e80:	2302      	movs	r3, #2
 8003e82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e8c:	230b      	movs	r3, #11
 8003e8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e94:	4619      	mov	r1, r3
 8003e96:	4816      	ldr	r0, [pc, #88]	@ (8003ef0 <HAL_ETH_MspInit+0x14c>)
 8003e98:	f7fe fbd0 	bl	800263c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003e9c:	2386      	movs	r3, #134	@ 0x86
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003eac:	230b      	movs	r3, #11
 8003eae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	480f      	ldr	r0, [pc, #60]	@ (8003ef4 <HAL_ETH_MspInit+0x150>)
 8003eb8:	f7fe fbc0 	bl	800263c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003ebc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ece:	230b      	movs	r3, #11
 8003ed0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4807      	ldr	r0, [pc, #28]	@ (8003ef8 <HAL_ETH_MspInit+0x154>)
 8003eda:	f7fe fbaf 	bl	800263c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3738      	adds	r7, #56	@ 0x38
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40028000 	.word	0x40028000
 8003eec:	58024400 	.word	0x58024400
 8003ef0:	58020800 	.word	0x58020800
 8003ef4:	58020000 	.word	0x58020000
 8003ef8:	58020400 	.word	0x58020400

08003efc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003f00:	4802      	ldr	r0, [pc, #8]	@ (8003f0c <ETH_PHY_IO_Init+0x10>)
 8003f02:	f7fd fdc9 	bl	8001a98 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	24004b48 	.word	0x24004b48

08003f10 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return 0;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	68f9      	ldr	r1, [r7, #12]
 8003f32:	4807      	ldr	r0, [pc, #28]	@ (8003f50 <ETH_PHY_IO_ReadReg+0x30>)
 8003f34:	f7fd fb1a 	bl	800156c <HAL_ETH_ReadPHYRegister>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f42:	e000      	b.n	8003f46 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	24004b48 	.word	0x24004b48

08003f54 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	68f9      	ldr	r1, [r7, #12]
 8003f66:	4807      	ldr	r0, [pc, #28]	@ (8003f84 <ETH_PHY_IO_WriteReg+0x30>)
 8003f68:	f7fd fb54 	bl	8001614 <HAL_ETH_WritePHYRegister>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003f72:	f04f 33ff 	mov.w	r3, #4294967295
 8003f76:	e000      	b.n	8003f7a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	24004b48 	.word	0x24004b48

08003f88 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003f8c:	f7fc feb2 	bl	8000cf4 <HAL_GetTick>
 8003f90:	4603      	mov	r3, r0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b0a0      	sub	sp, #128	@ 0x80
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003fa0:	f107 030c 	add.w	r3, r7, #12
 8003fa4:	2264      	movs	r2, #100	@ 0x64
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f009 ffa0 	bl	800deee <memset>
  int32_t PHYLinkState = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fba:	2300      	movs	r3, #0
 8003fbc:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003fbe:	483a      	ldr	r0, [pc, #232]	@ (80040a8 <ethernet_link_check_state+0x110>)
 8003fc0:	f7fc fd8a 	bl	8000ad8 <LAN8742_GetLinkState>
 8003fc4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00c      	beq.n	8003ff2 <ethernet_link_check_state+0x5a>
 8003fd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	dc09      	bgt.n	8003ff2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8003fde:	4833      	ldr	r0, [pc, #204]	@ (80040ac <ethernet_link_check_state+0x114>)
 8003fe0:	f7fd f964 	bl	80012ac <HAL_ETH_Stop>
    netif_set_down(netif);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f001 f893 	bl	8005110 <netif_set_down>
    netif_set_link_down(netif);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f001 f8f6 	bl	80051dc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003ff0:	e055      	b.n	800409e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d14e      	bne.n	800409e <ethernet_link_check_state+0x106>
 8004000:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004002:	2b01      	cmp	r3, #1
 8004004:	dd4b      	ble.n	800409e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004006:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004008:	3b02      	subs	r3, #2
 800400a:	2b03      	cmp	r3, #3
 800400c:	d82a      	bhi.n	8004064 <ethernet_link_check_state+0xcc>
 800400e:	a201      	add	r2, pc, #4	@ (adr r2, 8004014 <ethernet_link_check_state+0x7c>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004025 	.word	0x08004025
 8004018:	08004037 	.word	0x08004037
 800401c:	08004047 	.word	0x08004047
 8004020:	08004057 	.word	0x08004057
      duplex = ETH_FULLDUPLEX_MODE;
 8004024:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004028:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800402a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800402e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004030:	2301      	movs	r3, #1
 8004032:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004034:	e017      	b.n	8004066 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004036:	2300      	movs	r3, #0
 8004038:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800403a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800403e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004040:	2301      	movs	r3, #1
 8004042:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004044:	e00f      	b.n	8004066 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004046:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800404a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800404c:	2300      	movs	r3, #0
 800404e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004050:	2301      	movs	r3, #1
 8004052:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004054:	e007      	b.n	8004066 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004056:	2300      	movs	r3, #0
 8004058:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800405a:	2300      	movs	r3, #0
 800405c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800405e:	2301      	movs	r3, #1
 8004060:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004062:	e000      	b.n	8004066 <ethernet_link_check_state+0xce>
      break;
 8004064:	bf00      	nop
    if(linkchanged)
 8004066:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d018      	beq.n	800409e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800406c:	f107 030c 	add.w	r3, r7, #12
 8004070:	4619      	mov	r1, r3
 8004072:	480e      	ldr	r0, [pc, #56]	@ (80040ac <ethernet_link_check_state+0x114>)
 8004074:	f7fd fb22 	bl	80016bc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004078:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800407c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800407e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004080:	f107 030c 	add.w	r3, r7, #12
 8004084:	4619      	mov	r1, r3
 8004086:	4809      	ldr	r0, [pc, #36]	@ (80040ac <ethernet_link_check_state+0x114>)
 8004088:	f7fd fcec 	bl	8001a64 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800408c:	4807      	ldr	r0, [pc, #28]	@ (80040ac <ethernet_link_check_state+0x114>)
 800408e:	f7fd f8ab 	bl	80011e8 <HAL_ETH_Start>
      netif_set_up(netif);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 ffd0 	bl	8005038 <netif_set_up>
      netif_set_link_up(netif);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f001 f86b 	bl	8005174 <netif_set_link_up>
}
 800409e:	bf00      	nop
 80040a0:	3780      	adds	r7, #128	@ 0x80
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	24004c30 	.word	0x24004c30
 80040ac:	24004b48 	.word	0x24004b48

080040b0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80040b8:	4812      	ldr	r0, [pc, #72]	@ (8004104 <HAL_ETH_RxAllocateCallback+0x54>)
 80040ba:	f000 fd37 	bl	8004b2c <memp_malloc_pool>
 80040be:	60f8      	str	r0, [r7, #12]
  if (p)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d014      	beq.n	80040f0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f103 0220 	add.w	r2, r3, #32
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004108 <HAL_ETH_RxAllocateCallback+0x58>)
 80040d4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80040de:	9201      	str	r2, [sp, #4]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2241      	movs	r2, #65	@ 0x41
 80040e6:	2100      	movs	r1, #0
 80040e8:	2000      	movs	r0, #0
 80040ea:	f001 fa4d 	bl	8005588 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80040ee:	e005      	b.n	80040fc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80040f0:	4b06      	ldr	r3, [pc, #24]	@ (800410c <HAL_ETH_RxAllocateCallback+0x5c>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	08011640 	.word	0x08011640
 8004108:	08003d61 	.word	0x08003d61
 800410c:	24004b44 	.word	0x24004b44

08004110 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	b21a      	sxth	r2, r3
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	b29b      	uxth	r3, r3
 8004126:	b21b      	sxth	r3, r3
 8004128:	4313      	orrs	r3, r2
 800412a:	b21b      	sxth	r3, r3
 800412c:	b29b      	uxth	r3, r3
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	061a      	lsls	r2, r3, #24
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	0e1b      	lsrs	r3, r3, #24
 800415e:	4313      	orrs	r3, r2
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	@ 0x24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <lwip_standard_chksum+0x40>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	dd0a      	ble.n	80041ac <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	1c53      	adds	r3, r2, #1
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	f107 030e 	add.w	r3, r7, #14
 80041a0:	3301      	adds	r3, #1
 80041a2:	7812      	ldrb	r2, [r2, #0]
 80041a4:	701a      	strb	r2, [r3, #0]
    len--;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80041b0:	e00a      	b.n	80041c8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	1c9a      	adds	r2, r3, #2
 80041b6:	61ba      	str	r2, [r7, #24]
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	4413      	add	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
    len -= 2;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	3b02      	subs	r3, #2
 80041c6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	dcf1      	bgt.n	80041b2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	dd04      	ble.n	80041de <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80041d4:	f107 030e 	add.w	r3, r7, #14
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	7812      	ldrb	r2, [r2, #0]
 80041dc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80041de:	89fb      	ldrh	r3, [r7, #14]
 80041e0:	461a      	mov	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	4413      	add	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	0c1a      	lsrs	r2, r3, #16
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	0c1a      	lsrs	r2, r3, #16
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	b29a      	uxth	r2, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	b2db      	uxtb	r3, r3
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	b29b      	uxth	r3, r3
}
 800421a:	4618      	mov	r0, r3
 800421c:	3724      	adds	r7, #36	@ 0x24
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	4619      	mov	r1, r3
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff ff98 	bl	800416c <lwip_standard_chksum>
 800423c:	4603      	mov	r3, r0
 800423e:	43db      	mvns	r3, r3
 8004240:	b29b      	uxth	r3, r3
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b086      	sub	sp, #24
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	e02b      	b.n	80042b8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	895b      	ldrh	r3, [r3, #10]
 8004268:	4619      	mov	r1, r3
 800426a:	4610      	mov	r0, r2
 800426c:	f7ff ff7e 	bl	800416c <lwip_standard_chksum>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	4413      	add	r3, r2
 8004278:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	0c1a      	lsrs	r2, r3, #16
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	b29b      	uxth	r3, r3
 8004282:	4413      	add	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	895b      	ldrh	r3, [r3, #10]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00e      	beq.n	80042b2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	bf0c      	ite	eq
 800429a:	2301      	moveq	r3, #1
 800429c:	2300      	movne	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	0a1b      	lsrs	r3, r3, #8
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1d0      	bne.n	8004260 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	b29b      	uxth	r3, r3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80042ee:	f000 f8d5 	bl	800449c <mem_init>
  memp_init();
 80042f2:	f000 fbd7 	bl	8004aa4 <memp_init>
  pbuf_init();
  netif_init();
 80042f6:	f000 fcd5 	bl	8004ca4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80042fa:	f006 ffed 	bl	800b2d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80042fe:	f001 fd8b 	bl	8005e18 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004302:	f006 ffa1 	bl	800b248 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800431a:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <ptr_to_mem+0x20>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	4413      	add	r3, r2
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	24004c68 	.word	0x24004c68

08004334 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800433c:	4b05      	ldr	r3, [pc, #20]	@ (8004354 <mem_to_ptr+0x20>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	b29b      	uxth	r3, r3
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	24004c68 	.word	0x24004c68

08004358 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004360:	4b45      	ldr	r3, [pc, #276]	@ (8004478 <plug_holes+0x120>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	429a      	cmp	r2, r3
 8004368:	d206      	bcs.n	8004378 <plug_holes+0x20>
 800436a:	4b44      	ldr	r3, [pc, #272]	@ (800447c <plug_holes+0x124>)
 800436c:	f240 12df 	movw	r2, #479	@ 0x1df
 8004370:	4943      	ldr	r1, [pc, #268]	@ (8004480 <plug_holes+0x128>)
 8004372:	4844      	ldr	r0, [pc, #272]	@ (8004484 <plug_holes+0x12c>)
 8004374:	f009 fd56 	bl	800de24 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004378:	4b43      	ldr	r3, [pc, #268]	@ (8004488 <plug_holes+0x130>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	d306      	bcc.n	8004390 <plug_holes+0x38>
 8004382:	4b3e      	ldr	r3, [pc, #248]	@ (800447c <plug_holes+0x124>)
 8004384:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004388:	4940      	ldr	r1, [pc, #256]	@ (800448c <plug_holes+0x134>)
 800438a:	483e      	ldr	r0, [pc, #248]	@ (8004484 <plug_holes+0x12c>)
 800438c:	f009 fd4a 	bl	800de24 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	791b      	ldrb	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d006      	beq.n	80043a6 <plug_holes+0x4e>
 8004398:	4b38      	ldr	r3, [pc, #224]	@ (800447c <plug_holes+0x124>)
 800439a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800439e:	493c      	ldr	r1, [pc, #240]	@ (8004490 <plug_holes+0x138>)
 80043a0:	4838      	ldr	r0, [pc, #224]	@ (8004484 <plug_holes+0x12c>)
 80043a2:	f009 fd3f 	bl	800de24 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80043ae:	d906      	bls.n	80043be <plug_holes+0x66>
 80043b0:	4b32      	ldr	r3, [pc, #200]	@ (800447c <plug_holes+0x124>)
 80043b2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80043b6:	4937      	ldr	r1, [pc, #220]	@ (8004494 <plug_holes+0x13c>)
 80043b8:	4832      	ldr	r0, [pc, #200]	@ (8004484 <plug_holes+0x12c>)
 80043ba:	f009 fd33 	bl	800de24 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff ffa4 	bl	8004310 <ptr_to_mem>
 80043c8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d024      	beq.n	800441c <plug_holes+0xc4>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	791b      	ldrb	r3, [r3, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d120      	bne.n	800441c <plug_holes+0xc4>
 80043da:	4b2b      	ldr	r3, [pc, #172]	@ (8004488 <plug_holes+0x130>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d01b      	beq.n	800441c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80043e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004498 <plug_holes+0x140>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d102      	bne.n	80043f4 <plug_holes+0x9c>
      lfree = mem;
 80043ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004498 <plug_holes+0x140>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	881a      	ldrh	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004404:	d00a      	beq.n	800441c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff ff80 	bl	8004310 <ptr_to_mem>
 8004410:	4604      	mov	r4, r0
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff ff8e 	bl	8004334 <mem_to_ptr>
 8004418:	4603      	mov	r3, r0
 800441a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	885b      	ldrh	r3, [r3, #2]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff ff75 	bl	8004310 <ptr_to_mem>
 8004426:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	429a      	cmp	r2, r3
 800442e:	d01f      	beq.n	8004470 <plug_holes+0x118>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	791b      	ldrb	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d11b      	bne.n	8004470 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004438:	4b17      	ldr	r3, [pc, #92]	@ (8004498 <plug_holes+0x140>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	429a      	cmp	r2, r3
 8004440:	d102      	bne.n	8004448 <plug_holes+0xf0>
      lfree = pmem;
 8004442:	4a15      	ldr	r2, [pc, #84]	@ (8004498 <plug_holes+0x140>)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	881a      	ldrh	r2, [r3, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004458:	d00a      	beq.n	8004470 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff ff56 	bl	8004310 <ptr_to_mem>
 8004464:	4604      	mov	r4, r0
 8004466:	68b8      	ldr	r0, [r7, #8]
 8004468:	f7ff ff64 	bl	8004334 <mem_to_ptr>
 800446c:	4603      	mov	r3, r0
 800446e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	bd90      	pop	{r4, r7, pc}
 8004478:	24004c68 	.word	0x24004c68
 800447c:	0800eca4 	.word	0x0800eca4
 8004480:	0800ecd4 	.word	0x0800ecd4
 8004484:	0800ecec 	.word	0x0800ecec
 8004488:	24004c6c 	.word	0x24004c6c
 800448c:	0800ed14 	.word	0x0800ed14
 8004490:	0800ed30 	.word	0x0800ed30
 8004494:	0800ed4c 	.word	0x0800ed4c
 8004498:	24004c70 	.word	0x24004c70

0800449c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80044a2:	4b16      	ldr	r3, [pc, #88]	@ (80044fc <mem_init+0x60>)
 80044a4:	4a16      	ldr	r2, [pc, #88]	@ (8004500 <mem_init+0x64>)
 80044a6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80044a8:	4b14      	ldr	r3, [pc, #80]	@ (80044fc <mem_init+0x60>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80044b4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80044c2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80044c6:	f7ff ff23 	bl	8004310 <ptr_to_mem>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004504 <mem_init+0x68>)
 80044ce:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80044d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <mem_init+0x68>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2201      	movs	r2, #1
 80044d6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80044d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004504 <mem_init+0x68>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80044e0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80044e2:	4b08      	ldr	r3, [pc, #32]	@ (8004504 <mem_init+0x68>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80044ea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80044ec:	4b03      	ldr	r3, [pc, #12]	@ (80044fc <mem_init+0x60>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a05      	ldr	r2, [pc, #20]	@ (8004508 <mem_init+0x6c>)
 80044f2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	24004c68 	.word	0x24004c68
 8004500:	30044000 	.word	0x30044000
 8004504:	24004c6c 	.word	0x24004c6c
 8004508:	24004c70 	.word	0x24004c70

0800450c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ff0d 	bl	8004334 <mem_to_ptr>
 800451a:	4603      	mov	r3, r0
 800451c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fef4 	bl	8004310 <ptr_to_mem>
 8004528:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	885b      	ldrh	r3, [r3, #2]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff feee 	bl	8004310 <ptr_to_mem>
 8004534:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800453e:	d818      	bhi.n	8004572 <mem_link_valid+0x66>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	885b      	ldrh	r3, [r3, #2]
 8004544:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004548:	d813      	bhi.n	8004572 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800454e:	8afa      	ldrh	r2, [r7, #22]
 8004550:	429a      	cmp	r2, r3
 8004552:	d004      	beq.n	800455e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	8afa      	ldrh	r2, [r7, #22]
 800455a:	429a      	cmp	r2, r3
 800455c:	d109      	bne.n	8004572 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800455e:	4b08      	ldr	r3, [pc, #32]	@ (8004580 <mem_link_valid+0x74>)
 8004560:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	429a      	cmp	r2, r3
 8004566:	d006      	beq.n	8004576 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	885b      	ldrh	r3, [r3, #2]
 800456c:	8afa      	ldrh	r2, [r7, #22]
 800456e:	429a      	cmp	r2, r3
 8004570:	d001      	beq.n	8004576 <mem_link_valid+0x6a>
    return 0;
 8004572:	2300      	movs	r3, #0
 8004574:	e000      	b.n	8004578 <mem_link_valid+0x6c>
  }
  return 1;
 8004576:	2301      	movs	r3, #1
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	24004c6c 	.word	0x24004c6c

08004584 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d04c      	beq.n	800462c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800459c:	4b25      	ldr	r3, [pc, #148]	@ (8004634 <mem_free+0xb0>)
 800459e:	f240 2273 	movw	r2, #627	@ 0x273
 80045a2:	4925      	ldr	r1, [pc, #148]	@ (8004638 <mem_free+0xb4>)
 80045a4:	4825      	ldr	r0, [pc, #148]	@ (800463c <mem_free+0xb8>)
 80045a6:	f009 fc3d 	bl	800de24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80045aa:	e040      	b.n	800462e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3b08      	subs	r3, #8
 80045b0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80045b2:	4b23      	ldr	r3, [pc, #140]	@ (8004640 <mem_free+0xbc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d306      	bcc.n	80045ca <mem_free+0x46>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f103 020c 	add.w	r2, r3, #12
 80045c2:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <mem_free+0xc0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d907      	bls.n	80045da <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80045ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004634 <mem_free+0xb0>)
 80045cc:	f240 227f 	movw	r2, #639	@ 0x27f
 80045d0:	491d      	ldr	r1, [pc, #116]	@ (8004648 <mem_free+0xc4>)
 80045d2:	481a      	ldr	r0, [pc, #104]	@ (800463c <mem_free+0xb8>)
 80045d4:	f009 fc26 	bl	800de24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80045d8:	e029      	b.n	800462e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	791b      	ldrb	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d107      	bne.n	80045f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80045e2:	4b14      	ldr	r3, [pc, #80]	@ (8004634 <mem_free+0xb0>)
 80045e4:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80045e8:	4918      	ldr	r1, [pc, #96]	@ (800464c <mem_free+0xc8>)
 80045ea:	4814      	ldr	r0, [pc, #80]	@ (800463c <mem_free+0xb8>)
 80045ec:	f009 fc1a 	bl	800de24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80045f0:	e01d      	b.n	800462e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff ff8a 	bl	800450c <mem_link_valid>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d107      	bne.n	800460e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80045fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004634 <mem_free+0xb0>)
 8004600:	f240 2295 	movw	r2, #661	@ 0x295
 8004604:	4912      	ldr	r1, [pc, #72]	@ (8004650 <mem_free+0xcc>)
 8004606:	480d      	ldr	r0, [pc, #52]	@ (800463c <mem_free+0xb8>)
 8004608:	f009 fc0c 	bl	800de24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800460c:	e00f      	b.n	800462e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004614:	4b0f      	ldr	r3, [pc, #60]	@ (8004654 <mem_free+0xd0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	429a      	cmp	r2, r3
 800461c:	d202      	bcs.n	8004624 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800461e:	4a0d      	ldr	r2, [pc, #52]	@ (8004654 <mem_free+0xd0>)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7ff fe97 	bl	8004358 <plug_holes>
 800462a:	e000      	b.n	800462e <mem_free+0xaa>
    return;
 800462c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	0800eca4 	.word	0x0800eca4
 8004638:	0800ed78 	.word	0x0800ed78
 800463c:	0800ecec 	.word	0x0800ecec
 8004640:	24004c68 	.word	0x24004c68
 8004644:	24004c6c 	.word	0x24004c6c
 8004648:	0800ed9c 	.word	0x0800ed9c
 800464c:	0800edb8 	.word	0x0800edb8
 8004650:	0800ede0 	.word	0x0800ede0
 8004654:	24004c70 	.word	0x24004c70

08004658 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004664:	887b      	ldrh	r3, [r7, #2]
 8004666:	3303      	adds	r3, #3
 8004668:	b29b      	uxth	r3, r3
 800466a:	f023 0303 	bic.w	r3, r3, #3
 800466e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004670:	8bfb      	ldrh	r3, [r7, #30]
 8004672:	2b0b      	cmp	r3, #11
 8004674:	d801      	bhi.n	800467a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004676:	230c      	movs	r3, #12
 8004678:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800467a:	8bfb      	ldrh	r3, [r7, #30]
 800467c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004680:	d803      	bhi.n	800468a <mem_trim+0x32>
 8004682:	8bfa      	ldrh	r2, [r7, #30]
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	429a      	cmp	r2, r3
 8004688:	d201      	bcs.n	800468e <mem_trim+0x36>
    return NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	e0cc      	b.n	8004828 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800468e:	4b68      	ldr	r3, [pc, #416]	@ (8004830 <mem_trim+0x1d8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d304      	bcc.n	80046a2 <mem_trim+0x4a>
 8004698:	4b66      	ldr	r3, [pc, #408]	@ (8004834 <mem_trim+0x1dc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d306      	bcc.n	80046b0 <mem_trim+0x58>
 80046a2:	4b65      	ldr	r3, [pc, #404]	@ (8004838 <mem_trim+0x1e0>)
 80046a4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80046a8:	4964      	ldr	r1, [pc, #400]	@ (800483c <mem_trim+0x1e4>)
 80046aa:	4865      	ldr	r0, [pc, #404]	@ (8004840 <mem_trim+0x1e8>)
 80046ac:	f009 fbba 	bl	800de24 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80046b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004830 <mem_trim+0x1d8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d304      	bcc.n	80046c4 <mem_trim+0x6c>
 80046ba:	4b5e      	ldr	r3, [pc, #376]	@ (8004834 <mem_trim+0x1dc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d301      	bcc.n	80046c8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	e0af      	b.n	8004828 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3b08      	subs	r3, #8
 80046cc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80046ce:	69b8      	ldr	r0, [r7, #24]
 80046d0:	f7ff fe30 	bl	8004334 <mem_to_ptr>
 80046d4:	4603      	mov	r3, r0
 80046d6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	881a      	ldrh	r2, [r3, #0]
 80046dc:	8afb      	ldrh	r3, [r7, #22]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b08      	subs	r3, #8
 80046e4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80046e6:	8bfa      	ldrh	r2, [r7, #30]
 80046e8:	8abb      	ldrh	r3, [r7, #20]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d906      	bls.n	80046fc <mem_trim+0xa4>
 80046ee:	4b52      	ldr	r3, [pc, #328]	@ (8004838 <mem_trim+0x1e0>)
 80046f0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80046f4:	4953      	ldr	r1, [pc, #332]	@ (8004844 <mem_trim+0x1ec>)
 80046f6:	4852      	ldr	r0, [pc, #328]	@ (8004840 <mem_trim+0x1e8>)
 80046f8:	f009 fb94 	bl	800de24 <iprintf>
  if (newsize > size) {
 80046fc:	8bfa      	ldrh	r2, [r7, #30]
 80046fe:	8abb      	ldrh	r3, [r7, #20]
 8004700:	429a      	cmp	r2, r3
 8004702:	d901      	bls.n	8004708 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004704:	2300      	movs	r3, #0
 8004706:	e08f      	b.n	8004828 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004708:	8bfa      	ldrh	r2, [r7, #30]
 800470a:	8abb      	ldrh	r3, [r7, #20]
 800470c:	429a      	cmp	r2, r3
 800470e:	d101      	bne.n	8004714 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	e089      	b.n	8004828 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fdf9 	bl	8004310 <ptr_to_mem>
 800471e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	791b      	ldrb	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d13f      	bne.n	80047a8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004730:	d106      	bne.n	8004740 <mem_trim+0xe8>
 8004732:	4b41      	ldr	r3, [pc, #260]	@ (8004838 <mem_trim+0x1e0>)
 8004734:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8004738:	4943      	ldr	r1, [pc, #268]	@ (8004848 <mem_trim+0x1f0>)
 800473a:	4841      	ldr	r0, [pc, #260]	@ (8004840 <mem_trim+0x1e8>)
 800473c:	f009 fb72 	bl	800de24 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004746:	8afa      	ldrh	r2, [r7, #22]
 8004748:	8bfb      	ldrh	r3, [r7, #30]
 800474a:	4413      	add	r3, r2
 800474c:	b29b      	uxth	r3, r3
 800474e:	3308      	adds	r3, #8
 8004750:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004752:	4b3e      	ldr	r3, [pc, #248]	@ (800484c <mem_trim+0x1f4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	429a      	cmp	r2, r3
 800475a:	d106      	bne.n	800476a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fdd6 	bl	8004310 <ptr_to_mem>
 8004764:	4603      	mov	r3, r0
 8004766:	4a39      	ldr	r2, [pc, #228]	@ (800484c <mem_trim+0x1f4>)
 8004768:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800476a:	89fb      	ldrh	r3, [r7, #14]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fdcf 	bl	8004310 <ptr_to_mem>
 8004772:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2200      	movs	r2, #0
 8004778:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	89ba      	ldrh	r2, [r7, #12]
 800477e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	8afa      	ldrh	r2, [r7, #22]
 8004784:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	89fa      	ldrh	r2, [r7, #14]
 800478a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004794:	d047      	beq.n	8004826 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fdb8 	bl	8004310 <ptr_to_mem>
 80047a0:	4602      	mov	r2, r0
 80047a2:	89fb      	ldrh	r3, [r7, #14]
 80047a4:	8053      	strh	r3, [r2, #2]
 80047a6:	e03e      	b.n	8004826 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80047a8:	8bfb      	ldrh	r3, [r7, #30]
 80047aa:	f103 0214 	add.w	r2, r3, #20
 80047ae:	8abb      	ldrh	r3, [r7, #20]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d838      	bhi.n	8004826 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80047b4:	8afa      	ldrh	r2, [r7, #22]
 80047b6:	8bfb      	ldrh	r3, [r7, #30]
 80047b8:	4413      	add	r3, r2
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3308      	adds	r3, #8
 80047be:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80047c8:	d106      	bne.n	80047d8 <mem_trim+0x180>
 80047ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004838 <mem_trim+0x1e0>)
 80047cc:	f240 3216 	movw	r2, #790	@ 0x316
 80047d0:	491d      	ldr	r1, [pc, #116]	@ (8004848 <mem_trim+0x1f0>)
 80047d2:	481b      	ldr	r0, [pc, #108]	@ (8004840 <mem_trim+0x1e8>)
 80047d4:	f009 fb26 	bl	800de24 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80047d8:	89fb      	ldrh	r3, [r7, #14]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fd98 	bl	8004310 <ptr_to_mem>
 80047e0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80047e2:	4b1a      	ldr	r3, [pc, #104]	@ (800484c <mem_trim+0x1f4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d202      	bcs.n	80047f2 <mem_trim+0x19a>
      lfree = mem2;
 80047ec:	4a17      	ldr	r2, [pc, #92]	@ (800484c <mem_trim+0x1f4>)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2200      	movs	r2, #0
 80047f6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	881a      	ldrh	r2, [r3, #0]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	8afa      	ldrh	r2, [r7, #22]
 8004804:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	89fa      	ldrh	r2, [r7, #14]
 800480a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004814:	d007      	beq.n	8004826 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fd78 	bl	8004310 <ptr_to_mem>
 8004820:	4602      	mov	r2, r0
 8004822:	89fb      	ldrh	r3, [r7, #14]
 8004824:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004826:	687b      	ldr	r3, [r7, #4]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3720      	adds	r7, #32
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	24004c68 	.word	0x24004c68
 8004834:	24004c6c 	.word	0x24004c6c
 8004838:	0800eca4 	.word	0x0800eca4
 800483c:	0800ee14 	.word	0x0800ee14
 8004840:	0800ecec 	.word	0x0800ecec
 8004844:	0800ee2c 	.word	0x0800ee2c
 8004848:	0800ee4c 	.word	0x0800ee4c
 800484c:	24004c70 	.word	0x24004c70

08004850 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <mem_malloc+0x14>
    return NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	e0d9      	b.n	8004a18 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	3303      	adds	r3, #3
 8004868:	b29b      	uxth	r3, r3
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004870:	8bbb      	ldrh	r3, [r7, #28]
 8004872:	2b0b      	cmp	r3, #11
 8004874:	d801      	bhi.n	800487a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004876:	230c      	movs	r3, #12
 8004878:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800487a:	8bbb      	ldrh	r3, [r7, #28]
 800487c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004880:	d803      	bhi.n	800488a <mem_malloc+0x3a>
 8004882:	8bba      	ldrh	r2, [r7, #28]
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	429a      	cmp	r2, r3
 8004888:	d201      	bcs.n	800488e <mem_malloc+0x3e>
    return NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	e0c4      	b.n	8004a18 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800488e:	4b64      	ldr	r3, [pc, #400]	@ (8004a20 <mem_malloc+0x1d0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fd4e 	bl	8004334 <mem_to_ptr>
 8004898:	4603      	mov	r3, r0
 800489a:	83fb      	strh	r3, [r7, #30]
 800489c:	e0b4      	b.n	8004a08 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800489e:	8bfb      	ldrh	r3, [r7, #30]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fd35 	bl	8004310 <ptr_to_mem>
 80048a6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	791b      	ldrb	r3, [r3, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 80a4 	bne.w	80049fa <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	8bfb      	ldrh	r3, [r7, #30]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f1a3 0208 	sub.w	r2, r3, #8
 80048c0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80048c2:	429a      	cmp	r2, r3
 80048c4:	f0c0 8099 	bcc.w	80049fa <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	8bfb      	ldrh	r3, [r7, #30]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f1a3 0208 	sub.w	r2, r3, #8
 80048d6:	8bbb      	ldrh	r3, [r7, #28]
 80048d8:	3314      	adds	r3, #20
 80048da:	429a      	cmp	r2, r3
 80048dc:	d333      	bcc.n	8004946 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80048de:	8bfa      	ldrh	r2, [r7, #30]
 80048e0:	8bbb      	ldrh	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3308      	adds	r3, #8
 80048e8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80048ea:	8a7b      	ldrh	r3, [r7, #18]
 80048ec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80048f0:	d106      	bne.n	8004900 <mem_malloc+0xb0>
 80048f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004a24 <mem_malloc+0x1d4>)
 80048f4:	f240 3287 	movw	r2, #903	@ 0x387
 80048f8:	494b      	ldr	r1, [pc, #300]	@ (8004a28 <mem_malloc+0x1d8>)
 80048fa:	484c      	ldr	r0, [pc, #304]	@ (8004a2c <mem_malloc+0x1dc>)
 80048fc:	f009 fa92 	bl	800de24 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004900:	8a7b      	ldrh	r3, [r7, #18]
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff fd04 	bl	8004310 <ptr_to_mem>
 8004908:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	881a      	ldrh	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8bfa      	ldrh	r2, [r7, #30]
 800491c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	8a7a      	ldrh	r2, [r7, #18]
 8004922:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2201      	movs	r2, #1
 8004928:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004932:	d00b      	beq.n	800494c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fce9 	bl	8004310 <ptr_to_mem>
 800493e:	4602      	mov	r2, r0
 8004940:	8a7b      	ldrh	r3, [r7, #18]
 8004942:	8053      	strh	r3, [r2, #2]
 8004944:	e002      	b.n	800494c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2201      	movs	r2, #1
 800494a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800494c:	4b34      	ldr	r3, [pc, #208]	@ (8004a20 <mem_malloc+0x1d0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	429a      	cmp	r2, r3
 8004954:	d127      	bne.n	80049a6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004956:	4b32      	ldr	r3, [pc, #200]	@ (8004a20 <mem_malloc+0x1d0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800495c:	e005      	b.n	800496a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fcd4 	bl	8004310 <ptr_to_mem>
 8004968:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	791b      	ldrb	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d004      	beq.n	800497c <mem_malloc+0x12c>
 8004972:	4b2f      	ldr	r3, [pc, #188]	@ (8004a30 <mem_malloc+0x1e0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	429a      	cmp	r2, r3
 800497a:	d1f0      	bne.n	800495e <mem_malloc+0x10e>
          }
          lfree = cur;
 800497c:	4a28      	ldr	r2, [pc, #160]	@ (8004a20 <mem_malloc+0x1d0>)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004982:	4b27      	ldr	r3, [pc, #156]	@ (8004a20 <mem_malloc+0x1d0>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b2a      	ldr	r3, [pc, #168]	@ (8004a30 <mem_malloc+0x1e0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d00b      	beq.n	80049a6 <mem_malloc+0x156>
 800498e:	4b24      	ldr	r3, [pc, #144]	@ (8004a20 <mem_malloc+0x1d0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	791b      	ldrb	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d006      	beq.n	80049a6 <mem_malloc+0x156>
 8004998:	4b22      	ldr	r3, [pc, #136]	@ (8004a24 <mem_malloc+0x1d4>)
 800499a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800499e:	4925      	ldr	r1, [pc, #148]	@ (8004a34 <mem_malloc+0x1e4>)
 80049a0:	4822      	ldr	r0, [pc, #136]	@ (8004a2c <mem_malloc+0x1dc>)
 80049a2:	f009 fa3f 	bl	800de24 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80049a6:	8bba      	ldrh	r2, [r7, #28]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4413      	add	r3, r2
 80049ac:	3308      	adds	r3, #8
 80049ae:	4a20      	ldr	r2, [pc, #128]	@ (8004a30 <mem_malloc+0x1e0>)
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d906      	bls.n	80049c4 <mem_malloc+0x174>
 80049b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a24 <mem_malloc+0x1d4>)
 80049b8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80049bc:	491e      	ldr	r1, [pc, #120]	@ (8004a38 <mem_malloc+0x1e8>)
 80049be:	481b      	ldr	r0, [pc, #108]	@ (8004a2c <mem_malloc+0x1dc>)
 80049c0:	f009 fa30 	bl	800de24 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d006      	beq.n	80049dc <mem_malloc+0x18c>
 80049ce:	4b15      	ldr	r3, [pc, #84]	@ (8004a24 <mem_malloc+0x1d4>)
 80049d0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80049d4:	4919      	ldr	r1, [pc, #100]	@ (8004a3c <mem_malloc+0x1ec>)
 80049d6:	4815      	ldr	r0, [pc, #84]	@ (8004a2c <mem_malloc+0x1dc>)
 80049d8:	f009 fa24 	bl	800de24 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d006      	beq.n	80049f4 <mem_malloc+0x1a4>
 80049e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a24 <mem_malloc+0x1d4>)
 80049e8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80049ec:	4914      	ldr	r1, [pc, #80]	@ (8004a40 <mem_malloc+0x1f0>)
 80049ee:	480f      	ldr	r0, [pc, #60]	@ (8004a2c <mem_malloc+0x1dc>)
 80049f0:	f009 fa18 	bl	800de24 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	3308      	adds	r3, #8
 80049f8:	e00e      	b.n	8004a18 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80049fa:	8bfb      	ldrh	r3, [r7, #30]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fc87 	bl	8004310 <ptr_to_mem>
 8004a02:	4603      	mov	r3, r0
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004a08:	8bfa      	ldrh	r2, [r7, #30]
 8004a0a:	8bbb      	ldrh	r3, [r7, #28]
 8004a0c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8004a10:	429a      	cmp	r2, r3
 8004a12:	f4ff af44 	bcc.w	800489e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3720      	adds	r7, #32
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	24004c70 	.word	0x24004c70
 8004a24:	0800eca4 	.word	0x0800eca4
 8004a28:	0800ee4c 	.word	0x0800ee4c
 8004a2c:	0800ecec 	.word	0x0800ecec
 8004a30:	24004c6c 	.word	0x24004c6c
 8004a34:	0800ee60 	.word	0x0800ee60
 8004a38:	0800ee7c 	.word	0x0800ee7c
 8004a3c:	0800eeac 	.word	0x0800eeac
 8004a40:	0800eedc 	.word	0x0800eedc

08004a44 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	3303      	adds	r3, #3
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e011      	b.n	8004a8a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4413      	add	r3, r2
 8004a82:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3301      	adds	r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	885b      	ldrh	r3, [r3, #2]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4293      	cmp	r3, r2
 8004a94:	dbe7      	blt.n	8004a66 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004aaa:	2300      	movs	r3, #0
 8004aac:	80fb      	strh	r3, [r7, #6]
 8004aae:	e009      	b.n	8004ac4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	4a08      	ldr	r2, [pc, #32]	@ (8004ad4 <memp_init+0x30>)
 8004ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ffc3 	bl	8004a44 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	80fb      	strh	r3, [r7, #6]
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d9f2      	bls.n	8004ab0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004aca:	bf00      	nop
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	080116b8 	.word	0x080116b8

08004ad8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d012      	beq.n	8004b14 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d006      	beq.n	8004b10 <do_memp_malloc_pool+0x38>
 8004b02:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <do_memp_malloc_pool+0x48>)
 8004b04:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8004b08:	4906      	ldr	r1, [pc, #24]	@ (8004b24 <do_memp_malloc_pool+0x4c>)
 8004b0a:	4807      	ldr	r0, [pc, #28]	@ (8004b28 <do_memp_malloc_pool+0x50>)
 8004b0c:	f009 f98a 	bl	800de24 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	e000      	b.n	8004b16 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	0800ef00 	.word	0x0800ef00
 8004b24:	0800ef30 	.word	0x0800ef30
 8004b28:	0800ef54 	.word	0x0800ef54

08004b2c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <memp_malloc_pool+0x1c>
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <memp_malloc_pool+0x38>)
 8004b3c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8004b40:	4909      	ldr	r1, [pc, #36]	@ (8004b68 <memp_malloc_pool+0x3c>)
 8004b42:	480a      	ldr	r0, [pc, #40]	@ (8004b6c <memp_malloc_pool+0x40>)
 8004b44:	f009 f96e 	bl	800de24 <iprintf>
  if (desc == NULL) {
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <memp_malloc_pool+0x26>
    return NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e003      	b.n	8004b5a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff ffc0 	bl	8004ad8 <do_memp_malloc_pool>
 8004b58:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	0800ef00 	.word	0x0800ef00
 8004b68:	0800ef7c 	.word	0x0800ef7c
 8004b6c:	0800ef54 	.word	0x0800ef54

08004b70 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d908      	bls.n	8004b92 <memp_malloc+0x22>
 8004b80:	4b0a      	ldr	r3, [pc, #40]	@ (8004bac <memp_malloc+0x3c>)
 8004b82:	f240 1257 	movw	r2, #343	@ 0x157
 8004b86:	490a      	ldr	r1, [pc, #40]	@ (8004bb0 <memp_malloc+0x40>)
 8004b88:	480a      	ldr	r0, [pc, #40]	@ (8004bb4 <memp_malloc+0x44>)
 8004b8a:	f009 f94b 	bl	800de24 <iprintf>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e008      	b.n	8004ba4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	4a08      	ldr	r2, [pc, #32]	@ (8004bb8 <memp_malloc+0x48>)
 8004b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff ff9c 	bl	8004ad8 <do_memp_malloc_pool>
 8004ba0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	0800ef00 	.word	0x0800ef00
 8004bb0:	0800ef90 	.word	0x0800ef90
 8004bb4:	0800ef54 	.word	0x0800ef54
 8004bb8:	080116b8 	.word	0x080116b8

08004bbc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d006      	beq.n	8004bde <do_memp_free_pool+0x22>
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <do_memp_free_pool+0x40>)
 8004bd2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8004bd6:	490a      	ldr	r1, [pc, #40]	@ (8004c00 <do_memp_free_pool+0x44>)
 8004bd8:	480a      	ldr	r0, [pc, #40]	@ (8004c04 <do_memp_free_pool+0x48>)
 8004bda:	f009 f923 	bl	800de24 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	0800ef00 	.word	0x0800ef00
 8004c00:	0800efb0 	.word	0x0800efb0
 8004c04:	0800ef54 	.word	0x0800ef54

08004c08 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <memp_free_pool+0x1e>
 8004c18:	4b0a      	ldr	r3, [pc, #40]	@ (8004c44 <memp_free_pool+0x3c>)
 8004c1a:	f240 1295 	movw	r2, #405	@ 0x195
 8004c1e:	490a      	ldr	r1, [pc, #40]	@ (8004c48 <memp_free_pool+0x40>)
 8004c20:	480a      	ldr	r0, [pc, #40]	@ (8004c4c <memp_free_pool+0x44>)
 8004c22:	f009 f8ff 	bl	800de24 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <memp_free_pool+0x34>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d004      	beq.n	8004c3c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff ffc1 	bl	8004bbc <do_memp_free_pool>
 8004c3a:	e000      	b.n	8004c3e <memp_free_pool+0x36>
    return;
 8004c3c:	bf00      	nop
}
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	0800ef00 	.word	0x0800ef00
 8004c48:	0800ef7c 	.word	0x0800ef7c
 8004c4c:	0800ef54 	.word	0x0800ef54

08004c50 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	6039      	str	r1, [r7, #0]
 8004c5a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d907      	bls.n	8004c72 <memp_free+0x22>
 8004c62:	4b0c      	ldr	r3, [pc, #48]	@ (8004c94 <memp_free+0x44>)
 8004c64:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8004c68:	490b      	ldr	r1, [pc, #44]	@ (8004c98 <memp_free+0x48>)
 8004c6a:	480c      	ldr	r0, [pc, #48]	@ (8004c9c <memp_free+0x4c>)
 8004c6c:	f009 f8da 	bl	800de24 <iprintf>
 8004c70:	e00c      	b.n	8004c8c <memp_free+0x3c>

  if (mem == NULL) {
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	4a09      	ldr	r2, [pc, #36]	@ (8004ca0 <memp_free+0x50>)
 8004c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c80:	6839      	ldr	r1, [r7, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff ff9a 	bl	8004bbc <do_memp_free_pool>
 8004c88:	e000      	b.n	8004c8c <memp_free+0x3c>
    return;
 8004c8a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	0800ef00 	.word	0x0800ef00
 8004c98:	0800efd0 	.word	0x0800efd0
 8004c9c:	0800ef54 	.word	0x0800ef54
 8004ca0:	080116b8 	.word	0x080116b8

08004ca4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004ca8:	bf00      	nop
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d108      	bne.n	8004cda <netif_add+0x26>
 8004cc8:	4b57      	ldr	r3, [pc, #348]	@ (8004e28 <netif_add+0x174>)
 8004cca:	f240 1227 	movw	r2, #295	@ 0x127
 8004cce:	4957      	ldr	r1, [pc, #348]	@ (8004e2c <netif_add+0x178>)
 8004cd0:	4857      	ldr	r0, [pc, #348]	@ (8004e30 <netif_add+0x17c>)
 8004cd2:	f009 f8a7 	bl	800de24 <iprintf>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e0a2      	b.n	8004e20 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d108      	bne.n	8004cf2 <netif_add+0x3e>
 8004ce0:	4b51      	ldr	r3, [pc, #324]	@ (8004e28 <netif_add+0x174>)
 8004ce2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8004ce6:	4953      	ldr	r1, [pc, #332]	@ (8004e34 <netif_add+0x180>)
 8004ce8:	4851      	ldr	r0, [pc, #324]	@ (8004e30 <netif_add+0x17c>)
 8004cea:	f009 f89b 	bl	800de24 <iprintf>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e096      	b.n	8004e20 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004cf8:	4b4f      	ldr	r3, [pc, #316]	@ (8004e38 <netif_add+0x184>)
 8004cfa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004d02:	4b4d      	ldr	r3, [pc, #308]	@ (8004e38 <netif_add+0x184>)
 8004d04:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8004e38 <netif_add+0x184>)
 8004d0e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a45      	ldr	r2, [pc, #276]	@ (8004e3c <netif_add+0x188>)
 8004d26:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a3a      	ldr	r2, [r7, #32]
 8004d40:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004d42:	4b3f      	ldr	r3, [pc, #252]	@ (8004e40 <netif_add+0x18c>)
 8004d44:	781a      	ldrb	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d50:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f913 	bl	8004f84 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	4798      	blx	r3
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <netif_add+0xba>
    return NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e058      	b.n	8004e20 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d74:	2bff      	cmp	r3, #255	@ 0xff
 8004d76:	d103      	bne.n	8004d80 <netif_add+0xcc>
        netif->num = 0;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004d84:	4b2f      	ldr	r3, [pc, #188]	@ (8004e44 <netif_add+0x190>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e02b      	b.n	8004de4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d106      	bne.n	8004da2 <netif_add+0xee>
 8004d94:	4b24      	ldr	r3, [pc, #144]	@ (8004e28 <netif_add+0x174>)
 8004d96:	f240 128b 	movw	r2, #395	@ 0x18b
 8004d9a:	492b      	ldr	r1, [pc, #172]	@ (8004e48 <netif_add+0x194>)
 8004d9c:	4824      	ldr	r0, [pc, #144]	@ (8004e30 <netif_add+0x17c>)
 8004d9e:	f009 f841 	bl	800de24 <iprintf>
        num_netifs++;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	3301      	adds	r3, #1
 8004da6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2bff      	cmp	r3, #255	@ 0xff
 8004dac:	dd06      	ble.n	8004dbc <netif_add+0x108>
 8004dae:	4b1e      	ldr	r3, [pc, #120]	@ (8004e28 <netif_add+0x174>)
 8004db0:	f240 128d 	movw	r2, #397	@ 0x18d
 8004db4:	4925      	ldr	r1, [pc, #148]	@ (8004e4c <netif_add+0x198>)
 8004db6:	481e      	ldr	r0, [pc, #120]	@ (8004e30 <netif_add+0x17c>)
 8004db8:	f009 f834 	bl	800de24 <iprintf>
        if (netif2->num == netif->num) {
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d108      	bne.n	8004dde <netif_add+0x12a>
          netif->num++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8004ddc:	e005      	b.n	8004dea <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1d0      	bne.n	8004d8c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1be      	bne.n	8004d6e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004df6:	2bfe      	cmp	r3, #254	@ 0xfe
 8004df8:	d103      	bne.n	8004e02 <netif_add+0x14e>
    netif_num = 0;
 8004dfa:	4b11      	ldr	r3, [pc, #68]	@ (8004e40 <netif_add+0x18c>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e006      	b.n	8004e10 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e08:	3301      	adds	r3, #1
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e40 <netif_add+0x18c>)
 8004e0e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004e10:	4b0c      	ldr	r3, [pc, #48]	@ (8004e44 <netif_add+0x190>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004e18:	4a0a      	ldr	r2, [pc, #40]	@ (8004e44 <netif_add+0x190>)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	0800efec 	.word	0x0800efec
 8004e2c:	0800f080 	.word	0x0800f080
 8004e30:	0800f03c 	.word	0x0800f03c
 8004e34:	0800f09c 	.word	0x0800f09c
 8004e38:	0801171c 	.word	0x0801171c
 8004e3c:	0800525f 	.word	0x0800525f
 8004e40:	24007b68 	.word	0x24007b68
 8004e44:	24007b60 	.word	0x24007b60
 8004e48:	0800f0c0 	.word	0x0800f0c0
 8004e4c:	0800f0d4 	.word	0x0800f0d4

08004e50 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004e5a:	6839      	ldr	r1, [r7, #0]
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f002 fb25 	bl	80074ac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004e62:	6839      	ldr	r1, [r7, #0]
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f006 fbc1 	bl	800b5ec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <netif_do_set_ipaddr+0x20>
 8004e86:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <netif_do_set_ipaddr+0x88>)
 8004e88:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8004e8c:	491c      	ldr	r1, [pc, #112]	@ (8004f00 <netif_do_set_ipaddr+0x8c>)
 8004e8e:	481d      	ldr	r0, [pc, #116]	@ (8004f04 <netif_do_set_ipaddr+0x90>)
 8004e90:	f008 ffc8 	bl	800de24 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <netif_do_set_ipaddr+0x34>
 8004e9a:	4b18      	ldr	r3, [pc, #96]	@ (8004efc <netif_do_set_ipaddr+0x88>)
 8004e9c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8004ea0:	4917      	ldr	r1, [pc, #92]	@ (8004f00 <netif_do_set_ipaddr+0x8c>)
 8004ea2:	4818      	ldr	r0, [pc, #96]	@ (8004f04 <netif_do_set_ipaddr+0x90>)
 8004ea4:	f008 ffbe 	bl	800de24 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d01c      	beq.n	8004ef0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004ec6:	f107 0314 	add.w	r3, r7, #20
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ffbf 	bl	8004e50 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <netif_do_set_ipaddr+0x6a>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	e000      	b.n	8004ee0 <netif_do_set_ipaddr+0x6c>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f8d2 	bl	8005090 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	0800efec 	.word	0x0800efec
 8004f00:	0800f104 	.word	0x0800f104
 8004f04:	0800f03c 	.word	0x0800f03c

08004f08 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d00a      	beq.n	8004f38 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <netif_do_set_netmask+0x26>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	e000      	b.n	8004f30 <netif_do_set_netmask+0x28>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b085      	sub	sp, #20
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d00a      	beq.n	8004f76 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <netif_do_set_gw+0x26>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	e000      	b.n	8004f6e <netif_do_set_gw+0x28>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8005014 <netif_set_addr+0x90>)
 8004fa2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004faa:	4b1a      	ldr	r3, [pc, #104]	@ (8005014 <netif_set_addr+0x90>)
 8004fac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004fb4:	4b17      	ldr	r3, [pc, #92]	@ (8005014 <netif_set_addr+0x90>)
 8004fb6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <netif_set_addr+0x42>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <netif_set_addr+0x46>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <netif_set_addr+0x48>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d006      	beq.n	8004fe2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004fd4:	f107 0310 	add.w	r3, r7, #16
 8004fd8:	461a      	mov	r2, r3
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7ff ff49 	bl	8004e74 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff ff8e 	bl	8004f08 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	6839      	ldr	r1, [r7, #0]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f7ff ffa8 	bl	8004f46 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	461a      	mov	r2, r3
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff ff35 	bl	8004e74 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800500a:	bf00      	nop
 800500c:	3720      	adds	r7, #32
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	0801171c 	.word	0x0801171c

08005018 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005020:	4a04      	ldr	r2, [pc, #16]	@ (8005034 <netif_set_default+0x1c>)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	24007b64 	.word	0x24007b64

08005038 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d107      	bne.n	8005056 <netif_set_up+0x1e>
 8005046:	4b0f      	ldr	r3, [pc, #60]	@ (8005084 <netif_set_up+0x4c>)
 8005048:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800504c:	490e      	ldr	r1, [pc, #56]	@ (8005088 <netif_set_up+0x50>)
 800504e:	480f      	ldr	r0, [pc, #60]	@ (800508c <netif_set_up+0x54>)
 8005050:	f008 fee8 	bl	800de24 <iprintf>
 8005054:	e013      	b.n	800507e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10c      	bne.n	800507e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005076:	2103      	movs	r1, #3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f809 	bl	8005090 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	0800efec 	.word	0x0800efec
 8005088:	0800f174 	.word	0x0800f174
 800508c:	0800f03c 	.word	0x0800f03c

08005090 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <netif_issue_reports+0x20>
 80050a2:	4b18      	ldr	r3, [pc, #96]	@ (8005104 <netif_issue_reports+0x74>)
 80050a4:	f240 326d 	movw	r2, #877	@ 0x36d
 80050a8:	4917      	ldr	r1, [pc, #92]	@ (8005108 <netif_issue_reports+0x78>)
 80050aa:	4818      	ldr	r0, [pc, #96]	@ (800510c <netif_issue_reports+0x7c>)
 80050ac:	f008 feba 	bl	800de24 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d01e      	beq.n	80050fc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80050c4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d017      	beq.n	80050fc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d013      	beq.n	80050fe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00e      	beq.n	80050fe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f007 f9e3 	bl	800c4c0 <etharp_request>
 80050fa:	e000      	b.n	80050fe <netif_issue_reports+0x6e>
    return;
 80050fc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	0800efec 	.word	0x0800efec
 8005108:	0800f190 	.word	0x0800f190
 800510c:	0800f03c 	.word	0x0800f03c

08005110 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d107      	bne.n	800512e <netif_set_down+0x1e>
 800511e:	4b12      	ldr	r3, [pc, #72]	@ (8005168 <netif_set_down+0x58>)
 8005120:	f240 329b 	movw	r2, #923	@ 0x39b
 8005124:	4911      	ldr	r1, [pc, #68]	@ (800516c <netif_set_down+0x5c>)
 8005126:	4812      	ldr	r0, [pc, #72]	@ (8005170 <netif_set_down+0x60>)
 8005128:	f008 fe7c 	bl	800de24 <iprintf>
 800512c:	e019      	b.n	8005162 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d012      	beq.n	8005162 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	b2da      	uxtb	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f006 fd6d 	bl	800bc3c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	0800efec 	.word	0x0800efec
 800516c:	0800f1b4 	.word	0x0800f1b4
 8005170:	0800f03c 	.word	0x0800f03c

08005174 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d107      	bne.n	8005192 <netif_set_link_up+0x1e>
 8005182:	4b13      	ldr	r3, [pc, #76]	@ (80051d0 <netif_set_link_up+0x5c>)
 8005184:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8005188:	4912      	ldr	r1, [pc, #72]	@ (80051d4 <netif_set_link_up+0x60>)
 800518a:	4813      	ldr	r0, [pc, #76]	@ (80051d8 <netif_set_link_up+0x64>)
 800518c:	f008 fe4a 	bl	800de24 <iprintf>
 8005190:	e01b      	b.n	80051ca <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d114      	bne.n	80051ca <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80051b2:	2103      	movs	r1, #3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff ff6b 	bl	8005090 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <netif_set_link_up+0x56>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	0800efec 	.word	0x0800efec
 80051d4:	0800f1d4 	.word	0x0800f1d4
 80051d8:	0800f03c 	.word	0x0800f03c

080051dc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d107      	bne.n	80051fa <netif_set_link_down+0x1e>
 80051ea:	4b11      	ldr	r3, [pc, #68]	@ (8005230 <netif_set_link_down+0x54>)
 80051ec:	f240 4206 	movw	r2, #1030	@ 0x406
 80051f0:	4910      	ldr	r1, [pc, #64]	@ (8005234 <netif_set_link_down+0x58>)
 80051f2:	4811      	ldr	r0, [pc, #68]	@ (8005238 <netif_set_link_down+0x5c>)
 80051f4:	f008 fe16 	bl	800de24 <iprintf>
 80051f8:	e017      	b.n	800522a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d010      	beq.n	800522a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800520e:	f023 0304 	bic.w	r3, r3, #4
 8005212:	b2da      	uxtb	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <netif_set_link_down+0x4e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	0800efec 	.word	0x0800efec
 8005234:	0800f1f8 	.word	0x0800f1f8
 8005238:	0800f03c 	.word	0x0800f03c

0800523c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	61da      	str	r2, [r3, #28]
  }
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800526a:	f06f 030b 	mvn.w	r3, #11
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d013      	beq.n	80052b4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800528c:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <netif_get_by_index+0x48>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	e00c      	b.n	80052ae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800529a:	3301      	adds	r3, #1
 800529c:	b2db      	uxtb	r3, r3
 800529e:	79fa      	ldrb	r2, [r7, #7]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d101      	bne.n	80052a8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	e006      	b.n	80052b6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1ef      	bne.n	8005294 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	24007b60 	.word	0x24007b60

080052c8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80052cc:	4b03      	ldr	r3, [pc, #12]	@ (80052dc <pbuf_pool_is_empty+0x14>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80052d2:	bf00      	nop
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	24007b69 	.word	0x24007b69

080052e0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4611      	mov	r1, r2
 80052ec:	461a      	mov	r2, r3
 80052ee:	460b      	mov	r3, r1
 80052f0:	80fb      	strh	r3, [r7, #6]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	88fa      	ldrh	r2, [r7, #6]
 8005306:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	88ba      	ldrh	r2, [r7, #4]
 800530c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800530e:	8b3b      	ldrh	r3, [r7, #24]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	7f3a      	ldrb	r2, [r7, #28]
 800531a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	73da      	strb	r2, [r3, #15]
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08c      	sub	sp, #48	@ 0x30
 8005338:	af02      	add	r7, sp, #8
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
 800533e:	460b      	mov	r3, r1
 8005340:	80bb      	strh	r3, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800534a:	887b      	ldrh	r3, [r7, #2]
 800534c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005350:	d07f      	beq.n	8005452 <pbuf_alloc+0x11e>
 8005352:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005356:	f300 80c8 	bgt.w	80054ea <pbuf_alloc+0x1b6>
 800535a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800535e:	d010      	beq.n	8005382 <pbuf_alloc+0x4e>
 8005360:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005364:	f300 80c1 	bgt.w	80054ea <pbuf_alloc+0x1b6>
 8005368:	2b01      	cmp	r3, #1
 800536a:	d002      	beq.n	8005372 <pbuf_alloc+0x3e>
 800536c:	2b41      	cmp	r3, #65	@ 0x41
 800536e:	f040 80bc 	bne.w	80054ea <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005372:	887a      	ldrh	r2, [r7, #2]
 8005374:	88bb      	ldrh	r3, [r7, #4]
 8005376:	4619      	mov	r1, r3
 8005378:	2000      	movs	r0, #0
 800537a:	f000 f8d1 	bl	8005520 <pbuf_alloc_reference>
 800537e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8005380:	e0bd      	b.n	80054fe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800538a:	88bb      	ldrh	r3, [r7, #4]
 800538c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800538e:	2008      	movs	r0, #8
 8005390:	f7ff fbee 	bl	8004b70 <memp_malloc>
 8005394:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800539c:	f7ff ff94 	bl	80052c8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <pbuf_alloc+0x78>
            pbuf_free(p);
 80053a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053a8:	f000 faa8 	bl	80058fc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e0a7      	b.n	8005500 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80053b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80053b2:	3303      	adds	r3, #3
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	8b7a      	ldrh	r2, [r7, #26]
 80053c4:	4293      	cmp	r3, r2
 80053c6:	bf28      	it	cs
 80053c8:	4613      	movcs	r3, r2
 80053ca:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80053cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80053ce:	3310      	adds	r3, #16
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	3303      	adds	r3, #3
 80053d6:	f023 0303 	bic.w	r3, r3, #3
 80053da:	4618      	mov	r0, r3
 80053dc:	89f9      	ldrh	r1, [r7, #14]
 80053de:	8b7a      	ldrh	r2, [r7, #26]
 80053e0:	2300      	movs	r3, #0
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	887b      	ldrh	r3, [r7, #2]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	460b      	mov	r3, r1
 80053ea:	4601      	mov	r1, r0
 80053ec:	6938      	ldr	r0, [r7, #16]
 80053ee:	f7ff ff77 	bl	80052e0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d006      	beq.n	800540c <pbuf_alloc+0xd8>
 80053fe:	4b42      	ldr	r3, [pc, #264]	@ (8005508 <pbuf_alloc+0x1d4>)
 8005400:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005404:	4941      	ldr	r1, [pc, #260]	@ (800550c <pbuf_alloc+0x1d8>)
 8005406:	4842      	ldr	r0, [pc, #264]	@ (8005510 <pbuf_alloc+0x1dc>)
 8005408:	f008 fd0c 	bl	800de24 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800540c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800540e:	3303      	adds	r3, #3
 8005410:	f023 0303 	bic.w	r3, r3, #3
 8005414:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8005418:	d106      	bne.n	8005428 <pbuf_alloc+0xf4>
 800541a:	4b3b      	ldr	r3, [pc, #236]	@ (8005508 <pbuf_alloc+0x1d4>)
 800541c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005420:	493c      	ldr	r1, [pc, #240]	@ (8005514 <pbuf_alloc+0x1e0>)
 8005422:	483b      	ldr	r0, [pc, #236]	@ (8005510 <pbuf_alloc+0x1dc>)
 8005424:	f008 fcfe 	bl	800de24 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	d102      	bne.n	8005434 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
 8005432:	e002      	b.n	800543a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800543e:	8b7a      	ldrh	r2, [r7, #26]
 8005440:	89fb      	ldrh	r3, [r7, #14]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800544a:	8b7b      	ldrh	r3, [r7, #26]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d19e      	bne.n	800538e <pbuf_alloc+0x5a>
      break;
 8005450:	e055      	b.n	80054fe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005452:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005454:	3303      	adds	r3, #3
 8005456:	b29b      	uxth	r3, r3
 8005458:	f023 0303 	bic.w	r3, r3, #3
 800545c:	b29a      	uxth	r2, r3
 800545e:	88bb      	ldrh	r3, [r7, #4]
 8005460:	3303      	adds	r3, #3
 8005462:	b29b      	uxth	r3, r3
 8005464:	f023 0303 	bic.w	r3, r3, #3
 8005468:	b29b      	uxth	r3, r3
 800546a:	4413      	add	r3, r2
 800546c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800546e:	8b3b      	ldrh	r3, [r7, #24]
 8005470:	3310      	adds	r3, #16
 8005472:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005474:	8b3a      	ldrh	r2, [r7, #24]
 8005476:	88bb      	ldrh	r3, [r7, #4]
 8005478:	3303      	adds	r3, #3
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	429a      	cmp	r2, r3
 8005480:	d306      	bcc.n	8005490 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005482:	8afa      	ldrh	r2, [r7, #22]
 8005484:	88bb      	ldrh	r3, [r7, #4]
 8005486:	3303      	adds	r3, #3
 8005488:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d201      	bcs.n	8005494 <pbuf_alloc+0x160>
        return NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	e035      	b.n	8005500 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005494:	8afb      	ldrh	r3, [r7, #22]
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff f9da 	bl	8004850 <mem_malloc>
 800549c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <pbuf_alloc+0x174>
        return NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	e02b      	b.n	8005500 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80054a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80054aa:	3310      	adds	r3, #16
 80054ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ae:	4413      	add	r3, r2
 80054b0:	3303      	adds	r3, #3
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	4618      	mov	r0, r3
 80054b8:	88b9      	ldrh	r1, [r7, #4]
 80054ba:	88ba      	ldrh	r2, [r7, #4]
 80054bc:	2300      	movs	r3, #0
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	887b      	ldrh	r3, [r7, #2]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	460b      	mov	r3, r1
 80054c6:	4601      	mov	r1, r0
 80054c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054ca:	f7ff ff09 	bl	80052e0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d010      	beq.n	80054fc <pbuf_alloc+0x1c8>
 80054da:	4b0b      	ldr	r3, [pc, #44]	@ (8005508 <pbuf_alloc+0x1d4>)
 80054dc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80054e0:	490d      	ldr	r1, [pc, #52]	@ (8005518 <pbuf_alloc+0x1e4>)
 80054e2:	480b      	ldr	r0, [pc, #44]	@ (8005510 <pbuf_alloc+0x1dc>)
 80054e4:	f008 fc9e 	bl	800de24 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80054e8:	e008      	b.n	80054fc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80054ea:	4b07      	ldr	r3, [pc, #28]	@ (8005508 <pbuf_alloc+0x1d4>)
 80054ec:	f240 1227 	movw	r2, #295	@ 0x127
 80054f0:	490a      	ldr	r1, [pc, #40]	@ (800551c <pbuf_alloc+0x1e8>)
 80054f2:	4807      	ldr	r0, [pc, #28]	@ (8005510 <pbuf_alloc+0x1dc>)
 80054f4:	f008 fc96 	bl	800de24 <iprintf>
      return NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e001      	b.n	8005500 <pbuf_alloc+0x1cc>
      break;
 80054fc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005500:	4618      	mov	r0, r3
 8005502:	3728      	adds	r7, #40	@ 0x28
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	0800f21c 	.word	0x0800f21c
 800550c:	0800f24c 	.word	0x0800f24c
 8005510:	0800f27c 	.word	0x0800f27c
 8005514:	0800f2a4 	.word	0x0800f2a4
 8005518:	0800f2d8 	.word	0x0800f2d8
 800551c:	0800f304 	.word	0x0800f304

08005520 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af02      	add	r7, sp, #8
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	807b      	strh	r3, [r7, #2]
 800552c:	4613      	mov	r3, r2
 800552e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005530:	883b      	ldrh	r3, [r7, #0]
 8005532:	2b41      	cmp	r3, #65	@ 0x41
 8005534:	d009      	beq.n	800554a <pbuf_alloc_reference+0x2a>
 8005536:	883b      	ldrh	r3, [r7, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d006      	beq.n	800554a <pbuf_alloc_reference+0x2a>
 800553c:	4b0f      	ldr	r3, [pc, #60]	@ (800557c <pbuf_alloc_reference+0x5c>)
 800553e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8005542:	490f      	ldr	r1, [pc, #60]	@ (8005580 <pbuf_alloc_reference+0x60>)
 8005544:	480f      	ldr	r0, [pc, #60]	@ (8005584 <pbuf_alloc_reference+0x64>)
 8005546:	f008 fc6d 	bl	800de24 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800554a:	2007      	movs	r0, #7
 800554c:	f7ff fb10 	bl	8004b70 <memp_malloc>
 8005550:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005558:	2300      	movs	r3, #0
 800555a:	e00b      	b.n	8005574 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800555c:	8879      	ldrh	r1, [r7, #2]
 800555e:	887a      	ldrh	r2, [r7, #2]
 8005560:	2300      	movs	r3, #0
 8005562:	9301      	str	r3, [sp, #4]
 8005564:	883b      	ldrh	r3, [r7, #0]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	460b      	mov	r3, r1
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f7ff feb7 	bl	80052e0 <pbuf_init_alloced_pbuf>
  return p;
 8005572:	68fb      	ldr	r3, [r7, #12]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	0800f21c 	.word	0x0800f21c
 8005580:	0800f320 	.word	0x0800f320
 8005584:	0800f27c 	.word	0x0800f27c

08005588 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af02      	add	r7, sp, #8
 800558e:	607b      	str	r3, [r7, #4]
 8005590:	4603      	mov	r3, r0
 8005592:	73fb      	strb	r3, [r7, #15]
 8005594:	460b      	mov	r3, r1
 8005596:	81bb      	strh	r3, [r7, #12]
 8005598:	4613      	mov	r3, r2
 800559a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80055a0:	8a7b      	ldrh	r3, [r7, #18]
 80055a2:	3303      	adds	r3, #3
 80055a4:	f023 0203 	bic.w	r2, r3, #3
 80055a8:	89bb      	ldrh	r3, [r7, #12]
 80055aa:	441a      	add	r2, r3
 80055ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d901      	bls.n	80055b6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	e018      	b.n	80055e8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d007      	beq.n	80055cc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80055bc:	8a7b      	ldrh	r3, [r7, #18]
 80055be:	3303      	adds	r3, #3
 80055c0:	f023 0303 	bic.w	r3, r3, #3
 80055c4:	6a3a      	ldr	r2, [r7, #32]
 80055c6:	4413      	add	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	e001      	b.n	80055d0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	89b9      	ldrh	r1, [r7, #12]
 80055d4:	89ba      	ldrh	r2, [r7, #12]
 80055d6:	2302      	movs	r3, #2
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	897b      	ldrh	r3, [r7, #10]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	460b      	mov	r3, r1
 80055e0:	6979      	ldr	r1, [r7, #20]
 80055e2:	f7ff fe7d 	bl	80052e0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80055e6:	687b      	ldr	r3, [r7, #4]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <pbuf_realloc+0x20>
 8005602:	4b3a      	ldr	r3, [pc, #232]	@ (80056ec <pbuf_realloc+0xfc>)
 8005604:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8005608:	4939      	ldr	r1, [pc, #228]	@ (80056f0 <pbuf_realloc+0x100>)
 800560a:	483a      	ldr	r0, [pc, #232]	@ (80056f4 <pbuf_realloc+0x104>)
 800560c:	f008 fc0a 	bl	800de24 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	891b      	ldrh	r3, [r3, #8]
 8005614:	887a      	ldrh	r2, [r7, #2]
 8005616:	429a      	cmp	r2, r3
 8005618:	d263      	bcs.n	80056e2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	891a      	ldrh	r2, [r3, #8]
 800561e:	887b      	ldrh	r3, [r7, #2]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005624:	887b      	ldrh	r3, [r7, #2]
 8005626:	817b      	strh	r3, [r7, #10]
  q = p;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800562c:	e018      	b.n	8005660 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	895b      	ldrh	r3, [r3, #10]
 8005632:	897a      	ldrh	r2, [r7, #10]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	891a      	ldrh	r2, [r3, #8]
 800563c:	893b      	ldrh	r3, [r7, #8]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <pbuf_realloc+0x70>
 8005652:	4b26      	ldr	r3, [pc, #152]	@ (80056ec <pbuf_realloc+0xfc>)
 8005654:	f240 12af 	movw	r2, #431	@ 0x1af
 8005658:	4927      	ldr	r1, [pc, #156]	@ (80056f8 <pbuf_realloc+0x108>)
 800565a:	4826      	ldr	r0, [pc, #152]	@ (80056f4 <pbuf_realloc+0x104>)
 800565c:	f008 fbe2 	bl	800de24 <iprintf>
  while (rem_len > q->len) {
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	895b      	ldrh	r3, [r3, #10]
 8005664:	897a      	ldrh	r2, [r7, #10]
 8005666:	429a      	cmp	r2, r3
 8005668:	d8e1      	bhi.n	800562e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	7b1b      	ldrb	r3, [r3, #12]
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	2b00      	cmp	r3, #0
 8005674:	d121      	bne.n	80056ba <pbuf_realloc+0xca>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	895b      	ldrh	r3, [r3, #10]
 800567a:	897a      	ldrh	r2, [r7, #10]
 800567c:	429a      	cmp	r2, r3
 800567e:	d01c      	beq.n	80056ba <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	7b5b      	ldrb	r3, [r3, #13]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d116      	bne.n	80056ba <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	b29a      	uxth	r2, r3
 8005696:	897b      	ldrh	r3, [r7, #10]
 8005698:	4413      	add	r3, r2
 800569a:	b29b      	uxth	r3, r3
 800569c:	4619      	mov	r1, r3
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7fe ffda 	bl	8004658 <mem_trim>
 80056a4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <pbuf_realloc+0xca>
 80056ac:	4b0f      	ldr	r3, [pc, #60]	@ (80056ec <pbuf_realloc+0xfc>)
 80056ae:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80056b2:	4912      	ldr	r1, [pc, #72]	@ (80056fc <pbuf_realloc+0x10c>)
 80056b4:	480f      	ldr	r0, [pc, #60]	@ (80056f4 <pbuf_realloc+0x104>)
 80056b6:	f008 fbb5 	bl	800de24 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	897a      	ldrh	r2, [r7, #10]
 80056be:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	895a      	ldrh	r2, [r3, #10]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d004      	beq.n	80056da <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 f911 	bl	80058fc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	e000      	b.n	80056e4 <pbuf_realloc+0xf4>
    return;
 80056e2:	bf00      	nop

}
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	0800f21c 	.word	0x0800f21c
 80056f0:	0800f334 	.word	0x0800f334
 80056f4:	0800f27c 	.word	0x0800f27c
 80056f8:	0800f34c 	.word	0x0800f34c
 80056fc:	0800f364 	.word	0x0800f364

08005700 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	4613      	mov	r3, r2
 800570c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <pbuf_add_header_impl+0x22>
 8005714:	4b2b      	ldr	r3, [pc, #172]	@ (80057c4 <pbuf_add_header_impl+0xc4>)
 8005716:	f240 12df 	movw	r2, #479	@ 0x1df
 800571a:	492b      	ldr	r1, [pc, #172]	@ (80057c8 <pbuf_add_header_impl+0xc8>)
 800571c:	482b      	ldr	r0, [pc, #172]	@ (80057cc <pbuf_add_header_impl+0xcc>)
 800571e:	f008 fb81 	bl	800de24 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <pbuf_add_header_impl+0x30>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572e:	d301      	bcc.n	8005734 <pbuf_add_header_impl+0x34>
    return 1;
 8005730:	2301      	movs	r3, #1
 8005732:	e043      	b.n	80057bc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <pbuf_add_header_impl+0x3e>
    return 0;
 800573a:	2300      	movs	r3, #0
 800573c:	e03e      	b.n	80057bc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	891a      	ldrh	r2, [r3, #8]
 8005746:	8a7b      	ldrh	r3, [r7, #18]
 8005748:	4413      	add	r3, r2
 800574a:	b29b      	uxth	r3, r3
 800574c:	8a7a      	ldrh	r2, [r7, #18]
 800574e:	429a      	cmp	r2, r3
 8005750:	d901      	bls.n	8005756 <pbuf_add_header_impl+0x56>
    return 1;
 8005752:	2301      	movs	r3, #1
 8005754:	e032      	b.n	80057bc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	7b1b      	ldrb	r3, [r3, #12]
 800575a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800575c:	8a3b      	ldrh	r3, [r7, #16]
 800575e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00c      	beq.n	8005780 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	425b      	negs	r3, r3
 800576e:	4413      	add	r3, r2
 8005770:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3310      	adds	r3, #16
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	429a      	cmp	r2, r3
 800577a:	d20d      	bcs.n	8005798 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800577c:	2301      	movs	r3, #1
 800577e:	e01d      	b.n	80057bc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	425b      	negs	r3, r3
 800578e:	4413      	add	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e001      	b.n	8005798 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005794:	2301      	movs	r3, #1
 8005796:	e011      	b.n	80057bc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	895a      	ldrh	r2, [r3, #10]
 80057a2:	8a7b      	ldrh	r3, [r7, #18]
 80057a4:	4413      	add	r3, r2
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	891a      	ldrh	r2, [r3, #8]
 80057b0:	8a7b      	ldrh	r3, [r7, #18]
 80057b2:	4413      	add	r3, r2
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	811a      	strh	r2, [r3, #8]


  return 0;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	0800f21c 	.word	0x0800f21c
 80057c8:	0800f380 	.word	0x0800f380
 80057cc:	0800f27c 	.word	0x0800f27c

080057d0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80057da:	2200      	movs	r2, #0
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff ff8e 	bl	8005700 <pbuf_add_header_impl>
 80057e4:	4603      	mov	r3, r0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d106      	bne.n	800580e <pbuf_remove_header+0x1e>
 8005800:	4b20      	ldr	r3, [pc, #128]	@ (8005884 <pbuf_remove_header+0x94>)
 8005802:	f240 224b 	movw	r2, #587	@ 0x24b
 8005806:	4920      	ldr	r1, [pc, #128]	@ (8005888 <pbuf_remove_header+0x98>)
 8005808:	4820      	ldr	r0, [pc, #128]	@ (800588c <pbuf_remove_header+0x9c>)
 800580a:	f008 fb0b 	bl	800de24 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <pbuf_remove_header+0x2c>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800581a:	d301      	bcc.n	8005820 <pbuf_remove_header+0x30>
    return 1;
 800581c:	2301      	movs	r3, #1
 800581e:	e02c      	b.n	800587a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <pbuf_remove_header+0x3a>
    return 0;
 8005826:	2300      	movs	r3, #0
 8005828:	e027      	b.n	800587a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	895b      	ldrh	r3, [r3, #10]
 8005832:	89fa      	ldrh	r2, [r7, #14]
 8005834:	429a      	cmp	r2, r3
 8005836:	d908      	bls.n	800584a <pbuf_remove_header+0x5a>
 8005838:	4b12      	ldr	r3, [pc, #72]	@ (8005884 <pbuf_remove_header+0x94>)
 800583a:	f240 2255 	movw	r2, #597	@ 0x255
 800583e:	4914      	ldr	r1, [pc, #80]	@ (8005890 <pbuf_remove_header+0xa0>)
 8005840:	4812      	ldr	r0, [pc, #72]	@ (800588c <pbuf_remove_header+0x9c>)
 8005842:	f008 faef 	bl	800de24 <iprintf>
 8005846:	2301      	movs	r3, #1
 8005848:	e017      	b.n	800587a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	441a      	add	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	895a      	ldrh	r2, [r3, #10]
 8005860:	89fb      	ldrh	r3, [r7, #14]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	b29a      	uxth	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	891a      	ldrh	r2, [r3, #8]
 800586e:	89fb      	ldrh	r3, [r7, #14]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	b29a      	uxth	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	0800f21c 	.word	0x0800f21c
 8005888:	0800f380 	.word	0x0800f380
 800588c:	0800f27c 	.word	0x0800f27c
 8005890:	0800f38c 	.word	0x0800f38c

08005894 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	807b      	strh	r3, [r7, #2]
 80058a0:	4613      	mov	r3, r2
 80058a2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80058a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	da08      	bge.n	80058be <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80058ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058b0:	425b      	negs	r3, r3
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff ff9b 	bl	80057f0 <pbuf_remove_header>
 80058ba:	4603      	mov	r3, r0
 80058bc:	e007      	b.n	80058ce <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80058be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058c2:	787a      	ldrb	r2, [r7, #1]
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff ff1a 	bl	8005700 <pbuf_add_header_impl>
 80058cc:	4603      	mov	r3, r0
  }
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b082      	sub	sp, #8
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	460b      	mov	r3, r1
 80058e0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80058e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058e6:	2201      	movs	r2, #1
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff ffd2 	bl	8005894 <pbuf_header_impl>
 80058f0:	4603      	mov	r3, r0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d106      	bne.n	800591e <pbuf_free+0x22>
 8005910:	4b38      	ldr	r3, [pc, #224]	@ (80059f4 <pbuf_free+0xf8>)
 8005912:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8005916:	4938      	ldr	r1, [pc, #224]	@ (80059f8 <pbuf_free+0xfc>)
 8005918:	4838      	ldr	r0, [pc, #224]	@ (80059fc <pbuf_free+0x100>)
 800591a:	f008 fa83 	bl	800de24 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800591e:	2300      	movs	r3, #0
 8005920:	e063      	b.n	80059ea <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005926:	e05c      	b.n	80059e2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	7b9b      	ldrb	r3, [r3, #14]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d106      	bne.n	800593e <pbuf_free+0x42>
 8005930:	4b30      	ldr	r3, [pc, #192]	@ (80059f4 <pbuf_free+0xf8>)
 8005932:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8005936:	4932      	ldr	r1, [pc, #200]	@ (8005a00 <pbuf_free+0x104>)
 8005938:	4830      	ldr	r0, [pc, #192]	@ (80059fc <pbuf_free+0x100>)
 800593a:	f008 fa73 	bl	800de24 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	7b9b      	ldrb	r3, [r3, #14]
 8005942:	3b01      	subs	r3, #1
 8005944:	b2da      	uxtb	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	739a      	strb	r2, [r3, #14]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	7b9b      	ldrb	r3, [r3, #14]
 800594e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005950:	7dbb      	ldrb	r3, [r7, #22]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d143      	bne.n	80059de <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	7b1b      	ldrb	r3, [r3, #12]
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	7b5b      	ldrb	r3, [r3, #13]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d011      	beq.n	8005996 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <pbuf_free+0x90>
 800597e:	4b1d      	ldr	r3, [pc, #116]	@ (80059f4 <pbuf_free+0xf8>)
 8005980:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8005984:	491f      	ldr	r1, [pc, #124]	@ (8005a04 <pbuf_free+0x108>)
 8005986:	481d      	ldr	r0, [pc, #116]	@ (80059fc <pbuf_free+0x100>)
 8005988:	f008 fa4c 	bl	800de24 <iprintf>
        pc->custom_free_function(p);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
 8005994:	e01d      	b.n	80059d2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b02      	cmp	r3, #2
 800599a:	d104      	bne.n	80059a6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	2008      	movs	r0, #8
 80059a0:	f7ff f956 	bl	8004c50 <memp_free>
 80059a4:	e015      	b.n	80059d2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d104      	bne.n	80059b6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	2007      	movs	r0, #7
 80059b0:	f7ff f94e 	bl	8004c50 <memp_free>
 80059b4:	e00d      	b.n	80059d2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d103      	bne.n	80059c4 <pbuf_free+0xc8>
          mem_free(p);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7fe fde1 	bl	8004584 <mem_free>
 80059c2:	e006      	b.n	80059d2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80059c4:	4b0b      	ldr	r3, [pc, #44]	@ (80059f4 <pbuf_free+0xf8>)
 80059c6:	f240 320f 	movw	r2, #783	@ 0x30f
 80059ca:	490f      	ldr	r1, [pc, #60]	@ (8005a08 <pbuf_free+0x10c>)
 80059cc:	480b      	ldr	r0, [pc, #44]	@ (80059fc <pbuf_free+0x100>)
 80059ce:	f008 fa29 	bl	800de24 <iprintf>
        }
      }
      count++;
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	3301      	adds	r3, #1
 80059d6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	e001      	b.n	80059e2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d19f      	bne.n	8005928 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	0800f21c 	.word	0x0800f21c
 80059f8:	0800f380 	.word	0x0800f380
 80059fc:	0800f27c 	.word	0x0800f27c
 8005a00:	0800f3ac 	.word	0x0800f3ac
 8005a04:	0800f3c4 	.word	0x0800f3c4
 8005a08:	0800f3e8 	.word	0x0800f3e8

08005a0c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005a18:	e005      	b.n	8005a26 <pbuf_clen+0x1a>
    ++len;
 8005a1a:	89fb      	ldrh	r3, [r7, #14]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1f6      	bne.n	8005a1a <pbuf_clen+0xe>
  }
  return len;
 8005a2c:	89fb      	ldrh	r3, [r7, #14]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d010      	beq.n	8005a6c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	7b9b      	ldrb	r3, [r3, #14]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	7b9b      	ldrb	r3, [r3, #14]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <pbuf_ref+0x30>
 8005a5e:	4b05      	ldr	r3, [pc, #20]	@ (8005a74 <pbuf_ref+0x38>)
 8005a60:	f240 3242 	movw	r2, #834	@ 0x342
 8005a64:	4904      	ldr	r1, [pc, #16]	@ (8005a78 <pbuf_ref+0x3c>)
 8005a66:	4805      	ldr	r0, [pc, #20]	@ (8005a7c <pbuf_ref+0x40>)
 8005a68:	f008 f9dc 	bl	800de24 <iprintf>
  }
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	0800f21c 	.word	0x0800f21c
 8005a78:	0800f3fc 	.word	0x0800f3fc
 8005a7c:	0800f27c 	.word	0x0800f27c

08005a80 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <pbuf_cat+0x16>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d107      	bne.n	8005aa6 <pbuf_cat+0x26>
 8005a96:	4b20      	ldr	r3, [pc, #128]	@ (8005b18 <pbuf_cat+0x98>)
 8005a98:	f240 3259 	movw	r2, #857	@ 0x359
 8005a9c:	491f      	ldr	r1, [pc, #124]	@ (8005b1c <pbuf_cat+0x9c>)
 8005a9e:	4820      	ldr	r0, [pc, #128]	@ (8005b20 <pbuf_cat+0xa0>)
 8005aa0:	f008 f9c0 	bl	800de24 <iprintf>
 8005aa4:	e034      	b.n	8005b10 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e00a      	b.n	8005ac2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	891a      	ldrh	r2, [r3, #8]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	891b      	ldrh	r3, [r3, #8]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	891a      	ldrh	r2, [r3, #8]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	895b      	ldrh	r3, [r3, #10]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d006      	beq.n	8005ae4 <pbuf_cat+0x64>
 8005ad6:	4b10      	ldr	r3, [pc, #64]	@ (8005b18 <pbuf_cat+0x98>)
 8005ad8:	f240 3262 	movw	r2, #866	@ 0x362
 8005adc:	4911      	ldr	r1, [pc, #68]	@ (8005b24 <pbuf_cat+0xa4>)
 8005ade:	4810      	ldr	r0, [pc, #64]	@ (8005b20 <pbuf_cat+0xa0>)
 8005ae0:	f008 f9a0 	bl	800de24 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d006      	beq.n	8005afa <pbuf_cat+0x7a>
 8005aec:	4b0a      	ldr	r3, [pc, #40]	@ (8005b18 <pbuf_cat+0x98>)
 8005aee:	f240 3263 	movw	r2, #867	@ 0x363
 8005af2:	490d      	ldr	r1, [pc, #52]	@ (8005b28 <pbuf_cat+0xa8>)
 8005af4:	480a      	ldr	r0, [pc, #40]	@ (8005b20 <pbuf_cat+0xa0>)
 8005af6:	f008 f995 	bl	800de24 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	891a      	ldrh	r2, [r3, #8]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	891b      	ldrh	r3, [r3, #8]
 8005b02:	4413      	add	r3, r2
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	0800f21c 	.word	0x0800f21c
 8005b1c:	0800f410 	.word	0x0800f410
 8005b20:	0800f27c 	.word	0x0800f27c
 8005b24:	0800f448 	.word	0x0800f448
 8005b28:	0800f478 	.word	0x0800f478

08005b2c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <pbuf_copy+0x2a>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <pbuf_copy+0x2a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	891a      	ldrh	r2, [r3, #8]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	891b      	ldrh	r3, [r3, #8]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d209      	bcs.n	8005b6a <pbuf_copy+0x3e>
 8005b56:	4b57      	ldr	r3, [pc, #348]	@ (8005cb4 <pbuf_copy+0x188>)
 8005b58:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8005b5c:	4956      	ldr	r1, [pc, #344]	@ (8005cb8 <pbuf_copy+0x18c>)
 8005b5e:	4857      	ldr	r0, [pc, #348]	@ (8005cbc <pbuf_copy+0x190>)
 8005b60:	f008 f960 	bl	800de24 <iprintf>
 8005b64:	f06f 030f 	mvn.w	r3, #15
 8005b68:	e09f      	b.n	8005caa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	895b      	ldrh	r3, [r3, #10]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	1ad2      	subs	r2, r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	895b      	ldrh	r3, [r3, #10]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1acb      	subs	r3, r1, r3
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d306      	bcc.n	8005b90 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	895b      	ldrh	r3, [r3, #10]
 8005b86:	461a      	mov	r2, r3
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e005      	b.n	8005b9c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	895b      	ldrh	r3, [r3, #10]
 8005b94:	461a      	mov	r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	18d0      	adds	r0, r2, r3
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	f008 fa13 	bl	800dfda <memcpy>
    offset_to += len;
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	895b      	ldrh	r3, [r3, #10]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d906      	bls.n	8005bde <pbuf_copy+0xb2>
 8005bd0:	4b38      	ldr	r3, [pc, #224]	@ (8005cb4 <pbuf_copy+0x188>)
 8005bd2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8005bd6:	493a      	ldr	r1, [pc, #232]	@ (8005cc0 <pbuf_copy+0x194>)
 8005bd8:	4838      	ldr	r0, [pc, #224]	@ (8005cbc <pbuf_copy+0x190>)
 8005bda:	f008 f923 	bl	800de24 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	895b      	ldrh	r3, [r3, #10]
 8005be2:	461a      	mov	r2, r3
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d906      	bls.n	8005bf8 <pbuf_copy+0xcc>
 8005bea:	4b32      	ldr	r3, [pc, #200]	@ (8005cb4 <pbuf_copy+0x188>)
 8005bec:	f240 32da 	movw	r2, #986	@ 0x3da
 8005bf0:	4934      	ldr	r1, [pc, #208]	@ (8005cc4 <pbuf_copy+0x198>)
 8005bf2:	4832      	ldr	r0, [pc, #200]	@ (8005cbc <pbuf_copy+0x190>)
 8005bf4:	f008 f916 	bl	800de24 <iprintf>
    if (offset_from >= p_from->len) {
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	895b      	ldrh	r3, [r3, #10]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d304      	bcc.n	8005c0e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	895b      	ldrh	r3, [r3, #10]
 8005c12:	461a      	mov	r2, r3
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d114      	bne.n	8005c44 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10c      	bne.n	8005c44 <pbuf_copy+0x118>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <pbuf_copy+0x118>
 8005c30:	4b20      	ldr	r3, [pc, #128]	@ (8005cb4 <pbuf_copy+0x188>)
 8005c32:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8005c36:	4924      	ldr	r1, [pc, #144]	@ (8005cc8 <pbuf_copy+0x19c>)
 8005c38:	4820      	ldr	r0, [pc, #128]	@ (8005cbc <pbuf_copy+0x190>)
 8005c3a:	f008 f8f3 	bl	800de24 <iprintf>
 8005c3e:	f06f 030f 	mvn.w	r3, #15
 8005c42:	e032      	b.n	8005caa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d013      	beq.n	8005c72 <pbuf_copy+0x146>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	895a      	ldrh	r2, [r3, #10]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	891b      	ldrh	r3, [r3, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d10d      	bne.n	8005c72 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d009      	beq.n	8005c72 <pbuf_copy+0x146>
 8005c5e:	4b15      	ldr	r3, [pc, #84]	@ (8005cb4 <pbuf_copy+0x188>)
 8005c60:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8005c64:	4919      	ldr	r1, [pc, #100]	@ (8005ccc <pbuf_copy+0x1a0>)
 8005c66:	4815      	ldr	r0, [pc, #84]	@ (8005cbc <pbuf_copy+0x190>)
 8005c68:	f008 f8dc 	bl	800de24 <iprintf>
 8005c6c:	f06f 0305 	mvn.w	r3, #5
 8005c70:	e01b      	b.n	8005caa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d013      	beq.n	8005ca0 <pbuf_copy+0x174>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	895a      	ldrh	r2, [r3, #10]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	891b      	ldrh	r3, [r3, #8]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d10d      	bne.n	8005ca0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d009      	beq.n	8005ca0 <pbuf_copy+0x174>
 8005c8c:	4b09      	ldr	r3, [pc, #36]	@ (8005cb4 <pbuf_copy+0x188>)
 8005c8e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8005c92:	490e      	ldr	r1, [pc, #56]	@ (8005ccc <pbuf_copy+0x1a0>)
 8005c94:	4809      	ldr	r0, [pc, #36]	@ (8005cbc <pbuf_copy+0x190>)
 8005c96:	f008 f8c5 	bl	800de24 <iprintf>
 8005c9a:	f06f 0305 	mvn.w	r3, #5
 8005c9e:	e004      	b.n	8005caa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f47f af61 	bne.w	8005b6a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	0800f21c 	.word	0x0800f21c
 8005cb8:	0800f4c4 	.word	0x0800f4c4
 8005cbc:	0800f27c 	.word	0x0800f27c
 8005cc0:	0800f4f4 	.word	0x0800f4f4
 8005cc4:	0800f50c 	.word	0x0800f50c
 8005cc8:	0800f528 	.word	0x0800f528
 8005ccc:	0800f538 	.word	0x0800f538

08005cd0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	460b      	mov	r3, r1
 8005ce0:	80fb      	strh	r3, [r7, #6]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d108      	bne.n	8005d06 <pbuf_copy_partial+0x36>
 8005cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8005da4 <pbuf_copy_partial+0xd4>)
 8005cf6:	f240 420a 	movw	r2, #1034	@ 0x40a
 8005cfa:	492b      	ldr	r1, [pc, #172]	@ (8005da8 <pbuf_copy_partial+0xd8>)
 8005cfc:	482b      	ldr	r0, [pc, #172]	@ (8005dac <pbuf_copy_partial+0xdc>)
 8005cfe:	f008 f891 	bl	800de24 <iprintf>
 8005d02:	2300      	movs	r3, #0
 8005d04:	e04a      	b.n	8005d9c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d108      	bne.n	8005d1e <pbuf_copy_partial+0x4e>
 8005d0c:	4b25      	ldr	r3, [pc, #148]	@ (8005da4 <pbuf_copy_partial+0xd4>)
 8005d0e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8005d12:	4927      	ldr	r1, [pc, #156]	@ (8005db0 <pbuf_copy_partial+0xe0>)
 8005d14:	4825      	ldr	r0, [pc, #148]	@ (8005dac <pbuf_copy_partial+0xdc>)
 8005d16:	f008 f885 	bl	800de24 <iprintf>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e03e      	b.n	8005d9c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	61fb      	str	r3, [r7, #28]
 8005d22:	e034      	b.n	8005d8e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005d24:	88bb      	ldrh	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <pbuf_copy_partial+0x70>
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	895b      	ldrh	r3, [r3, #10]
 8005d2e:	88ba      	ldrh	r2, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d305      	bcc.n	8005d40 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	895b      	ldrh	r3, [r3, #10]
 8005d38:	88ba      	ldrh	r2, [r7, #4]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	80bb      	strh	r3, [r7, #4]
 8005d3e:	e023      	b.n	8005d88 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	895a      	ldrh	r2, [r3, #10]
 8005d44:	88bb      	ldrh	r3, [r7, #4]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005d4a:	8b3a      	ldrh	r2, [r7, #24]
 8005d4c:	88fb      	ldrh	r3, [r7, #6]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d901      	bls.n	8005d56 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005d56:	8b7b      	ldrh	r3, [r7, #26]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	18d0      	adds	r0, r2, r3
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	88bb      	ldrh	r3, [r7, #4]
 8005d62:	4413      	add	r3, r2
 8005d64:	8b3a      	ldrh	r2, [r7, #24]
 8005d66:	4619      	mov	r1, r3
 8005d68:	f008 f937 	bl	800dfda <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005d6c:	8afa      	ldrh	r2, [r7, #22]
 8005d6e:	8b3b      	ldrh	r3, [r7, #24]
 8005d70:	4413      	add	r3, r2
 8005d72:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005d74:	8b7a      	ldrh	r2, [r7, #26]
 8005d76:	8b3b      	ldrh	r3, [r7, #24]
 8005d78:	4413      	add	r3, r2
 8005d7a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005d7c:	88fa      	ldrh	r2, [r7, #6]
 8005d7e:	8b3b      	ldrh	r3, [r7, #24]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <pbuf_copy_partial+0xca>
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1c4      	bne.n	8005d24 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005d9a:	8afb      	ldrh	r3, [r7, #22]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3720      	adds	r7, #32
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	0800f21c 	.word	0x0800f21c
 8005da8:	0800f564 	.word	0x0800f564
 8005dac:	0800f27c 	.word	0x0800f27c
 8005db0:	0800f584 	.word	0x0800f584

08005db4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	603a      	str	r2, [r7, #0]
 8005dbe:	71fb      	strb	r3, [r7, #7]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	8919      	ldrh	r1, [r3, #8]
 8005dc8:	88ba      	ldrh	r2, [r7, #4]
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff fab1 	bl	8005334 <pbuf_alloc>
 8005dd2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <pbuf_clone+0x2a>
    return NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e011      	b.n	8005e02 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7ff fea3 	bl	8005b2c <pbuf_copy>
 8005de6:	4603      	mov	r3, r0
 8005de8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005dea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d006      	beq.n	8005e00 <pbuf_clone+0x4c>
 8005df2:	4b06      	ldr	r3, [pc, #24]	@ (8005e0c <pbuf_clone+0x58>)
 8005df4:	f240 5224 	movw	r2, #1316	@ 0x524
 8005df8:	4905      	ldr	r1, [pc, #20]	@ (8005e10 <pbuf_clone+0x5c>)
 8005dfa:	4806      	ldr	r0, [pc, #24]	@ (8005e14 <pbuf_clone+0x60>)
 8005dfc:	f008 f812 	bl	800de24 <iprintf>
  return q;
 8005e00:	68fb      	ldr	r3, [r7, #12]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	0800f21c 	.word	0x0800f21c
 8005e10:	0800f690 	.word	0x0800f690
 8005e14:	0800f27c 	.word	0x0800f27c

08005e18 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005e1c:	f007 ff02 	bl	800dc24 <rand>
 8005e20:	4603      	mov	r3, r0
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	4b01      	ldr	r3, [pc, #4]	@ (8005e38 <tcp_init+0x20>)
 8005e32:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005e34:	bf00      	nop
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	24000024 	.word	0x24000024

08005e3c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	7d1b      	ldrb	r3, [r3, #20]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d105      	bne.n	8005e58 <tcp_free+0x1c>
 8005e4c:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <tcp_free+0x2c>)
 8005e4e:	22d4      	movs	r2, #212	@ 0xd4
 8005e50:	4906      	ldr	r1, [pc, #24]	@ (8005e6c <tcp_free+0x30>)
 8005e52:	4807      	ldr	r0, [pc, #28]	@ (8005e70 <tcp_free+0x34>)
 8005e54:	f007 ffe6 	bl	800de24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	2001      	movs	r0, #1
 8005e5c:	f7fe fef8 	bl	8004c50 <memp_free>
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	0800f71c 	.word	0x0800f71c
 8005e6c:	0800f74c 	.word	0x0800f74c
 8005e70:	0800f760 	.word	0x0800f760

08005e74 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	7d1b      	ldrb	r3, [r3, #20]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d105      	bne.n	8005e90 <tcp_free_listen+0x1c>
 8005e84:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <tcp_free_listen+0x2c>)
 8005e86:	22df      	movs	r2, #223	@ 0xdf
 8005e88:	4906      	ldr	r1, [pc, #24]	@ (8005ea4 <tcp_free_listen+0x30>)
 8005e8a:	4807      	ldr	r0, [pc, #28]	@ (8005ea8 <tcp_free_listen+0x34>)
 8005e8c:	f007 ffca 	bl	800de24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	2002      	movs	r0, #2
 8005e94:	f7fe fedc 	bl	8004c50 <memp_free>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	0800f71c 	.word	0x0800f71c
 8005ea4:	0800f788 	.word	0x0800f788
 8005ea8:	0800f760 	.word	0x0800f760

08005eac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005eb0:	f000 fea4 	bl	8006bfc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005eb4:	4b07      	ldr	r3, [pc, #28]	@ (8005ed4 <tcp_tmr+0x28>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	4b05      	ldr	r3, [pc, #20]	@ (8005ed4 <tcp_tmr+0x28>)
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	4b04      	ldr	r3, [pc, #16]	@ (8005ed4 <tcp_tmr+0x28>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005ecc:	f000 fb54 	bl	8006578 <tcp_slowtmr>
  }
}
 8005ed0:	bf00      	nop
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	24007b81 	.word	0x24007b81

08005ed8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d105      	bne.n	8005ef4 <tcp_remove_listener+0x1c>
 8005ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <tcp_remove_listener+0x48>)
 8005eea:	22ff      	movs	r2, #255	@ 0xff
 8005eec:	490d      	ldr	r1, [pc, #52]	@ (8005f24 <tcp_remove_listener+0x4c>)
 8005eee:	480e      	ldr	r0, [pc, #56]	@ (8005f28 <tcp_remove_listener+0x50>)
 8005ef0:	f007 ff98 	bl	800de24 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	e00a      	b.n	8005f10 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d102      	bne.n	8005f0a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f1      	bne.n	8005efa <tcp_remove_listener+0x22>
    }
  }
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	0800f71c 	.word	0x0800f71c
 8005f24:	0800f7a4 	.word	0x0800f7a4
 8005f28:	0800f760 	.word	0x0800f760

08005f2c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <tcp_listen_closed+0x1c>
 8005f3a:	4b14      	ldr	r3, [pc, #80]	@ (8005f8c <tcp_listen_closed+0x60>)
 8005f3c:	f240 1211 	movw	r2, #273	@ 0x111
 8005f40:	4913      	ldr	r1, [pc, #76]	@ (8005f90 <tcp_listen_closed+0x64>)
 8005f42:	4814      	ldr	r0, [pc, #80]	@ (8005f94 <tcp_listen_closed+0x68>)
 8005f44:	f007 ff6e 	bl	800de24 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7d1b      	ldrb	r3, [r3, #20]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d006      	beq.n	8005f5e <tcp_listen_closed+0x32>
 8005f50:	4b0e      	ldr	r3, [pc, #56]	@ (8005f8c <tcp_listen_closed+0x60>)
 8005f52:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8005f56:	4910      	ldr	r1, [pc, #64]	@ (8005f98 <tcp_listen_closed+0x6c>)
 8005f58:	480e      	ldr	r0, [pc, #56]	@ (8005f94 <tcp_listen_closed+0x68>)
 8005f5a:	f007 ff63 	bl	800de24 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005f5e:	2301      	movs	r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	e00b      	b.n	8005f7c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005f64:	4a0d      	ldr	r2, [pc, #52]	@ (8005f9c <tcp_listen_closed+0x70>)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff ffb1 	bl	8005ed8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d9f0      	bls.n	8005f64 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	0800f71c 	.word	0x0800f71c
 8005f90:	0800f7cc 	.word	0x0800f7cc
 8005f94:	0800f760 	.word	0x0800f760
 8005f98:	0800f7d8 	.word	0x0800f7d8
 8005f9c:	080116f4 	.word	0x080116f4

08005fa0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005fa0:	b5b0      	push	{r4, r5, r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af04      	add	r7, sp, #16
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <tcp_close_shutdown+0x20>
 8005fb2:	4b63      	ldr	r3, [pc, #396]	@ (8006140 <tcp_close_shutdown+0x1a0>)
 8005fb4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8005fb8:	4962      	ldr	r1, [pc, #392]	@ (8006144 <tcp_close_shutdown+0x1a4>)
 8005fba:	4863      	ldr	r0, [pc, #396]	@ (8006148 <tcp_close_shutdown+0x1a8>)
 8005fbc:	f007 ff32 	bl	800de24 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d066      	beq.n	8006094 <tcp_close_shutdown+0xf4>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	7d1b      	ldrb	r3, [r3, #20]
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d003      	beq.n	8005fd6 <tcp_close_shutdown+0x36>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	7d1b      	ldrb	r3, [r3, #20]
 8005fd2:	2b07      	cmp	r3, #7
 8005fd4:	d15e      	bne.n	8006094 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d104      	bne.n	8005fe8 <tcp_close_shutdown+0x48>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005fe6:	d055      	beq.n	8006094 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8b5b      	ldrh	r3, [r3, #26]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <tcp_close_shutdown+0x62>
 8005ff4:	4b52      	ldr	r3, [pc, #328]	@ (8006140 <tcp_close_shutdown+0x1a0>)
 8005ff6:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8005ffa:	4954      	ldr	r1, [pc, #336]	@ (800614c <tcp_close_shutdown+0x1ac>)
 8005ffc:	4852      	ldr	r0, [pc, #328]	@ (8006148 <tcp_close_shutdown+0x1a8>)
 8005ffe:	f007 ff11 	bl	800de24 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800600a:	687d      	ldr	r5, [r7, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3304      	adds	r3, #4
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	8ad2      	ldrh	r2, [r2, #22]
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	8b09      	ldrh	r1, [r1, #24]
 8006018:	9102      	str	r1, [sp, #8]
 800601a:	9201      	str	r2, [sp, #4]
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	462b      	mov	r3, r5
 8006020:	4622      	mov	r2, r4
 8006022:	4601      	mov	r1, r0
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f004 fe8d 	bl	800ad44 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f001 f8c8 	bl	80071c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006030:	4b47      	ldr	r3, [pc, #284]	@ (8006150 <tcp_close_shutdown+0x1b0>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	429a      	cmp	r2, r3
 8006038:	d105      	bne.n	8006046 <tcp_close_shutdown+0xa6>
 800603a:	4b45      	ldr	r3, [pc, #276]	@ (8006150 <tcp_close_shutdown+0x1b0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	4a43      	ldr	r2, [pc, #268]	@ (8006150 <tcp_close_shutdown+0x1b0>)
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	e013      	b.n	800606e <tcp_close_shutdown+0xce>
 8006046:	4b42      	ldr	r3, [pc, #264]	@ (8006150 <tcp_close_shutdown+0x1b0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	e00c      	b.n	8006068 <tcp_close_shutdown+0xc8>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	429a      	cmp	r2, r3
 8006056:	d104      	bne.n	8006062 <tcp_close_shutdown+0xc2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	60da      	str	r2, [r3, #12]
 8006060:	e005      	b.n	800606e <tcp_close_shutdown+0xce>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1ef      	bne.n	800604e <tcp_close_shutdown+0xae>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	60da      	str	r2, [r3, #12]
 8006074:	4b37      	ldr	r3, [pc, #220]	@ (8006154 <tcp_close_shutdown+0x1b4>)
 8006076:	2201      	movs	r2, #1
 8006078:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800607a:	4b37      	ldr	r3, [pc, #220]	@ (8006158 <tcp_close_shutdown+0x1b8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d102      	bne.n	800608a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006084:	f003 fd5c 	bl	8009b40 <tcp_trigger_input_pcb_close>
 8006088:	e002      	b.n	8006090 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff fed6 	bl	8005e3c <tcp_free>
      }
      return ERR_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	e050      	b.n	8006136 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	7d1b      	ldrb	r3, [r3, #20]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d03b      	beq.n	8006114 <tcp_close_shutdown+0x174>
 800609c:	2b02      	cmp	r3, #2
 800609e:	dc44      	bgt.n	800612a <tcp_close_shutdown+0x18a>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <tcp_close_shutdown+0x10a>
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d02a      	beq.n	80060fe <tcp_close_shutdown+0x15e>
 80060a8:	e03f      	b.n	800612a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	8adb      	ldrh	r3, [r3, #22]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d021      	beq.n	80060f6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80060b2:	4b2a      	ldr	r3, [pc, #168]	@ (800615c <tcp_close_shutdown+0x1bc>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d105      	bne.n	80060c8 <tcp_close_shutdown+0x128>
 80060bc:	4b27      	ldr	r3, [pc, #156]	@ (800615c <tcp_close_shutdown+0x1bc>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	4a26      	ldr	r2, [pc, #152]	@ (800615c <tcp_close_shutdown+0x1bc>)
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	e013      	b.n	80060f0 <tcp_close_shutdown+0x150>
 80060c8:	4b24      	ldr	r3, [pc, #144]	@ (800615c <tcp_close_shutdown+0x1bc>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	e00c      	b.n	80060ea <tcp_close_shutdown+0x14a>
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d104      	bne.n	80060e4 <tcp_close_shutdown+0x144>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	60da      	str	r2, [r3, #12]
 80060e2:	e005      	b.n	80060f0 <tcp_close_shutdown+0x150>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	60bb      	str	r3, [r7, #8]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1ef      	bne.n	80060d0 <tcp_close_shutdown+0x130>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff fea0 	bl	8005e3c <tcp_free>
      break;
 80060fc:	e01a      	b.n	8006134 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff ff14 	bl	8005f2c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	4816      	ldr	r0, [pc, #88]	@ (8006160 <tcp_close_shutdown+0x1c0>)
 8006108:	f001 f8aa 	bl	8007260 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff feb1 	bl	8005e74 <tcp_free_listen>
      break;
 8006112:	e00f      	b.n	8006134 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	480e      	ldr	r0, [pc, #56]	@ (8006150 <tcp_close_shutdown+0x1b0>)
 8006118:	f001 f8a2 	bl	8007260 <tcp_pcb_remove>
 800611c:	4b0d      	ldr	r3, [pc, #52]	@ (8006154 <tcp_close_shutdown+0x1b4>)
 800611e:	2201      	movs	r2, #1
 8006120:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fe8a 	bl	8005e3c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006128:	e004      	b.n	8006134 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f81a 	bl	8006164 <tcp_close_shutdown_fin>
 8006130:	4603      	mov	r3, r0
 8006132:	e000      	b.n	8006136 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bdb0      	pop	{r4, r5, r7, pc}
 800613e:	bf00      	nop
 8006140:	0800f71c 	.word	0x0800f71c
 8006144:	0800f7f0 	.word	0x0800f7f0
 8006148:	0800f760 	.word	0x0800f760
 800614c:	0800f810 	.word	0x0800f810
 8006150:	24007b78 	.word	0x24007b78
 8006154:	24007b80 	.word	0x24007b80
 8006158:	24007bb8 	.word	0x24007bb8
 800615c:	24007b70 	.word	0x24007b70
 8006160:	24007b74 	.word	0x24007b74

08006164 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <tcp_close_shutdown_fin+0x1c>
 8006172:	4b2e      	ldr	r3, [pc, #184]	@ (800622c <tcp_close_shutdown_fin+0xc8>)
 8006174:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8006178:	492d      	ldr	r1, [pc, #180]	@ (8006230 <tcp_close_shutdown_fin+0xcc>)
 800617a:	482e      	ldr	r0, [pc, #184]	@ (8006234 <tcp_close_shutdown_fin+0xd0>)
 800617c:	f007 fe52 	bl	800de24 <iprintf>

  switch (pcb->state) {
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	7d1b      	ldrb	r3, [r3, #20]
 8006184:	2b07      	cmp	r3, #7
 8006186:	d020      	beq.n	80061ca <tcp_close_shutdown_fin+0x66>
 8006188:	2b07      	cmp	r3, #7
 800618a:	dc2b      	bgt.n	80061e4 <tcp_close_shutdown_fin+0x80>
 800618c:	2b03      	cmp	r3, #3
 800618e:	d002      	beq.n	8006196 <tcp_close_shutdown_fin+0x32>
 8006190:	2b04      	cmp	r3, #4
 8006192:	d00d      	beq.n	80061b0 <tcp_close_shutdown_fin+0x4c>
 8006194:	e026      	b.n	80061e4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f003 fee2 	bl	8009f60 <tcp_send_fin>
 800619c:	4603      	mov	r3, r0
 800619e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80061a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d11f      	bne.n	80061e8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2205      	movs	r2, #5
 80061ac:	751a      	strb	r2, [r3, #20]
      }
      break;
 80061ae:	e01b      	b.n	80061e8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f003 fed5 	bl	8009f60 <tcp_send_fin>
 80061b6:	4603      	mov	r3, r0
 80061b8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80061ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d114      	bne.n	80061ec <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2205      	movs	r2, #5
 80061c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80061c8:	e010      	b.n	80061ec <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f003 fec8 	bl	8009f60 <tcp_send_fin>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80061d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2209      	movs	r2, #9
 80061e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80061e2:	e005      	b.n	80061f0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	e01c      	b.n	8006222 <tcp_close_shutdown_fin+0xbe>
      break;
 80061e8:	bf00      	nop
 80061ea:	e002      	b.n	80061f2 <tcp_close_shutdown_fin+0x8e>
      break;
 80061ec:	bf00      	nop
 80061ee:	e000      	b.n	80061f2 <tcp_close_shutdown_fin+0x8e>
      break;
 80061f0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80061f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f003 ffee 	bl	800a1dc <tcp_output>
 8006200:	e00d      	b.n	800621e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620a:	d108      	bne.n	800621e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8b5b      	ldrh	r3, [r3, #26]
 8006210:	f043 0308 	orr.w	r3, r3, #8
 8006214:	b29a      	uxth	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e001      	b.n	8006222 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800621e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	0800f71c 	.word	0x0800f71c
 8006230:	0800f7cc 	.word	0x0800f7cc
 8006234:	0800f760 	.word	0x0800f760

08006238 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d109      	bne.n	800625a <tcp_close+0x22>
 8006246:	4b0f      	ldr	r3, [pc, #60]	@ (8006284 <tcp_close+0x4c>)
 8006248:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800624c:	490e      	ldr	r1, [pc, #56]	@ (8006288 <tcp_close+0x50>)
 800624e:	480f      	ldr	r0, [pc, #60]	@ (800628c <tcp_close+0x54>)
 8006250:	f007 fde8 	bl	800de24 <iprintf>
 8006254:	f06f 030f 	mvn.w	r3, #15
 8006258:	e00f      	b.n	800627a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	7d1b      	ldrb	r3, [r3, #20]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d006      	beq.n	8006270 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8b5b      	ldrh	r3, [r3, #26]
 8006266:	f043 0310 	orr.w	r3, r3, #16
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006270:	2101      	movs	r1, #1
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff fe94 	bl	8005fa0 <tcp_close_shutdown>
 8006278:	4603      	mov	r3, r0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	0800f71c 	.word	0x0800f71c
 8006288:	0800f82c 	.word	0x0800f82c
 800628c:	0800f760 	.word	0x0800f760

08006290 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08e      	sub	sp, #56	@ 0x38
 8006294:	af04      	add	r7, sp, #16
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d107      	bne.n	80062b0 <tcp_abandon+0x20>
 80062a0:	4b52      	ldr	r3, [pc, #328]	@ (80063ec <tcp_abandon+0x15c>)
 80062a2:	f240 223d 	movw	r2, #573	@ 0x23d
 80062a6:	4952      	ldr	r1, [pc, #328]	@ (80063f0 <tcp_abandon+0x160>)
 80062a8:	4852      	ldr	r0, [pc, #328]	@ (80063f4 <tcp_abandon+0x164>)
 80062aa:	f007 fdbb 	bl	800de24 <iprintf>
 80062ae:	e099      	b.n	80063e4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	7d1b      	ldrb	r3, [r3, #20]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d106      	bne.n	80062c6 <tcp_abandon+0x36>
 80062b8:	4b4c      	ldr	r3, [pc, #304]	@ (80063ec <tcp_abandon+0x15c>)
 80062ba:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80062be:	494e      	ldr	r1, [pc, #312]	@ (80063f8 <tcp_abandon+0x168>)
 80062c0:	484c      	ldr	r0, [pc, #304]	@ (80063f4 <tcp_abandon+0x164>)
 80062c2:	f007 fdaf 	bl	800de24 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	7d1b      	ldrb	r3, [r3, #20]
 80062ca:	2b0a      	cmp	r3, #10
 80062cc:	d107      	bne.n	80062de <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	484a      	ldr	r0, [pc, #296]	@ (80063fc <tcp_abandon+0x16c>)
 80062d2:	f000 ffc5 	bl	8007260 <tcp_pcb_remove>
    tcp_free(pcb);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fdb0 	bl	8005e3c <tcp_free>
 80062dc:	e082      	b.n	80063e4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	7d1b      	ldrb	r3, [r3, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d126      	bne.n	8006356 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	8adb      	ldrh	r3, [r3, #22]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d02e      	beq.n	800636e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006310:	4b3b      	ldr	r3, [pc, #236]	@ (8006400 <tcp_abandon+0x170>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	429a      	cmp	r2, r3
 8006318:	d105      	bne.n	8006326 <tcp_abandon+0x96>
 800631a:	4b39      	ldr	r3, [pc, #228]	@ (8006400 <tcp_abandon+0x170>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	4a37      	ldr	r2, [pc, #220]	@ (8006400 <tcp_abandon+0x170>)
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e013      	b.n	800634e <tcp_abandon+0xbe>
 8006326:	4b36      	ldr	r3, [pc, #216]	@ (8006400 <tcp_abandon+0x170>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	61fb      	str	r3, [r7, #28]
 800632c:	e00c      	b.n	8006348 <tcp_abandon+0xb8>
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	429a      	cmp	r2, r3
 8006336:	d104      	bne.n	8006342 <tcp_abandon+0xb2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	60da      	str	r2, [r3, #12]
 8006340:	e005      	b.n	800634e <tcp_abandon+0xbe>
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1ef      	bne.n	800632e <tcp_abandon+0x9e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	60da      	str	r2, [r3, #12]
 8006354:	e00b      	b.n	800636e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	8adb      	ldrh	r3, [r3, #22]
 800635e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4828      	ldr	r0, [pc, #160]	@ (8006404 <tcp_abandon+0x174>)
 8006364:	f000 ff7c 	bl	8007260 <tcp_pcb_remove>
 8006368:	4b27      	ldr	r3, [pc, #156]	@ (8006408 <tcp_abandon+0x178>)
 800636a:	2201      	movs	r2, #1
 800636c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006372:	2b00      	cmp	r3, #0
 8006374:	d004      	beq.n	8006380 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fd1e 	bl	8006dbc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800638c:	4618      	mov	r0, r3
 800638e:	f000 fd15 	bl	8006dbc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fd0c 	bl	8006dbc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00e      	beq.n	80063c8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3304      	adds	r3, #4
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	8b12      	ldrh	r2, [r2, #24]
 80063b4:	9202      	str	r2, [sp, #8]
 80063b6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80063b8:	9201      	str	r2, [sp, #4]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	460b      	mov	r3, r1
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	69b9      	ldr	r1, [r7, #24]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f004 fcbe 	bl	800ad44 <tcp_rst>
    }
    last_state = pcb->state;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	7d1b      	ldrb	r3, [r3, #20]
 80063cc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff fd34 	bl	8005e3c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d004      	beq.n	80063e4 <tcp_abandon+0x154>
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f06f 010c 	mvn.w	r1, #12
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	4798      	blx	r3
  }
}
 80063e4:	3728      	adds	r7, #40	@ 0x28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	0800f71c 	.word	0x0800f71c
 80063f0:	0800f860 	.word	0x0800f860
 80063f4:	0800f760 	.word	0x0800f760
 80063f8:	0800f87c 	.word	0x0800f87c
 80063fc:	24007b7c 	.word	0x24007b7c
 8006400:	24007b70 	.word	0x24007b70
 8006404:	24007b78 	.word	0x24007b78
 8006408:	24007b80 	.word	0x24007b80

0800640c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006414:	2101      	movs	r1, #1
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff ff3a 	bl	8006290 <tcp_abandon>
}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d106      	bne.n	8006440 <tcp_update_rcv_ann_wnd+0x1c>
 8006432:	4b25      	ldr	r3, [pc, #148]	@ (80064c8 <tcp_update_rcv_ann_wnd+0xa4>)
 8006434:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8006438:	4924      	ldr	r1, [pc, #144]	@ (80064cc <tcp_update_rcv_ann_wnd+0xa8>)
 800643a:	4825      	ldr	r0, [pc, #148]	@ (80064d0 <tcp_update_rcv_ann_wnd+0xac>)
 800643c:	f007 fcf2 	bl	800de24 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006448:	4413      	add	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8006454:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8006458:	bf28      	it	cs
 800645a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800645e:	b292      	uxth	r2, r2
 8006460:	4413      	add	r3, r2
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	db08      	blt.n	800647c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	e020      	b.n	80064be <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	dd03      	ble.n	8006492 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006490:	e014      	b.n	80064bc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a4:	d306      	bcc.n	80064b4 <tcp_update_rcv_ann_wnd+0x90>
 80064a6:	4b08      	ldr	r3, [pc, #32]	@ (80064c8 <tcp_update_rcv_ann_wnd+0xa4>)
 80064a8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80064ac:	4909      	ldr	r1, [pc, #36]	@ (80064d4 <tcp_update_rcv_ann_wnd+0xb0>)
 80064ae:	4808      	ldr	r0, [pc, #32]	@ (80064d0 <tcp_update_rcv_ann_wnd+0xac>)
 80064b0:	f007 fcb8 	bl	800de24 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80064bc:	2300      	movs	r3, #0
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	0800f71c 	.word	0x0800f71c
 80064cc:	0800f978 	.word	0x0800f978
 80064d0:	0800f760 	.word	0x0800f760
 80064d4:	0800f99c 	.word	0x0800f99c

080064d8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d107      	bne.n	80064fa <tcp_recved+0x22>
 80064ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006568 <tcp_recved+0x90>)
 80064ec:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80064f0:	491e      	ldr	r1, [pc, #120]	@ (800656c <tcp_recved+0x94>)
 80064f2:	481f      	ldr	r0, [pc, #124]	@ (8006570 <tcp_recved+0x98>)
 80064f4:	f007 fc96 	bl	800de24 <iprintf>
 80064f8:	e032      	b.n	8006560 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	7d1b      	ldrb	r3, [r3, #20]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d106      	bne.n	8006510 <tcp_recved+0x38>
 8006502:	4b19      	ldr	r3, [pc, #100]	@ (8006568 <tcp_recved+0x90>)
 8006504:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8006508:	491a      	ldr	r1, [pc, #104]	@ (8006574 <tcp_recved+0x9c>)
 800650a:	4819      	ldr	r0, [pc, #100]	@ (8006570 <tcp_recved+0x98>)
 800650c:	f007 fc8a 	bl	800de24 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006514:	887b      	ldrh	r3, [r7, #2]
 8006516:	4413      	add	r3, r2
 8006518:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800651a:	89fb      	ldrh	r3, [r7, #14]
 800651c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006520:	d804      	bhi.n	800652c <tcp_recved+0x54>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006526:	89fa      	ldrh	r2, [r7, #14]
 8006528:	429a      	cmp	r2, r3
 800652a:	d204      	bcs.n	8006536 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006532:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006534:	e002      	b.n	800653c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	89fa      	ldrh	r2, [r7, #14]
 800653a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff ff71 	bl	8006424 <tcp_update_rcv_ann_wnd>
 8006542:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800654a:	d309      	bcc.n	8006560 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	8b5b      	ldrh	r3, [r3, #26]
 8006550:	f043 0302 	orr.w	r3, r3, #2
 8006554:	b29a      	uxth	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f003 fe3e 	bl	800a1dc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	0800f71c 	.word	0x0800f71c
 800656c:	0800f9b8 	.word	0x0800f9b8
 8006570:	0800f760 	.word	0x0800f760
 8006574:	0800f9d0 	.word	0x0800f9d0

08006578 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006578:	b5b0      	push	{r4, r5, r7, lr}
 800657a:	b090      	sub	sp, #64	@ 0x40
 800657c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8006584:	4b95      	ldr	r3, [pc, #596]	@ (80067dc <tcp_slowtmr+0x264>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	4a94      	ldr	r2, [pc, #592]	@ (80067dc <tcp_slowtmr+0x264>)
 800658c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800658e:	4b94      	ldr	r3, [pc, #592]	@ (80067e0 <tcp_slowtmr+0x268>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	b2da      	uxtb	r2, r3
 8006596:	4b92      	ldr	r3, [pc, #584]	@ (80067e0 <tcp_slowtmr+0x268>)
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e000      	b.n	800659e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800659c:	bf00      	nop
  prev = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80065a2:	4b90      	ldr	r3, [pc, #576]	@ (80067e4 <tcp_slowtmr+0x26c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80065a8:	e29d      	b.n	8006ae6 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80065aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ac:	7d1b      	ldrb	r3, [r3, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <tcp_slowtmr+0x48>
 80065b2:	4b8d      	ldr	r3, [pc, #564]	@ (80067e8 <tcp_slowtmr+0x270>)
 80065b4:	f240 42be 	movw	r2, #1214	@ 0x4be
 80065b8:	498c      	ldr	r1, [pc, #560]	@ (80067ec <tcp_slowtmr+0x274>)
 80065ba:	488d      	ldr	r0, [pc, #564]	@ (80067f0 <tcp_slowtmr+0x278>)
 80065bc:	f007 fc32 	bl	800de24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80065c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c2:	7d1b      	ldrb	r3, [r3, #20]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d106      	bne.n	80065d6 <tcp_slowtmr+0x5e>
 80065c8:	4b87      	ldr	r3, [pc, #540]	@ (80067e8 <tcp_slowtmr+0x270>)
 80065ca:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80065ce:	4989      	ldr	r1, [pc, #548]	@ (80067f4 <tcp_slowtmr+0x27c>)
 80065d0:	4887      	ldr	r0, [pc, #540]	@ (80067f0 <tcp_slowtmr+0x278>)
 80065d2:	f007 fc27 	bl	800de24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80065d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d8:	7d1b      	ldrb	r3, [r3, #20]
 80065da:	2b0a      	cmp	r3, #10
 80065dc:	d106      	bne.n	80065ec <tcp_slowtmr+0x74>
 80065de:	4b82      	ldr	r3, [pc, #520]	@ (80067e8 <tcp_slowtmr+0x270>)
 80065e0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80065e4:	4984      	ldr	r1, [pc, #528]	@ (80067f8 <tcp_slowtmr+0x280>)
 80065e6:	4882      	ldr	r0, [pc, #520]	@ (80067f0 <tcp_slowtmr+0x278>)
 80065e8:	f007 fc1c 	bl	800de24 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80065ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ee:	7f9a      	ldrb	r2, [r3, #30]
 80065f0:	4b7b      	ldr	r3, [pc, #492]	@ (80067e0 <tcp_slowtmr+0x268>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d105      	bne.n	8006604 <tcp_slowtmr+0x8c>
      prev = pcb;
 80065f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80065fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8006602:	e270      	b.n	8006ae6 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8006604:	4b76      	ldr	r3, [pc, #472]	@ (80067e0 <tcp_slowtmr+0x268>)
 8006606:	781a      	ldrb	r2, [r3, #0]
 8006608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661a:	7d1b      	ldrb	r3, [r3, #20]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d10a      	bne.n	8006636 <tcp_slowtmr+0xbe>
 8006620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006622:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006626:	2b05      	cmp	r3, #5
 8006628:	d905      	bls.n	8006636 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800662a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800662e:	3301      	adds	r3, #1
 8006630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006634:	e11e      	b.n	8006874 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800663c:	2b0b      	cmp	r3, #11
 800663e:	d905      	bls.n	800664c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8006640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006644:	3301      	adds	r3, #1
 8006646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800664a:	e113      	b.n	8006874 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800664c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006652:	2b00      	cmp	r3, #0
 8006654:	d075      	beq.n	8006742 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665a:	2b00      	cmp	r3, #0
 800665c:	d006      	beq.n	800666c <tcp_slowtmr+0xf4>
 800665e:	4b62      	ldr	r3, [pc, #392]	@ (80067e8 <tcp_slowtmr+0x270>)
 8006660:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8006664:	4965      	ldr	r1, [pc, #404]	@ (80067fc <tcp_slowtmr+0x284>)
 8006666:	4862      	ldr	r0, [pc, #392]	@ (80067f0 <tcp_slowtmr+0x278>)
 8006668:	f007 fbdc 	bl	800de24 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800666c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d106      	bne.n	8006682 <tcp_slowtmr+0x10a>
 8006674:	4b5c      	ldr	r3, [pc, #368]	@ (80067e8 <tcp_slowtmr+0x270>)
 8006676:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800667a:	4961      	ldr	r1, [pc, #388]	@ (8006800 <tcp_slowtmr+0x288>)
 800667c:	485c      	ldr	r0, [pc, #368]	@ (80067f0 <tcp_slowtmr+0x278>)
 800667e:	f007 fbd1 	bl	800de24 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006684:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8006688:	2b0b      	cmp	r3, #11
 800668a:	d905      	bls.n	8006698 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800668c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006690:	3301      	adds	r3, #1
 8006692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006696:	e0ed      	b.n	8006874 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800669e:	3b01      	subs	r3, #1
 80066a0:	4a58      	ldr	r2, [pc, #352]	@ (8006804 <tcp_slowtmr+0x28c>)
 80066a2:	5cd3      	ldrb	r3, [r2, r3]
 80066a4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80066a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80066ac:	7c7a      	ldrb	r2, [r7, #17]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d907      	bls.n	80066c2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80066b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80066b8:	3301      	adds	r3, #1
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066be:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80066c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80066c8:	7c7a      	ldrb	r2, [r7, #17]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	f200 80d2 	bhi.w	8006874 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80066d0:	2301      	movs	r3, #1
 80066d2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80066d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d108      	bne.n	80066f0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80066de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066e0:	f004 fc24 	bl	800af2c <tcp_zero_window_probe>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d014      	beq.n	8006714 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80066ea:	2300      	movs	r3, #0
 80066ec:	623b      	str	r3, [r7, #32]
 80066ee:	e011      	b.n	8006714 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80066f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80066f6:	4619      	mov	r1, r3
 80066f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066fa:	f003 fae9 	bl	8009cd0 <tcp_split_unsent_seg>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d107      	bne.n	8006714 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8006704:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006706:	f003 fd69 	bl	800a1dc <tcp_output>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8006710:	2300      	movs	r3, #0
 8006712:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 80ac 	beq.w	8006874 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006726:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800672a:	2b06      	cmp	r3, #6
 800672c:	f200 80a2 	bhi.w	8006874 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8006730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006732:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006736:	3301      	adds	r3, #1
 8006738:	b2da      	uxtb	r2, r3
 800673a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8006740:	e098      	b.n	8006874 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006744:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006748:	2b00      	cmp	r3, #0
 800674a:	db0f      	blt.n	800676c <tcp_slowtmr+0x1f4>
 800674c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006752:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006756:	4293      	cmp	r3, r2
 8006758:	d008      	beq.n	800676c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800675a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006760:	b29b      	uxth	r3, r3
 8006762:	3301      	adds	r3, #1
 8006764:	b29b      	uxth	r3, r3
 8006766:	b21a      	sxth	r2, r3
 8006768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800676c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8006772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006774:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006778:	429a      	cmp	r2, r3
 800677a:	db7b      	blt.n	8006874 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800677c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800677e:	f004 f821 	bl	800a7c4 <tcp_rexmit_rto_prepare>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <tcp_slowtmr+0x220>
 8006788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800678c:	2b00      	cmp	r3, #0
 800678e:	d171      	bne.n	8006874 <tcp_slowtmr+0x2fc>
 8006790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d06d      	beq.n	8006874 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8006798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679a:	7d1b      	ldrb	r3, [r3, #20]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d03a      	beq.n	8006816 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80067a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067a6:	2b0c      	cmp	r3, #12
 80067a8:	bf28      	it	cs
 80067aa:	230c      	movcs	r3, #12
 80067ac:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80067ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80067b4:	10db      	asrs	r3, r3, #3
 80067b6:	b21b      	sxth	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80067c0:	4413      	add	r3, r2
 80067c2:	7efa      	ldrb	r2, [r7, #27]
 80067c4:	4910      	ldr	r1, [pc, #64]	@ (8006808 <tcp_slowtmr+0x290>)
 80067c6:	5c8a      	ldrb	r2, [r1, r2]
 80067c8:	4093      	lsls	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80067d2:	4293      	cmp	r3, r2
 80067d4:	dc1a      	bgt.n	800680c <tcp_slowtmr+0x294>
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	b21a      	sxth	r2, r3
 80067da:	e019      	b.n	8006810 <tcp_slowtmr+0x298>
 80067dc:	24007b6c 	.word	0x24007b6c
 80067e0:	24007b82 	.word	0x24007b82
 80067e4:	24007b78 	.word	0x24007b78
 80067e8:	0800f71c 	.word	0x0800f71c
 80067ec:	0800fa60 	.word	0x0800fa60
 80067f0:	0800f760 	.word	0x0800f760
 80067f4:	0800fa8c 	.word	0x0800fa8c
 80067f8:	0800fab8 	.word	0x0800fab8
 80067fc:	0800fae8 	.word	0x0800fae8
 8006800:	0800fb1c 	.word	0x0800fb1c
 8006804:	080116ec 	.word	0x080116ec
 8006808:	080116dc 	.word	0x080116dc
 800680c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006812:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8006816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006818:	2200      	movs	r2, #0
 800681a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800681c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8006822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006824:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8006828:	4293      	cmp	r3, r2
 800682a:	bf28      	it	cs
 800682c:	4613      	movcs	r3, r2
 800682e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006830:	8a7b      	ldrh	r3, [r7, #18]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006838:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800683c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8006842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006844:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	b29b      	uxth	r3, r3
 800684a:	429a      	cmp	r2, r3
 800684c:	d206      	bcs.n	800685c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800684e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006850:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006858:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800685c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8006860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006862:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8006866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006868:	2200      	movs	r2, #0
 800686a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800686e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006870:	f004 f818 	bl	800a8a4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8006874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006876:	7d1b      	ldrb	r3, [r3, #20]
 8006878:	2b06      	cmp	r3, #6
 800687a:	d111      	bne.n	80068a0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800687c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687e:	8b5b      	ldrh	r3, [r3, #26]
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00b      	beq.n	80068a0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006888:	4b9c      	ldr	r3, [pc, #624]	@ (8006afc <tcp_slowtmr+0x584>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b28      	cmp	r3, #40	@ 0x28
 8006894:	d904      	bls.n	80068a0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8006896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800689a:	3301      	adds	r3, #1
 800689c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80068a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a2:	7a5b      	ldrb	r3, [r3, #9]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d04a      	beq.n	8006942 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80068ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ae:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d003      	beq.n	80068bc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80068b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80068b8:	2b07      	cmp	r3, #7
 80068ba:	d142      	bne.n	8006942 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068bc:	4b8f      	ldr	r3, [pc, #572]	@ (8006afc <tcp_slowtmr+0x584>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80068c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80068cc:	4b8c      	ldr	r3, [pc, #560]	@ (8006b00 <tcp_slowtmr+0x588>)
 80068ce:	440b      	add	r3, r1
 80068d0:	498c      	ldr	r1, [pc, #560]	@ (8006b04 <tcp_slowtmr+0x58c>)
 80068d2:	fba1 1303 	umull	r1, r3, r1, r3
 80068d6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068d8:	429a      	cmp	r2, r3
 80068da:	d90a      	bls.n	80068f2 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80068dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068e0:	3301      	adds	r3, #1
 80068e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80068e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80068ea:	3301      	adds	r3, #1
 80068ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80068f0:	e027      	b.n	8006942 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068f2:	4b82      	ldr	r3, [pc, #520]	@ (8006afc <tcp_slowtmr+0x584>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80068fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fe:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8006902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006904:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006908:	4618      	mov	r0, r3
 800690a:	4b7f      	ldr	r3, [pc, #508]	@ (8006b08 <tcp_slowtmr+0x590>)
 800690c:	fb00 f303 	mul.w	r3, r0, r3
 8006910:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006912:	497c      	ldr	r1, [pc, #496]	@ (8006b04 <tcp_slowtmr+0x58c>)
 8006914:	fba1 1303 	umull	r1, r3, r1, r3
 8006918:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800691a:	429a      	cmp	r2, r3
 800691c:	d911      	bls.n	8006942 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800691e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006920:	f004 fac4 	bl	800aeac <tcp_keepalive>
 8006924:	4603      	mov	r3, r0
 8006926:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800692a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800692e:	2b00      	cmp	r3, #0
 8006930:	d107      	bne.n	8006942 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006934:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006938:	3301      	adds	r3, #1
 800693a:	b2da      	uxtb	r2, r3
 800693c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8006942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006946:	2b00      	cmp	r3, #0
 8006948:	d011      	beq.n	800696e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800694a:	4b6c      	ldr	r3, [pc, #432]	@ (8006afc <tcp_slowtmr+0x584>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	1ad2      	subs	r2, r2, r3
 8006954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006956:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800695a:	4619      	mov	r1, r3
 800695c:	460b      	mov	r3, r1
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	440b      	add	r3, r1
 8006962:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006964:	429a      	cmp	r2, r3
 8006966:	d302      	bcc.n	800696e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8006968:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800696a:	f000 fddd 	bl	8007528 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800696e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006970:	7d1b      	ldrb	r3, [r3, #20]
 8006972:	2b03      	cmp	r3, #3
 8006974:	d10b      	bne.n	800698e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006976:	4b61      	ldr	r3, [pc, #388]	@ (8006afc <tcp_slowtmr+0x584>)
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b28      	cmp	r3, #40	@ 0x28
 8006982:	d904      	bls.n	800698e <tcp_slowtmr+0x416>
        ++pcb_remove;
 8006984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006988:	3301      	adds	r3, #1
 800698a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800698e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006990:	7d1b      	ldrb	r3, [r3, #20]
 8006992:	2b09      	cmp	r3, #9
 8006994:	d10b      	bne.n	80069ae <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006996:	4b59      	ldr	r3, [pc, #356]	@ (8006afc <tcp_slowtmr+0x584>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2bf0      	cmp	r3, #240	@ 0xf0
 80069a2:	d904      	bls.n	80069ae <tcp_slowtmr+0x436>
        ++pcb_remove;
 80069a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069a8:	3301      	adds	r3, #1
 80069aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80069ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d060      	beq.n	8006a78 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80069b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069bc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80069be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069c0:	f000 fbfe 	bl	80071c0 <tcp_pcb_purge>
      if (prev != NULL) {
 80069c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d010      	beq.n	80069ec <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80069ca:	4b50      	ldr	r3, [pc, #320]	@ (8006b0c <tcp_slowtmr+0x594>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d106      	bne.n	80069e2 <tcp_slowtmr+0x46a>
 80069d4:	4b4e      	ldr	r3, [pc, #312]	@ (8006b10 <tcp_slowtmr+0x598>)
 80069d6:	f240 526d 	movw	r2, #1389	@ 0x56d
 80069da:	494e      	ldr	r1, [pc, #312]	@ (8006b14 <tcp_slowtmr+0x59c>)
 80069dc:	484e      	ldr	r0, [pc, #312]	@ (8006b18 <tcp_slowtmr+0x5a0>)
 80069de:	f007 fa21 	bl	800de24 <iprintf>
        prev->next = pcb->next;
 80069e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e8:	60da      	str	r2, [r3, #12]
 80069ea:	e00f      	b.n	8006a0c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80069ec:	4b47      	ldr	r3, [pc, #284]	@ (8006b0c <tcp_slowtmr+0x594>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d006      	beq.n	8006a04 <tcp_slowtmr+0x48c>
 80069f6:	4b46      	ldr	r3, [pc, #280]	@ (8006b10 <tcp_slowtmr+0x598>)
 80069f8:	f240 5271 	movw	r2, #1393	@ 0x571
 80069fc:	4947      	ldr	r1, [pc, #284]	@ (8006b1c <tcp_slowtmr+0x5a4>)
 80069fe:	4846      	ldr	r0, [pc, #280]	@ (8006b18 <tcp_slowtmr+0x5a0>)
 8006a00:	f007 fa10 	bl	800de24 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	4a40      	ldr	r2, [pc, #256]	@ (8006b0c <tcp_slowtmr+0x594>)
 8006a0a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8006a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d013      	beq.n	8006a3c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a16:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006a1c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8006a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a20:	3304      	adds	r3, #4
 8006a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a24:	8ad2      	ldrh	r2, [r2, #22]
 8006a26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a28:	8b09      	ldrh	r1, [r1, #24]
 8006a2a:	9102      	str	r1, [sp, #8]
 8006a2c:	9201      	str	r2, [sp, #4]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	462b      	mov	r3, r5
 8006a32:	4622      	mov	r2, r4
 8006a34:	4601      	mov	r1, r0
 8006a36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a38:	f004 f984 	bl	800ad44 <tcp_rst>
      err_arg = pcb->callback_arg;
 8006a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a44:	7d1b      	ldrb	r3, [r3, #20]
 8006a46:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006a52:	6838      	ldr	r0, [r7, #0]
 8006a54:	f7ff f9f2 	bl	8005e3c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8006a58:	4b31      	ldr	r3, [pc, #196]	@ (8006b20 <tcp_slowtmr+0x5a8>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d004      	beq.n	8006a6e <tcp_slowtmr+0x4f6>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f06f 010c 	mvn.w	r1, #12
 8006a6a:	68b8      	ldr	r0, [r7, #8]
 8006a6c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8006b20 <tcp_slowtmr+0x5a8>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d037      	beq.n	8006ae6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006a76:	e592      	b.n	800659e <tcp_slowtmr+0x26>
      prev = pcb;
 8006a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	7f1b      	ldrb	r3, [r3, #28]
 8006a86:	3301      	adds	r3, #1
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a90:	7f1a      	ldrb	r2, [r3, #28]
 8006a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a94:	7f5b      	ldrb	r3, [r3, #29]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d325      	bcc.n	8006ae6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8006aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8006b20 <tcp_slowtmr+0x5a8>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <tcp_slowtmr+0x550>
 8006ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ab6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ab8:	6912      	ldr	r2, [r2, #16]
 8006aba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006abc:	4610      	mov	r0, r2
 8006abe:	4798      	blx	r3
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006ac6:	e002      	b.n	8006ace <tcp_slowtmr+0x556>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8006ace:	4b14      	ldr	r3, [pc, #80]	@ (8006b20 <tcp_slowtmr+0x5a8>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f47f ad62 	bne.w	800659c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006ad8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d102      	bne.n	8006ae6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006ae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ae2:	f003 fb7b 	bl	800a1dc <tcp_output>
  while (pcb != NULL) {
 8006ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f47f ad5e 	bne.w	80065aa <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8006af2:	4b0c      	ldr	r3, [pc, #48]	@ (8006b24 <tcp_slowtmr+0x5ac>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006af8:	e069      	b.n	8006bce <tcp_slowtmr+0x656>
 8006afa:	bf00      	nop
 8006afc:	24007b6c 	.word	0x24007b6c
 8006b00:	000a4cb8 	.word	0x000a4cb8
 8006b04:	10624dd3 	.word	0x10624dd3
 8006b08:	000124f8 	.word	0x000124f8
 8006b0c:	24007b78 	.word	0x24007b78
 8006b10:	0800f71c 	.word	0x0800f71c
 8006b14:	0800fb54 	.word	0x0800fb54
 8006b18:	0800f760 	.word	0x0800f760
 8006b1c:	0800fb80 	.word	0x0800fb80
 8006b20:	24007b80 	.word	0x24007b80
 8006b24:	24007b7c 	.word	0x24007b7c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2a:	7d1b      	ldrb	r3, [r3, #20]
 8006b2c:	2b0a      	cmp	r3, #10
 8006b2e:	d006      	beq.n	8006b3e <tcp_slowtmr+0x5c6>
 8006b30:	4b2b      	ldr	r3, [pc, #172]	@ (8006be0 <tcp_slowtmr+0x668>)
 8006b32:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8006b36:	492b      	ldr	r1, [pc, #172]	@ (8006be4 <tcp_slowtmr+0x66c>)
 8006b38:	482b      	ldr	r0, [pc, #172]	@ (8006be8 <tcp_slowtmr+0x670>)
 8006b3a:	f007 f973 	bl	800de24 <iprintf>
    pcb_remove = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006b44:	4b29      	ldr	r3, [pc, #164]	@ (8006bec <tcp_slowtmr+0x674>)
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2bf0      	cmp	r3, #240	@ 0xf0
 8006b50:	d904      	bls.n	8006b5c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8006b52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b56:	3301      	adds	r3, #1
 8006b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d02f      	beq.n	8006bc4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006b64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b66:	f000 fb2b 	bl	80071c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d010      	beq.n	8006b92 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006b70:	4b1f      	ldr	r3, [pc, #124]	@ (8006bf0 <tcp_slowtmr+0x678>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d106      	bne.n	8006b88 <tcp_slowtmr+0x610>
 8006b7a:	4b19      	ldr	r3, [pc, #100]	@ (8006be0 <tcp_slowtmr+0x668>)
 8006b7c:	f240 52af 	movw	r2, #1455	@ 0x5af
 8006b80:	491c      	ldr	r1, [pc, #112]	@ (8006bf4 <tcp_slowtmr+0x67c>)
 8006b82:	4819      	ldr	r0, [pc, #100]	@ (8006be8 <tcp_slowtmr+0x670>)
 8006b84:	f007 f94e 	bl	800de24 <iprintf>
        prev->next = pcb->next;
 8006b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8e:	60da      	str	r2, [r3, #12]
 8006b90:	e00f      	b.n	8006bb2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006b92:	4b17      	ldr	r3, [pc, #92]	@ (8006bf0 <tcp_slowtmr+0x678>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d006      	beq.n	8006baa <tcp_slowtmr+0x632>
 8006b9c:	4b10      	ldr	r3, [pc, #64]	@ (8006be0 <tcp_slowtmr+0x668>)
 8006b9e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8006ba2:	4915      	ldr	r1, [pc, #84]	@ (8006bf8 <tcp_slowtmr+0x680>)
 8006ba4:	4810      	ldr	r0, [pc, #64]	@ (8006be8 <tcp_slowtmr+0x670>)
 8006ba6:	f007 f93d 	bl	800de24 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	4a10      	ldr	r2, [pc, #64]	@ (8006bf0 <tcp_slowtmr+0x678>)
 8006bb0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006bbc:	69f8      	ldr	r0, [r7, #28]
 8006bbe:	f7ff f93d 	bl	8005e3c <tcp_free>
 8006bc2:	e004      	b.n	8006bce <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8006bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1a9      	bne.n	8006b28 <tcp_slowtmr+0x5b0>
    }
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	3730      	adds	r7, #48	@ 0x30
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8006bde:	bf00      	nop
 8006be0:	0800f71c 	.word	0x0800f71c
 8006be4:	0800fbac 	.word	0x0800fbac
 8006be8:	0800f760 	.word	0x0800f760
 8006bec:	24007b6c 	.word	0x24007b6c
 8006bf0:	24007b7c 	.word	0x24007b7c
 8006bf4:	0800fbdc 	.word	0x0800fbdc
 8006bf8:	0800fc04 	.word	0x0800fc04

08006bfc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006c02:	4b2d      	ldr	r3, [pc, #180]	@ (8006cb8 <tcp_fasttmr+0xbc>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8006cb8 <tcp_fasttmr+0xbc>)
 8006c0c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8006cbc <tcp_fasttmr+0xc0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006c14:	e048      	b.n	8006ca8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7f9a      	ldrb	r2, [r3, #30]
 8006c1a:	4b27      	ldr	r3, [pc, #156]	@ (8006cb8 <tcp_fasttmr+0xbc>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d03f      	beq.n	8006ca2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006c22:	4b25      	ldr	r3, [pc, #148]	@ (8006cb8 <tcp_fasttmr+0xbc>)
 8006c24:	781a      	ldrb	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	8b5b      	ldrh	r3, [r3, #26]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d010      	beq.n	8006c58 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	8b5b      	ldrh	r3, [r3, #26]
 8006c3a:	f043 0302 	orr.w	r3, r3, #2
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f003 fac9 	bl	800a1dc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	8b5b      	ldrh	r3, [r3, #26]
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	8b5b      	ldrh	r3, [r3, #26]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d009      	beq.n	8006c78 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	8b5b      	ldrh	r3, [r3, #26]
 8006c68:	f023 0308 	bic.w	r3, r3, #8
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff fa76 	bl	8006164 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006c86:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc0 <tcp_fasttmr+0xc4>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f819 	bl	8006cc4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006c92:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc0 <tcp_fasttmr+0xc4>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d000      	beq.n	8006c9c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006c9a:	e7b8      	b.n	8006c0e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	607b      	str	r3, [r7, #4]
 8006ca0:	e002      	b.n	8006ca8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1b3      	bne.n	8006c16 <tcp_fasttmr+0x1a>
    }
  }
}
 8006cae:	bf00      	nop
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	24007b82 	.word	0x24007b82
 8006cbc:	24007b78 	.word	0x24007b78
 8006cc0:	24007b80 	.word	0x24007b80

08006cc4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006cc4:	b590      	push	{r4, r7, lr}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <tcp_process_refused_data+0x22>
 8006cd2:	4b37      	ldr	r3, [pc, #220]	@ (8006db0 <tcp_process_refused_data+0xec>)
 8006cd4:	f240 6209 	movw	r2, #1545	@ 0x609
 8006cd8:	4936      	ldr	r1, [pc, #216]	@ (8006db4 <tcp_process_refused_data+0xf0>)
 8006cda:	4837      	ldr	r0, [pc, #220]	@ (8006db8 <tcp_process_refused_data+0xf4>)
 8006cdc:	f007 f8a2 	bl	800de24 <iprintf>
 8006ce0:	f06f 030f 	mvn.w	r3, #15
 8006ce4:	e060      	b.n	8006da8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cea:	7b5b      	ldrb	r3, [r3, #13]
 8006cec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cf2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <tcp_process_refused_data+0x58>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6918      	ldr	r0, [r3, #16]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	47a0      	blx	r4
 8006d16:	4603      	mov	r3, r0
 8006d18:	73fb      	strb	r3, [r7, #15]
 8006d1a:	e007      	b.n	8006d2c <tcp_process_refused_data+0x68>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	2000      	movs	r0, #0
 8006d24:	f000 f8a4 	bl	8006e70 <tcp_recv_null>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d12a      	bne.n	8006d8a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d033      	beq.n	8006da6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d42:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006d46:	d005      	beq.n	8006d54 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00b      	beq.n	8006d76 <tcp_process_refused_data+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6918      	ldr	r0, [r3, #16]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	47a0      	blx	r4
 8006d70:	4603      	mov	r3, r0
 8006d72:	73fb      	strb	r3, [r7, #15]
 8006d74:	e001      	b.n	8006d7a <tcp_process_refused_data+0xb6>
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d7e:	f113 0f0d 	cmn.w	r3, #13
 8006d82:	d110      	bne.n	8006da6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006d84:	f06f 030c 	mvn.w	r3, #12
 8006d88:	e00e      	b.n	8006da8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d8e:	f113 0f0d 	cmn.w	r3, #13
 8006d92:	d102      	bne.n	8006d9a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006d94:	f06f 030c 	mvn.w	r3, #12
 8006d98:	e006      	b.n	8006da8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8006da0:	f06f 0304 	mvn.w	r3, #4
 8006da4:	e000      	b.n	8006da8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd90      	pop	{r4, r7, pc}
 8006db0:	0800f71c 	.word	0x0800f71c
 8006db4:	0800fc2c 	.word	0x0800fc2c
 8006db8:	0800f760 	.word	0x0800f760

08006dbc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006dc4:	e007      	b.n	8006dd6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f80a 	bl	8006de6 <tcp_seg_free>
    seg = next;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f4      	bne.n	8006dc6 <tcp_segs_free+0xa>
  }
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00c      	beq.n	8006e0e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d004      	beq.n	8006e06 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fe fd7b 	bl	80058fc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	2003      	movs	r0, #3
 8006e0a:	f7fd ff21 	bl	8004c50 <memp_free>
  }
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <tcp_seg_copy+0x1c>
 8006e26:	4b0f      	ldr	r3, [pc, #60]	@ (8006e64 <tcp_seg_copy+0x4c>)
 8006e28:	f240 6282 	movw	r2, #1666	@ 0x682
 8006e2c:	490e      	ldr	r1, [pc, #56]	@ (8006e68 <tcp_seg_copy+0x50>)
 8006e2e:	480f      	ldr	r0, [pc, #60]	@ (8006e6c <tcp_seg_copy+0x54>)
 8006e30:	f006 fff8 	bl	800de24 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006e34:	2003      	movs	r0, #3
 8006e36:	f7fd fe9b 	bl	8004b70 <memp_malloc>
 8006e3a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <tcp_seg_copy+0x2e>
    return NULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	e00a      	b.n	8006e5c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006e46:	2210      	movs	r2, #16
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f007 f8c5 	bl	800dfda <memcpy>
  pbuf_ref(cseg->p);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fe fdf1 	bl	8005a3c <pbuf_ref>
  return cseg;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	0800f71c 	.word	0x0800f71c
 8006e68:	0800fc70 	.word	0x0800fc70
 8006e6c:	0800f760 	.word	0x0800f760

08006e70 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d109      	bne.n	8006e98 <tcp_recv_null+0x28>
 8006e84:	4b12      	ldr	r3, [pc, #72]	@ (8006ed0 <tcp_recv_null+0x60>)
 8006e86:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8006e8a:	4912      	ldr	r1, [pc, #72]	@ (8006ed4 <tcp_recv_null+0x64>)
 8006e8c:	4812      	ldr	r0, [pc, #72]	@ (8006ed8 <tcp_recv_null+0x68>)
 8006e8e:	f006 ffc9 	bl	800de24 <iprintf>
 8006e92:	f06f 030f 	mvn.w	r3, #15
 8006e96:	e016      	b.n	8006ec6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	891b      	ldrh	r3, [r3, #8]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	68b8      	ldr	r0, [r7, #8]
 8006ea6:	f7ff fb17 	bl	80064d8 <tcp_recved>
    pbuf_free(p);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fe fd26 	bl	80058fc <pbuf_free>
 8006eb0:	e008      	b.n	8006ec4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006eba:	68b8      	ldr	r0, [r7, #8]
 8006ebc:	f7ff f9bc 	bl	8006238 <tcp_close>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	e000      	b.n	8006ec6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	0800f71c 	.word	0x0800f71c
 8006ed4:	0800fc8c 	.word	0x0800fc8c
 8006ed8:	0800f760 	.word	0x0800f760

08006edc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	db01      	blt.n	8006ef2 <tcp_kill_prio+0x16>
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	e000      	b.n	8006ef4 <tcp_kill_prio+0x18>
 8006ef2:	237f      	movs	r3, #127	@ 0x7f
 8006ef4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006ef6:	7afb      	ldrb	r3, [r7, #11]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d034      	beq.n	8006f66 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006efc:	7afb      	ldrb	r3, [r7, #11]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f0a:	4b19      	ldr	r3, [pc, #100]	@ (8006f70 <tcp_kill_prio+0x94>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	e01f      	b.n	8006f52 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	7d5b      	ldrb	r3, [r3, #21]
 8006f16:	7afa      	ldrb	r2, [r7, #11]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d80c      	bhi.n	8006f36 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006f20:	7afa      	ldrb	r2, [r7, #11]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d112      	bne.n	8006f4c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006f26:	4b13      	ldr	r3, [pc, #76]	@ (8006f74 <tcp_kill_prio+0x98>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d80a      	bhi.n	8006f4c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006f36:	4b0f      	ldr	r3, [pc, #60]	@ (8006f74 <tcp_kill_prio+0x98>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	7d5b      	ldrb	r3, [r3, #21]
 8006f4a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1dc      	bne.n	8006f12 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006f5e:	6938      	ldr	r0, [r7, #16]
 8006f60:	f7ff fa54 	bl	800640c <tcp_abort>
 8006f64:	e000      	b.n	8006f68 <tcp_kill_prio+0x8c>
    return;
 8006f66:	bf00      	nop
  }
}
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	24007b78 	.word	0x24007b78
 8006f74:	24007b6c 	.word	0x24007b6c

08006f78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d009      	beq.n	8006f9c <tcp_kill_state+0x24>
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	2b09      	cmp	r3, #9
 8006f8c:	d006      	beq.n	8006f9c <tcp_kill_state+0x24>
 8006f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff8 <tcp_kill_state+0x80>)
 8006f90:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8006f94:	4919      	ldr	r1, [pc, #100]	@ (8006ffc <tcp_kill_state+0x84>)
 8006f96:	481a      	ldr	r0, [pc, #104]	@ (8007000 <tcp_kill_state+0x88>)
 8006f98:	f006 ff44 	bl	800de24 <iprintf>

  inactivity = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fa4:	4b17      	ldr	r3, [pc, #92]	@ (8007004 <tcp_kill_state+0x8c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e017      	b.n	8006fdc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	7d1b      	ldrb	r3, [r3, #20]
 8006fb0:	79fa      	ldrb	r2, [r7, #7]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d10f      	bne.n	8006fd6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006fb6:	4b14      	ldr	r3, [pc, #80]	@ (8007008 <tcp_kill_state+0x90>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d807      	bhi.n	8006fd6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006fc6:	4b10      	ldr	r3, [pc, #64]	@ (8007008 <tcp_kill_state+0x90>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e4      	bne.n	8006fac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006fe8:	2100      	movs	r1, #0
 8006fea:	6938      	ldr	r0, [r7, #16]
 8006fec:	f7ff f950 	bl	8006290 <tcp_abandon>
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	0800f71c 	.word	0x0800f71c
 8006ffc:	0800fca8 	.word	0x0800fca8
 8007000:	0800f760 	.word	0x0800f760
 8007004:	24007b78 	.word	0x24007b78
 8007008:	24007b6c 	.word	0x24007b6c

0800700c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800701a:	4b12      	ldr	r3, [pc, #72]	@ (8007064 <tcp_kill_timewait+0x58>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e012      	b.n	8007048 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007022:	4b11      	ldr	r3, [pc, #68]	@ (8007068 <tcp_kill_timewait+0x5c>)
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	429a      	cmp	r2, r3
 8007030:	d807      	bhi.n	8007042 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007032:	4b0d      	ldr	r3, [pc, #52]	@ (8007068 <tcp_kill_timewait+0x5c>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e9      	bne.n	8007022 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007054:	68b8      	ldr	r0, [r7, #8]
 8007056:	f7ff f9d9 	bl	800640c <tcp_abort>
  }
}
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	24007b7c 	.word	0x24007b7c
 8007068:	24007b6c 	.word	0x24007b6c

0800706c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007072:	4b10      	ldr	r3, [pc, #64]	@ (80070b4 <tcp_handle_closepend+0x48>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007078:	e014      	b.n	80070a4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8b5b      	ldrh	r3, [r3, #26]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	8b5b      	ldrh	r3, [r3, #26]
 8007090:	f023 0308 	bic.w	r3, r3, #8
 8007094:	b29a      	uxth	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff f862 	bl	8006164 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e7      	bne.n	800707a <tcp_handle_closepend+0xe>
  }
}
 80070aa:	bf00      	nop
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	24007b78 	.word	0x24007b78

080070b8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80070c2:	2001      	movs	r0, #1
 80070c4:	f7fd fd54 	bl	8004b70 <memp_malloc>
 80070c8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d126      	bne.n	800711e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80070d0:	f7ff ffcc 	bl	800706c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80070d4:	f7ff ff9a 	bl	800700c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80070d8:	2001      	movs	r0, #1
 80070da:	f7fd fd49 	bl	8004b70 <memp_malloc>
 80070de:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d11b      	bne.n	800711e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80070e6:	2009      	movs	r0, #9
 80070e8:	f7ff ff46 	bl	8006f78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80070ec:	2001      	movs	r0, #1
 80070ee:	f7fd fd3f 	bl	8004b70 <memp_malloc>
 80070f2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d111      	bne.n	800711e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80070fa:	2008      	movs	r0, #8
 80070fc:	f7ff ff3c 	bl	8006f78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007100:	2001      	movs	r0, #1
 8007102:	f7fd fd35 	bl	8004b70 <memp_malloc>
 8007106:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d107      	bne.n	800711e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800710e:	79fb      	ldrb	r3, [r7, #7]
 8007110:	4618      	mov	r0, r3
 8007112:	f7ff fee3 	bl	8006edc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007116:	2001      	movs	r0, #1
 8007118:	f7fd fd2a 	bl	8004b70 <memp_malloc>
 800711c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d03f      	beq.n	80071a4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007124:	229c      	movs	r2, #156	@ 0x9c
 8007126:	2100      	movs	r1, #0
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f006 fee0 	bl	800deee <memset>
    pcb->prio = prio;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	79fa      	ldrb	r2, [r7, #7]
 8007132:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800713a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007144:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	22ff      	movs	r2, #255	@ 0xff
 8007152:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800715a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2206      	movs	r2, #6
 8007160:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2206      	movs	r2, #6
 8007168:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007170:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800717a:	4b0d      	ldr	r3, [pc, #52]	@ (80071b0 <tcp_alloc+0xf8>)
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007182:	4b0c      	ldr	r3, [pc, #48]	@ (80071b4 <tcp_alloc+0xfc>)
 8007184:	781a      	ldrb	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007190:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4a08      	ldr	r2, [pc, #32]	@ (80071b8 <tcp_alloc+0x100>)
 8007198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4a07      	ldr	r2, [pc, #28]	@ (80071bc <tcp_alloc+0x104>)
 80071a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80071a4:	68fb      	ldr	r3, [r7, #12]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	24007b6c 	.word	0x24007b6c
 80071b4:	24007b82 	.word	0x24007b82
 80071b8:	08006e71 	.word	0x08006e71
 80071bc:	006ddd00 	.word	0x006ddd00

080071c0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d107      	bne.n	80071de <tcp_pcb_purge+0x1e>
 80071ce:	4b21      	ldr	r3, [pc, #132]	@ (8007254 <tcp_pcb_purge+0x94>)
 80071d0:	f640 0251 	movw	r2, #2129	@ 0x851
 80071d4:	4920      	ldr	r1, [pc, #128]	@ (8007258 <tcp_pcb_purge+0x98>)
 80071d6:	4821      	ldr	r0, [pc, #132]	@ (800725c <tcp_pcb_purge+0x9c>)
 80071d8:	f006 fe24 	bl	800de24 <iprintf>
 80071dc:	e037      	b.n	800724e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7d1b      	ldrb	r3, [r3, #20]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d033      	beq.n	800724e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80071ea:	2b0a      	cmp	r3, #10
 80071ec:	d02f      	beq.n	800724e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d02b      	beq.n	800724e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d007      	beq.n	800720e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe fb7a 	bl	80058fc <pbuf_free>
      pcb->refused_data = NULL;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f986 	bl	8007528 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007222:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff fdc7 	bl	8006dbc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff fdc2 	bl	8006dbc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	0800f71c 	.word	0x0800f71c
 8007258:	0800fd68 	.word	0x0800fd68
 800725c:	0800f760 	.word	0x0800f760

08007260 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d106      	bne.n	800727e <tcp_pcb_remove+0x1e>
 8007270:	4b3e      	ldr	r3, [pc, #248]	@ (800736c <tcp_pcb_remove+0x10c>)
 8007272:	f640 0283 	movw	r2, #2179	@ 0x883
 8007276:	493e      	ldr	r1, [pc, #248]	@ (8007370 <tcp_pcb_remove+0x110>)
 8007278:	483e      	ldr	r0, [pc, #248]	@ (8007374 <tcp_pcb_remove+0x114>)
 800727a:	f006 fdd3 	bl	800de24 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <tcp_pcb_remove+0x32>
 8007284:	4b39      	ldr	r3, [pc, #228]	@ (800736c <tcp_pcb_remove+0x10c>)
 8007286:	f640 0284 	movw	r2, #2180	@ 0x884
 800728a:	493b      	ldr	r1, [pc, #236]	@ (8007378 <tcp_pcb_remove+0x118>)
 800728c:	4839      	ldr	r0, [pc, #228]	@ (8007374 <tcp_pcb_remove+0x114>)
 800728e:	f006 fdc9 	bl	800de24 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d105      	bne.n	80072a8 <tcp_pcb_remove+0x48>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e013      	b.n	80072d0 <tcp_pcb_remove+0x70>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e00c      	b.n	80072ca <tcp_pcb_remove+0x6a>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d104      	bne.n	80072c4 <tcp_pcb_remove+0x64>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	60da      	str	r2, [r3, #12]
 80072c2:	e005      	b.n	80072d0 <tcp_pcb_remove+0x70>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1ef      	bne.n	80072b0 <tcp_pcb_remove+0x50>
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2200      	movs	r2, #0
 80072d4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80072d6:	6838      	ldr	r0, [r7, #0]
 80072d8:	f7ff ff72 	bl	80071c0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	7d1b      	ldrb	r3, [r3, #20]
 80072e0:	2b0a      	cmp	r3, #10
 80072e2:	d013      	beq.n	800730c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d00f      	beq.n	800730c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	8b5b      	ldrh	r3, [r3, #26]
 80072f0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d009      	beq.n	800730c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	8b5b      	ldrh	r3, [r3, #26]
 80072fc:	f043 0302 	orr.w	r3, r3, #2
 8007300:	b29a      	uxth	r2, r3
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007306:	6838      	ldr	r0, [r7, #0]
 8007308:	f002 ff68 	bl	800a1dc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	7d1b      	ldrb	r3, [r3, #20]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d020      	beq.n	8007356 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007318:	2b00      	cmp	r3, #0
 800731a:	d006      	beq.n	800732a <tcp_pcb_remove+0xca>
 800731c:	4b13      	ldr	r3, [pc, #76]	@ (800736c <tcp_pcb_remove+0x10c>)
 800731e:	f640 0293 	movw	r2, #2195	@ 0x893
 8007322:	4916      	ldr	r1, [pc, #88]	@ (800737c <tcp_pcb_remove+0x11c>)
 8007324:	4813      	ldr	r0, [pc, #76]	@ (8007374 <tcp_pcb_remove+0x114>)
 8007326:	f006 fd7d 	bl	800de24 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800732e:	2b00      	cmp	r3, #0
 8007330:	d006      	beq.n	8007340 <tcp_pcb_remove+0xe0>
 8007332:	4b0e      	ldr	r3, [pc, #56]	@ (800736c <tcp_pcb_remove+0x10c>)
 8007334:	f640 0294 	movw	r2, #2196	@ 0x894
 8007338:	4911      	ldr	r1, [pc, #68]	@ (8007380 <tcp_pcb_remove+0x120>)
 800733a:	480e      	ldr	r0, [pc, #56]	@ (8007374 <tcp_pcb_remove+0x114>)
 800733c:	f006 fd72 	bl	800de24 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007344:	2b00      	cmp	r3, #0
 8007346:	d006      	beq.n	8007356 <tcp_pcb_remove+0xf6>
 8007348:	4b08      	ldr	r3, [pc, #32]	@ (800736c <tcp_pcb_remove+0x10c>)
 800734a:	f640 0296 	movw	r2, #2198	@ 0x896
 800734e:	490d      	ldr	r1, [pc, #52]	@ (8007384 <tcp_pcb_remove+0x124>)
 8007350:	4808      	ldr	r0, [pc, #32]	@ (8007374 <tcp_pcb_remove+0x114>)
 8007352:	f006 fd67 	bl	800de24 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2200      	movs	r2, #0
 800735a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2200      	movs	r2, #0
 8007360:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007362:	bf00      	nop
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	0800f71c 	.word	0x0800f71c
 8007370:	0800fd84 	.word	0x0800fd84
 8007374:	0800f760 	.word	0x0800f760
 8007378:	0800fda0 	.word	0x0800fda0
 800737c:	0800fdc0 	.word	0x0800fdc0
 8007380:	0800fdd8 	.word	0x0800fdd8
 8007384:	0800fdf4 	.word	0x0800fdf4

08007388 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d106      	bne.n	80073a4 <tcp_next_iss+0x1c>
 8007396:	4b0a      	ldr	r3, [pc, #40]	@ (80073c0 <tcp_next_iss+0x38>)
 8007398:	f640 02af 	movw	r2, #2223	@ 0x8af
 800739c:	4909      	ldr	r1, [pc, #36]	@ (80073c4 <tcp_next_iss+0x3c>)
 800739e:	480a      	ldr	r0, [pc, #40]	@ (80073c8 <tcp_next_iss+0x40>)
 80073a0:	f006 fd40 	bl	800de24 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80073a4:	4b09      	ldr	r3, [pc, #36]	@ (80073cc <tcp_next_iss+0x44>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4b09      	ldr	r3, [pc, #36]	@ (80073d0 <tcp_next_iss+0x48>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4413      	add	r3, r2
 80073ae:	4a07      	ldr	r2, [pc, #28]	@ (80073cc <tcp_next_iss+0x44>)
 80073b0:	6013      	str	r3, [r2, #0]
  return iss;
 80073b2:	4b06      	ldr	r3, [pc, #24]	@ (80073cc <tcp_next_iss+0x44>)
 80073b4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	0800f71c 	.word	0x0800f71c
 80073c4:	0800fe0c 	.word	0x0800fe0c
 80073c8:	0800f760 	.word	0x0800f760
 80073cc:	24000028 	.word	0x24000028
 80073d0:	24007b6c 	.word	0x24007b6c

080073d4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d106      	bne.n	80073f6 <tcp_eff_send_mss_netif+0x22>
 80073e8:	4b14      	ldr	r3, [pc, #80]	@ (800743c <tcp_eff_send_mss_netif+0x68>)
 80073ea:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80073ee:	4914      	ldr	r1, [pc, #80]	@ (8007440 <tcp_eff_send_mss_netif+0x6c>)
 80073f0:	4814      	ldr	r0, [pc, #80]	@ (8007444 <tcp_eff_send_mss_netif+0x70>)
 80073f2:	f006 fd17 	bl	800de24 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80073fc:	89fb      	ldrh	r3, [r7, #14]
 80073fe:	e019      	b.n	8007434 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007404:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007406:	8afb      	ldrh	r3, [r7, #22]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d012      	beq.n	8007432 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800740c:	2328      	movs	r3, #40	@ 0x28
 800740e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007410:	8afa      	ldrh	r2, [r7, #22]
 8007412:	8abb      	ldrh	r3, [r7, #20]
 8007414:	429a      	cmp	r2, r3
 8007416:	d904      	bls.n	8007422 <tcp_eff_send_mss_netif+0x4e>
 8007418:	8afa      	ldrh	r2, [r7, #22]
 800741a:	8abb      	ldrh	r3, [r7, #20]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	b29b      	uxth	r3, r3
 8007420:	e000      	b.n	8007424 <tcp_eff_send_mss_netif+0x50>
 8007422:	2300      	movs	r3, #0
 8007424:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007426:	8a7a      	ldrh	r2, [r7, #18]
 8007428:	89fb      	ldrh	r3, [r7, #14]
 800742a:	4293      	cmp	r3, r2
 800742c:	bf28      	it	cs
 800742e:	4613      	movcs	r3, r2
 8007430:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007432:	89fb      	ldrh	r3, [r7, #14]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	0800f71c 	.word	0x0800f71c
 8007440:	0800fe28 	.word	0x0800fe28
 8007444:	0800f760 	.word	0x0800f760

08007448 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d119      	bne.n	8007490 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800745c:	4b10      	ldr	r3, [pc, #64]	@ (80074a0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800745e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8007462:	4910      	ldr	r1, [pc, #64]	@ (80074a4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007464:	4810      	ldr	r0, [pc, #64]	@ (80074a8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007466:	f006 fcdd 	bl	800de24 <iprintf>

  while (pcb != NULL) {
 800746a:	e011      	b.n	8007490 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d108      	bne.n	800748a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f7fe ffc4 	bl	800640c <tcp_abort>
      pcb = next;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	e002      	b.n	8007490 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1ea      	bne.n	800746c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007496:	bf00      	nop
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	0800f71c 	.word	0x0800f71c
 80074a4:	0800fe50 	.word	0x0800fe50
 80074a8:	0800f760 	.word	0x0800f760

080074ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d02a      	beq.n	8007512 <tcp_netif_ip_addr_changed+0x66>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d026      	beq.n	8007512 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80074c4:	4b15      	ldr	r3, [pc, #84]	@ (800751c <tcp_netif_ip_addr_changed+0x70>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff ffbc 	bl	8007448 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80074d0:	4b13      	ldr	r3, [pc, #76]	@ (8007520 <tcp_netif_ip_addr_changed+0x74>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff ffb6 	bl	8007448 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d017      	beq.n	8007512 <tcp_netif_ip_addr_changed+0x66>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d013      	beq.n	8007512 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80074ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007524 <tcp_netif_ip_addr_changed+0x78>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	e00c      	b.n	800750c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d103      	bne.n	8007506 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1ef      	bne.n	80074f2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	24007b78 	.word	0x24007b78
 8007520:	24007b70 	.word	0x24007b70
 8007524:	24007b74 	.word	0x24007b74

08007528 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff fc3d 	bl	8006dbc <tcp_segs_free>
    pcb->ooseq = NULL;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007548:	bf00      	nop
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007550:	b590      	push	{r4, r7, lr}
 8007552:	b08d      	sub	sp, #52	@ 0x34
 8007554:	af04      	add	r7, sp, #16
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d105      	bne.n	800756c <tcp_input+0x1c>
 8007560:	4b9b      	ldr	r3, [pc, #620]	@ (80077d0 <tcp_input+0x280>)
 8007562:	2283      	movs	r2, #131	@ 0x83
 8007564:	499b      	ldr	r1, [pc, #620]	@ (80077d4 <tcp_input+0x284>)
 8007566:	489c      	ldr	r0, [pc, #624]	@ (80077d8 <tcp_input+0x288>)
 8007568:	f006 fc5c 	bl	800de24 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	4a9a      	ldr	r2, [pc, #616]	@ (80077dc <tcp_input+0x28c>)
 8007572:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	895b      	ldrh	r3, [r3, #10]
 8007578:	2b13      	cmp	r3, #19
 800757a:	f240 83d1 	bls.w	8007d20 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800757e:	4b98      	ldr	r3, [pc, #608]	@ (80077e0 <tcp_input+0x290>)
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	4a97      	ldr	r2, [pc, #604]	@ (80077e0 <tcp_input+0x290>)
 8007584:	6812      	ldr	r2, [r2, #0]
 8007586:	4611      	mov	r1, r2
 8007588:	4618      	mov	r0, r3
 800758a:	f005 fbf5 	bl	800cd78 <ip4_addr_isbroadcast_u32>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	f040 83c7 	bne.w	8007d24 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007596:	4b92      	ldr	r3, [pc, #584]	@ (80077e0 <tcp_input+0x290>)
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800759e:	2be0      	cmp	r3, #224	@ 0xe0
 80075a0:	f000 83c0 	beq.w	8007d24 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80075a4:	4b8d      	ldr	r3, [pc, #564]	@ (80077dc <tcp_input+0x28c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	899b      	ldrh	r3, [r3, #12]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fc fdaf 	bl	8004110 <lwip_htons>
 80075b2:	4603      	mov	r3, r0
 80075b4:	0b1b      	lsrs	r3, r3, #12
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80075be:	7cbb      	ldrb	r3, [r7, #18]
 80075c0:	2b13      	cmp	r3, #19
 80075c2:	f240 83b1 	bls.w	8007d28 <tcp_input+0x7d8>
 80075c6:	7cbb      	ldrb	r3, [r7, #18]
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	891b      	ldrh	r3, [r3, #8]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	f200 83aa 	bhi.w	8007d28 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80075d4:	7cbb      	ldrb	r3, [r7, #18]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b14      	subs	r3, #20
 80075da:	b29a      	uxth	r2, r3
 80075dc:	4b81      	ldr	r3, [pc, #516]	@ (80077e4 <tcp_input+0x294>)
 80075de:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80075e0:	4b81      	ldr	r3, [pc, #516]	@ (80077e8 <tcp_input+0x298>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	895a      	ldrh	r2, [r3, #10]
 80075ea:	7cbb      	ldrb	r3, [r7, #18]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d309      	bcc.n	8007606 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80075f2:	4b7c      	ldr	r3, [pc, #496]	@ (80077e4 <tcp_input+0x294>)
 80075f4:	881a      	ldrh	r2, [r3, #0]
 80075f6:	4b7d      	ldr	r3, [pc, #500]	@ (80077ec <tcp_input+0x29c>)
 80075f8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80075fa:	7cbb      	ldrb	r3, [r7, #18]
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7fe f8f6 	bl	80057f0 <pbuf_remove_header>
 8007604:	e04e      	b.n	80076a4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d105      	bne.n	800761a <tcp_input+0xca>
 800760e:	4b70      	ldr	r3, [pc, #448]	@ (80077d0 <tcp_input+0x280>)
 8007610:	22c2      	movs	r2, #194	@ 0xc2
 8007612:	4977      	ldr	r1, [pc, #476]	@ (80077f0 <tcp_input+0x2a0>)
 8007614:	4870      	ldr	r0, [pc, #448]	@ (80077d8 <tcp_input+0x288>)
 8007616:	f006 fc05 	bl	800de24 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800761a:	2114      	movs	r1, #20
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7fe f8e7 	bl	80057f0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	895a      	ldrh	r2, [r3, #10]
 8007626:	4b71      	ldr	r3, [pc, #452]	@ (80077ec <tcp_input+0x29c>)
 8007628:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800762a:	4b6e      	ldr	r3, [pc, #440]	@ (80077e4 <tcp_input+0x294>)
 800762c:	881a      	ldrh	r2, [r3, #0]
 800762e:	4b6f      	ldr	r3, [pc, #444]	@ (80077ec <tcp_input+0x29c>)
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007636:	4b6d      	ldr	r3, [pc, #436]	@ (80077ec <tcp_input+0x29c>)
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7fe f8d7 	bl	80057f0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	895b      	ldrh	r3, [r3, #10]
 8007648:	8a3a      	ldrh	r2, [r7, #16]
 800764a:	429a      	cmp	r2, r3
 800764c:	f200 836e 	bhi.w	8007d2c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	4a64      	ldr	r2, [pc, #400]	@ (80077e8 <tcp_input+0x298>)
 8007658:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	8a3a      	ldrh	r2, [r7, #16]
 8007660:	4611      	mov	r1, r2
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe f8c4 	bl	80057f0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	891a      	ldrh	r2, [r3, #8]
 800766c:	8a3b      	ldrh	r3, [r7, #16]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	b29a      	uxth	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	895b      	ldrh	r3, [r3, #10]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <tcp_input+0x13a>
 800767e:	4b54      	ldr	r3, [pc, #336]	@ (80077d0 <tcp_input+0x280>)
 8007680:	22df      	movs	r2, #223	@ 0xdf
 8007682:	495c      	ldr	r1, [pc, #368]	@ (80077f4 <tcp_input+0x2a4>)
 8007684:	4854      	ldr	r0, [pc, #336]	@ (80077d8 <tcp_input+0x288>)
 8007686:	f006 fbcd 	bl	800de24 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	891a      	ldrh	r2, [r3, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	891b      	ldrh	r3, [r3, #8]
 8007694:	429a      	cmp	r2, r3
 8007696:	d005      	beq.n	80076a4 <tcp_input+0x154>
 8007698:	4b4d      	ldr	r3, [pc, #308]	@ (80077d0 <tcp_input+0x280>)
 800769a:	22e0      	movs	r2, #224	@ 0xe0
 800769c:	4956      	ldr	r1, [pc, #344]	@ (80077f8 <tcp_input+0x2a8>)
 800769e:	484e      	ldr	r0, [pc, #312]	@ (80077d8 <tcp_input+0x288>)
 80076a0:	f006 fbc0 	bl	800de24 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80076a4:	4b4d      	ldr	r3, [pc, #308]	@ (80077dc <tcp_input+0x28c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	4a4b      	ldr	r2, [pc, #300]	@ (80077dc <tcp_input+0x28c>)
 80076ae:	6814      	ldr	r4, [r2, #0]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fc fd2d 	bl	8004110 <lwip_htons>
 80076b6:	4603      	mov	r3, r0
 80076b8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80076ba:	4b48      	ldr	r3, [pc, #288]	@ (80077dc <tcp_input+0x28c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	885b      	ldrh	r3, [r3, #2]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	4a46      	ldr	r2, [pc, #280]	@ (80077dc <tcp_input+0x28c>)
 80076c4:	6814      	ldr	r4, [r2, #0]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fc fd22 	bl	8004110 <lwip_htons>
 80076cc:	4603      	mov	r3, r0
 80076ce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80076d0:	4b42      	ldr	r3, [pc, #264]	@ (80077dc <tcp_input+0x28c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	4a41      	ldr	r2, [pc, #260]	@ (80077dc <tcp_input+0x28c>)
 80076d8:	6814      	ldr	r4, [r2, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fc fd2d 	bl	800413a <lwip_htonl>
 80076e0:	4603      	mov	r3, r0
 80076e2:	6063      	str	r3, [r4, #4]
 80076e4:	6863      	ldr	r3, [r4, #4]
 80076e6:	4a45      	ldr	r2, [pc, #276]	@ (80077fc <tcp_input+0x2ac>)
 80076e8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80076ea:	4b3c      	ldr	r3, [pc, #240]	@ (80077dc <tcp_input+0x28c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	4a3a      	ldr	r2, [pc, #232]	@ (80077dc <tcp_input+0x28c>)
 80076f2:	6814      	ldr	r4, [r2, #0]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fc fd20 	bl	800413a <lwip_htonl>
 80076fa:	4603      	mov	r3, r0
 80076fc:	60a3      	str	r3, [r4, #8]
 80076fe:	68a3      	ldr	r3, [r4, #8]
 8007700:	4a3f      	ldr	r2, [pc, #252]	@ (8007800 <tcp_input+0x2b0>)
 8007702:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007704:	4b35      	ldr	r3, [pc, #212]	@ (80077dc <tcp_input+0x28c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	89db      	ldrh	r3, [r3, #14]
 800770a:	b29b      	uxth	r3, r3
 800770c:	4a33      	ldr	r2, [pc, #204]	@ (80077dc <tcp_input+0x28c>)
 800770e:	6814      	ldr	r4, [r2, #0]
 8007710:	4618      	mov	r0, r3
 8007712:	f7fc fcfd 	bl	8004110 <lwip_htons>
 8007716:	4603      	mov	r3, r0
 8007718:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800771a:	4b30      	ldr	r3, [pc, #192]	@ (80077dc <tcp_input+0x28c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	899b      	ldrh	r3, [r3, #12]
 8007720:	b29b      	uxth	r3, r3
 8007722:	4618      	mov	r0, r3
 8007724:	f7fc fcf4 	bl	8004110 <lwip_htons>
 8007728:	4603      	mov	r3, r0
 800772a:	b2db      	uxtb	r3, r3
 800772c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007730:	b2da      	uxtb	r2, r3
 8007732:	4b34      	ldr	r3, [pc, #208]	@ (8007804 <tcp_input+0x2b4>)
 8007734:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	891a      	ldrh	r2, [r3, #8]
 800773a:	4b33      	ldr	r3, [pc, #204]	@ (8007808 <tcp_input+0x2b8>)
 800773c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800773e:	4b31      	ldr	r3, [pc, #196]	@ (8007804 <tcp_input+0x2b4>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00c      	beq.n	8007764 <tcp_input+0x214>
    tcplen++;
 800774a:	4b2f      	ldr	r3, [pc, #188]	@ (8007808 <tcp_input+0x2b8>)
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	3301      	adds	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	4b2d      	ldr	r3, [pc, #180]	@ (8007808 <tcp_input+0x2b8>)
 8007754:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	891a      	ldrh	r2, [r3, #8]
 800775a:	4b2b      	ldr	r3, [pc, #172]	@ (8007808 <tcp_input+0x2b8>)
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	f200 82e6 	bhi.w	8007d30 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007768:	4b28      	ldr	r3, [pc, #160]	@ (800780c <tcp_input+0x2bc>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	e09d      	b.n	80078ac <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	7d1b      	ldrb	r3, [r3, #20]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d105      	bne.n	8007784 <tcp_input+0x234>
 8007778:	4b15      	ldr	r3, [pc, #84]	@ (80077d0 <tcp_input+0x280>)
 800777a:	22fb      	movs	r2, #251	@ 0xfb
 800777c:	4924      	ldr	r1, [pc, #144]	@ (8007810 <tcp_input+0x2c0>)
 800777e:	4816      	ldr	r0, [pc, #88]	@ (80077d8 <tcp_input+0x288>)
 8007780:	f006 fb50 	bl	800de24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	7d1b      	ldrb	r3, [r3, #20]
 8007788:	2b0a      	cmp	r3, #10
 800778a:	d105      	bne.n	8007798 <tcp_input+0x248>
 800778c:	4b10      	ldr	r3, [pc, #64]	@ (80077d0 <tcp_input+0x280>)
 800778e:	22fc      	movs	r2, #252	@ 0xfc
 8007790:	4920      	ldr	r1, [pc, #128]	@ (8007814 <tcp_input+0x2c4>)
 8007792:	4811      	ldr	r0, [pc, #68]	@ (80077d8 <tcp_input+0x288>)
 8007794:	f006 fb46 	bl	800de24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	7d1b      	ldrb	r3, [r3, #20]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d105      	bne.n	80077ac <tcp_input+0x25c>
 80077a0:	4b0b      	ldr	r3, [pc, #44]	@ (80077d0 <tcp_input+0x280>)
 80077a2:	22fd      	movs	r2, #253	@ 0xfd
 80077a4:	491c      	ldr	r1, [pc, #112]	@ (8007818 <tcp_input+0x2c8>)
 80077a6:	480c      	ldr	r0, [pc, #48]	@ (80077d8 <tcp_input+0x288>)
 80077a8:	f006 fb3c 	bl	800de24 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	7a1b      	ldrb	r3, [r3, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d033      	beq.n	800781c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	7a1a      	ldrb	r2, [r3, #8]
 80077b8:	4b09      	ldr	r3, [pc, #36]	@ (80077e0 <tcp_input+0x290>)
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80077c0:	3301      	adds	r3, #1
 80077c2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d029      	beq.n	800781c <tcp_input+0x2cc>
      prev = pcb;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	61bb      	str	r3, [r7, #24]
      continue;
 80077cc:	e06b      	b.n	80078a6 <tcp_input+0x356>
 80077ce:	bf00      	nop
 80077d0:	0800fe84 	.word	0x0800fe84
 80077d4:	0800feb8 	.word	0x0800feb8
 80077d8:	0800fed0 	.word	0x0800fed0
 80077dc:	24007b94 	.word	0x24007b94
 80077e0:	24004c50 	.word	0x24004c50
 80077e4:	24007b98 	.word	0x24007b98
 80077e8:	24007b9c 	.word	0x24007b9c
 80077ec:	24007b9a 	.word	0x24007b9a
 80077f0:	0800fef8 	.word	0x0800fef8
 80077f4:	0800ff08 	.word	0x0800ff08
 80077f8:	0800ff14 	.word	0x0800ff14
 80077fc:	24007ba4 	.word	0x24007ba4
 8007800:	24007ba8 	.word	0x24007ba8
 8007804:	24007bb0 	.word	0x24007bb0
 8007808:	24007bae 	.word	0x24007bae
 800780c:	24007b78 	.word	0x24007b78
 8007810:	0800ff34 	.word	0x0800ff34
 8007814:	0800ff5c 	.word	0x0800ff5c
 8007818:	0800ff88 	.word	0x0800ff88
    }

    if (pcb->remote_port == tcphdr->src &&
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	8b1a      	ldrh	r2, [r3, #24]
 8007820:	4b72      	ldr	r3, [pc, #456]	@ (80079ec <tcp_input+0x49c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	429a      	cmp	r2, r3
 800782a:	d13a      	bne.n	80078a2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	8ada      	ldrh	r2, [r3, #22]
 8007830:	4b6e      	ldr	r3, [pc, #440]	@ (80079ec <tcp_input+0x49c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	885b      	ldrh	r3, [r3, #2]
 8007836:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007838:	429a      	cmp	r2, r3
 800783a:	d132      	bne.n	80078a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	4b6b      	ldr	r3, [pc, #428]	@ (80079f0 <tcp_input+0x4a0>)
 8007842:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007844:	429a      	cmp	r2, r3
 8007846:	d12c      	bne.n	80078a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	4b68      	ldr	r3, [pc, #416]	@ (80079f0 <tcp_input+0x4a0>)
 800784e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007850:	429a      	cmp	r2, r3
 8007852:	d126      	bne.n	80078a2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	69fa      	ldr	r2, [r7, #28]
 800785a:	429a      	cmp	r2, r3
 800785c:	d106      	bne.n	800786c <tcp_input+0x31c>
 800785e:	4b65      	ldr	r3, [pc, #404]	@ (80079f4 <tcp_input+0x4a4>)
 8007860:	f240 120d 	movw	r2, #269	@ 0x10d
 8007864:	4964      	ldr	r1, [pc, #400]	@ (80079f8 <tcp_input+0x4a8>)
 8007866:	4865      	ldr	r0, [pc, #404]	@ (80079fc <tcp_input+0x4ac>)
 8007868:	f006 fadc 	bl	800de24 <iprintf>
      if (prev != NULL) {
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <tcp_input+0x338>
        prev->next = pcb->next;
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800787a:	4b61      	ldr	r3, [pc, #388]	@ (8007a00 <tcp_input+0x4b0>)
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007882:	4a5f      	ldr	r2, [pc, #380]	@ (8007a00 <tcp_input+0x4b0>)
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	69fa      	ldr	r2, [r7, #28]
 800788e:	429a      	cmp	r2, r3
 8007890:	d111      	bne.n	80078b6 <tcp_input+0x366>
 8007892:	4b58      	ldr	r3, [pc, #352]	@ (80079f4 <tcp_input+0x4a4>)
 8007894:	f240 1215 	movw	r2, #277	@ 0x115
 8007898:	495a      	ldr	r1, [pc, #360]	@ (8007a04 <tcp_input+0x4b4>)
 800789a:	4858      	ldr	r0, [pc, #352]	@ (80079fc <tcp_input+0x4ac>)
 800789c:	f006 fac2 	bl	800de24 <iprintf>
      break;
 80078a0:	e009      	b.n	80078b6 <tcp_input+0x366>
    }
    prev = pcb;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	61fb      	str	r3, [r7, #28]
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f47f af5e 	bne.w	8007770 <tcp_input+0x220>
 80078b4:	e000      	b.n	80078b8 <tcp_input+0x368>
      break;
 80078b6:	bf00      	nop
  }

  if (pcb == NULL) {
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f040 80aa 	bne.w	8007a14 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80078c0:	4b51      	ldr	r3, [pc, #324]	@ (8007a08 <tcp_input+0x4b8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	61fb      	str	r3, [r7, #28]
 80078c6:	e03f      	b.n	8007948 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	7d1b      	ldrb	r3, [r3, #20]
 80078cc:	2b0a      	cmp	r3, #10
 80078ce:	d006      	beq.n	80078de <tcp_input+0x38e>
 80078d0:	4b48      	ldr	r3, [pc, #288]	@ (80079f4 <tcp_input+0x4a4>)
 80078d2:	f240 121f 	movw	r2, #287	@ 0x11f
 80078d6:	494d      	ldr	r1, [pc, #308]	@ (8007a0c <tcp_input+0x4bc>)
 80078d8:	4848      	ldr	r0, [pc, #288]	@ (80079fc <tcp_input+0x4ac>)
 80078da:	f006 faa3 	bl	800de24 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	7a1b      	ldrb	r3, [r3, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d009      	beq.n	80078fa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	7a1a      	ldrb	r2, [r3, #8]
 80078ea:	4b41      	ldr	r3, [pc, #260]	@ (80079f0 <tcp_input+0x4a0>)
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80078f2:	3301      	adds	r3, #1
 80078f4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d122      	bne.n	8007940 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	8b1a      	ldrh	r2, [r3, #24]
 80078fe:	4b3b      	ldr	r3, [pc, #236]	@ (80079ec <tcp_input+0x49c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29b      	uxth	r3, r3
 8007906:	429a      	cmp	r2, r3
 8007908:	d11b      	bne.n	8007942 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	8ada      	ldrh	r2, [r3, #22]
 800790e:	4b37      	ldr	r3, [pc, #220]	@ (80079ec <tcp_input+0x49c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	885b      	ldrh	r3, [r3, #2]
 8007914:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007916:	429a      	cmp	r2, r3
 8007918:	d113      	bne.n	8007942 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	4b34      	ldr	r3, [pc, #208]	@ (80079f0 <tcp_input+0x4a0>)
 8007920:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007922:	429a      	cmp	r2, r3
 8007924:	d10d      	bne.n	8007942 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4b31      	ldr	r3, [pc, #196]	@ (80079f0 <tcp_input+0x4a0>)
 800792c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800792e:	429a      	cmp	r2, r3
 8007930:	d107      	bne.n	8007942 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007932:	69f8      	ldr	r0, [r7, #28]
 8007934:	f000 fb56 	bl	8007fe4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7fd ffdf 	bl	80058fc <pbuf_free>
        return;
 800793e:	e1fd      	b.n	8007d3c <tcp_input+0x7ec>
        continue;
 8007940:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	61fb      	str	r3, [r7, #28]
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1bc      	bne.n	80078c8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800794e:	2300      	movs	r3, #0
 8007950:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007952:	4b2f      	ldr	r3, [pc, #188]	@ (8007a10 <tcp_input+0x4c0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	e02a      	b.n	80079b0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	7a1b      	ldrb	r3, [r3, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00c      	beq.n	800797c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	7a1a      	ldrb	r2, [r3, #8]
 8007966:	4b22      	ldr	r3, [pc, #136]	@ (80079f0 <tcp_input+0x4a0>)
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800796e:	3301      	adds	r3, #1
 8007970:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007972:	429a      	cmp	r2, r3
 8007974:	d002      	beq.n	800797c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	61bb      	str	r3, [r7, #24]
        continue;
 800797a:	e016      	b.n	80079aa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	8ada      	ldrh	r2, [r3, #22]
 8007980:	4b1a      	ldr	r3, [pc, #104]	@ (80079ec <tcp_input+0x49c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	885b      	ldrh	r3, [r3, #2]
 8007986:	b29b      	uxth	r3, r3
 8007988:	429a      	cmp	r2, r3
 800798a:	d10c      	bne.n	80079a6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	4b17      	ldr	r3, [pc, #92]	@ (80079f0 <tcp_input+0x4a0>)
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	429a      	cmp	r2, r3
 8007996:	d00f      	beq.n	80079b8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00d      	beq.n	80079ba <tcp_input+0x46a>
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d009      	beq.n	80079ba <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1d1      	bne.n	800795a <tcp_input+0x40a>
 80079b6:	e000      	b.n	80079ba <tcp_input+0x46a>
            break;
 80079b8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d029      	beq.n	8007a14 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	68da      	ldr	r2, [r3, #12]
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80079ce:	4b10      	ldr	r3, [pc, #64]	@ (8007a10 <tcp_input+0x4c0>)
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80079d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007a10 <tcp_input+0x4c0>)
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80079dc:	6978      	ldr	r0, [r7, #20]
 80079de:	f000 fa03 	bl	8007de8 <tcp_listen_input>
      }
      pbuf_free(p);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fd ff8a 	bl	80058fc <pbuf_free>
      return;
 80079e8:	e1a8      	b.n	8007d3c <tcp_input+0x7ec>
 80079ea:	bf00      	nop
 80079ec:	24007b94 	.word	0x24007b94
 80079f0:	24004c50 	.word	0x24004c50
 80079f4:	0800fe84 	.word	0x0800fe84
 80079f8:	0800ffb0 	.word	0x0800ffb0
 80079fc:	0800fed0 	.word	0x0800fed0
 8007a00:	24007b78 	.word	0x24007b78
 8007a04:	0800ffdc 	.word	0x0800ffdc
 8007a08:	24007b7c 	.word	0x24007b7c
 8007a0c:	08010008 	.word	0x08010008
 8007a10:	24007b74 	.word	0x24007b74
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 8158 	beq.w	8007ccc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007a1c:	4b95      	ldr	r3, [pc, #596]	@ (8007c74 <tcp_input+0x724>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	891a      	ldrh	r2, [r3, #8]
 8007a26:	4b93      	ldr	r3, [pc, #588]	@ (8007c74 <tcp_input+0x724>)
 8007a28:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007a2a:	4a92      	ldr	r2, [pc, #584]	@ (8007c74 <tcp_input+0x724>)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007a30:	4b91      	ldr	r3, [pc, #580]	@ (8007c78 <tcp_input+0x728>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a8f      	ldr	r2, [pc, #572]	@ (8007c74 <tcp_input+0x724>)
 8007a36:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007a38:	4b90      	ldr	r3, [pc, #576]	@ (8007c7c <tcp_input+0x72c>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007a3e:	4b90      	ldr	r3, [pc, #576]	@ (8007c80 <tcp_input+0x730>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007a44:	4b8f      	ldr	r3, [pc, #572]	@ (8007c84 <tcp_input+0x734>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007a4a:	4b8f      	ldr	r3, [pc, #572]	@ (8007c88 <tcp_input+0x738>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	f003 0308 	and.w	r3, r3, #8
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d006      	beq.n	8007a64 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7b5b      	ldrb	r3, [r3, #13]
 8007a5a:	f043 0301 	orr.w	r3, r3, #1
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d017      	beq.n	8007a9c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007a6c:	69f8      	ldr	r0, [r7, #28]
 8007a6e:	f7ff f929 	bl	8006cc4 <tcp_process_refused_data>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f113 0f0d 	cmn.w	r3, #13
 8007a78:	d007      	beq.n	8007a8a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00c      	beq.n	8007a9c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007a82:	4b82      	ldr	r3, [pc, #520]	@ (8007c8c <tcp_input+0x73c>)
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d008      	beq.n	8007a9c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f040 80e3 	bne.w	8007c5a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007a94:	69f8      	ldr	r0, [r7, #28]
 8007a96:	f003 f9a7 	bl	800ade8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007a9a:	e0de      	b.n	8007c5a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007a9c:	4a7c      	ldr	r2, [pc, #496]	@ (8007c90 <tcp_input+0x740>)
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007aa2:	69f8      	ldr	r0, [r7, #28]
 8007aa4:	f000 fb18 	bl	80080d8 <tcp_process>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007aac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ab0:	f113 0f0d 	cmn.w	r3, #13
 8007ab4:	f000 80d3 	beq.w	8007c5e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007ab8:	4b71      	ldr	r3, [pc, #452]	@ (8007c80 <tcp_input+0x730>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	f003 0308 	and.w	r3, r3, #8
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d015      	beq.n	8007af0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <tcp_input+0x590>
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	6912      	ldr	r2, [r2, #16]
 8007ad8:	f06f 010d 	mvn.w	r1, #13
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007ae0:	69f9      	ldr	r1, [r7, #28]
 8007ae2:	486c      	ldr	r0, [pc, #432]	@ (8007c94 <tcp_input+0x744>)
 8007ae4:	f7ff fbbc 	bl	8007260 <tcp_pcb_remove>
        tcp_free(pcb);
 8007ae8:	69f8      	ldr	r0, [r7, #28]
 8007aea:	f7fe f9a7 	bl	8005e3c <tcp_free>
 8007aee:	e0da      	b.n	8007ca6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007af4:	4b63      	ldr	r3, [pc, #396]	@ (8007c84 <tcp_input+0x734>)
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01d      	beq.n	8007b38 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007afc:	4b61      	ldr	r3, [pc, #388]	@ (8007c84 <tcp_input+0x734>)
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00a      	beq.n	8007b22 <tcp_input+0x5d2>
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	6910      	ldr	r0, [r2, #16]
 8007b16:	89fa      	ldrh	r2, [r7, #14]
 8007b18:	69f9      	ldr	r1, [r7, #28]
 8007b1a:	4798      	blx	r3
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	74fb      	strb	r3, [r7, #19]
 8007b20:	e001      	b.n	8007b26 <tcp_input+0x5d6>
 8007b22:	2300      	movs	r3, #0
 8007b24:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007b26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b2a:	f113 0f0d 	cmn.w	r3, #13
 8007b2e:	f000 8098 	beq.w	8007c62 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007b32:	4b54      	ldr	r3, [pc, #336]	@ (8007c84 <tcp_input+0x734>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007b38:	69f8      	ldr	r0, [r7, #28]
 8007b3a:	f000 f915 	bl	8007d68 <tcp_input_delayed_close>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f040 8090 	bne.w	8007c66 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007b46:	4b4d      	ldr	r3, [pc, #308]	@ (8007c7c <tcp_input+0x72c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d041      	beq.n	8007bd2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d006      	beq.n	8007b64 <tcp_input+0x614>
 8007b56:	4b50      	ldr	r3, [pc, #320]	@ (8007c98 <tcp_input+0x748>)
 8007b58:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8007b5c:	494f      	ldr	r1, [pc, #316]	@ (8007c9c <tcp_input+0x74c>)
 8007b5e:	4850      	ldr	r0, [pc, #320]	@ (8007ca0 <tcp_input+0x750>)
 8007b60:	f006 f960 	bl	800de24 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	8b5b      	ldrh	r3, [r3, #26]
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d008      	beq.n	8007b82 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007b70:	4b42      	ldr	r3, [pc, #264]	@ (8007c7c <tcp_input+0x72c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fd fec1 	bl	80058fc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007b7a:	69f8      	ldr	r0, [r7, #28]
 8007b7c:	f7fe fc46 	bl	800640c <tcp_abort>
            goto aborted;
 8007b80:	e091      	b.n	8007ca6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00c      	beq.n	8007ba6 <tcp_input+0x656>
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	6918      	ldr	r0, [r3, #16]
 8007b96:	4b39      	ldr	r3, [pc, #228]	@ (8007c7c <tcp_input+0x72c>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	69f9      	ldr	r1, [r7, #28]
 8007b9e:	47a0      	blx	r4
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	74fb      	strb	r3, [r7, #19]
 8007ba4:	e008      	b.n	8007bb8 <tcp_input+0x668>
 8007ba6:	4b35      	ldr	r3, [pc, #212]	@ (8007c7c <tcp_input+0x72c>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	2300      	movs	r3, #0
 8007bac:	69f9      	ldr	r1, [r7, #28]
 8007bae:	2000      	movs	r0, #0
 8007bb0:	f7ff f95e 	bl	8006e70 <tcp_recv_null>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007bb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007bbc:	f113 0f0d 	cmn.w	r3, #13
 8007bc0:	d053      	beq.n	8007c6a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007bc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007bca:	4b2c      	ldr	r3, [pc, #176]	@ (8007c7c <tcp_input+0x72c>)
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8007c80 <tcp_input+0x730>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d030      	beq.n	8007c40 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d009      	beq.n	8007bfa <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bea:	7b5a      	ldrb	r2, [r3, #13]
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bf0:	f042 0220 	orr.w	r2, r2, #32
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	735a      	strb	r2, [r3, #13]
 8007bf8:	e022      	b.n	8007c40 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bfe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007c02:	d005      	beq.n	8007c10 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c08:	3301      	adds	r3, #1
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00b      	beq.n	8007c32 <tcp_input+0x6e2>
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	6918      	ldr	r0, [r3, #16]
 8007c24:	2300      	movs	r3, #0
 8007c26:	2200      	movs	r2, #0
 8007c28:	69f9      	ldr	r1, [r7, #28]
 8007c2a:	47a0      	blx	r4
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	74fb      	strb	r3, [r7, #19]
 8007c30:	e001      	b.n	8007c36 <tcp_input+0x6e6>
 8007c32:	2300      	movs	r3, #0
 8007c34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007c36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c3a:	f113 0f0d 	cmn.w	r3, #13
 8007c3e:	d016      	beq.n	8007c6e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007c40:	4b13      	ldr	r3, [pc, #76]	@ (8007c90 <tcp_input+0x740>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007c46:	69f8      	ldr	r0, [r7, #28]
 8007c48:	f000 f88e 	bl	8007d68 <tcp_input_delayed_close>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d128      	bne.n	8007ca4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007c52:	69f8      	ldr	r0, [r7, #28]
 8007c54:	f002 fac2 	bl	800a1dc <tcp_output>
 8007c58:	e025      	b.n	8007ca6 <tcp_input+0x756>
        goto aborted;
 8007c5a:	bf00      	nop
 8007c5c:	e023      	b.n	8007ca6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007c5e:	bf00      	nop
 8007c60:	e021      	b.n	8007ca6 <tcp_input+0x756>
              goto aborted;
 8007c62:	bf00      	nop
 8007c64:	e01f      	b.n	8007ca6 <tcp_input+0x756>
          goto aborted;
 8007c66:	bf00      	nop
 8007c68:	e01d      	b.n	8007ca6 <tcp_input+0x756>
            goto aborted;
 8007c6a:	bf00      	nop
 8007c6c:	e01b      	b.n	8007ca6 <tcp_input+0x756>
              goto aborted;
 8007c6e:	bf00      	nop
 8007c70:	e019      	b.n	8007ca6 <tcp_input+0x756>
 8007c72:	bf00      	nop
 8007c74:	24007b84 	.word	0x24007b84
 8007c78:	24007b94 	.word	0x24007b94
 8007c7c:	24007bb4 	.word	0x24007bb4
 8007c80:	24007bb1 	.word	0x24007bb1
 8007c84:	24007bac 	.word	0x24007bac
 8007c88:	24007bb0 	.word	0x24007bb0
 8007c8c:	24007bae 	.word	0x24007bae
 8007c90:	24007bb8 	.word	0x24007bb8
 8007c94:	24007b78 	.word	0x24007b78
 8007c98:	0800fe84 	.word	0x0800fe84
 8007c9c:	08010038 	.word	0x08010038
 8007ca0:	0800fed0 	.word	0x0800fed0
          goto aborted;
 8007ca4:	bf00      	nop
    tcp_input_pcb = NULL;
 8007ca6:	4b27      	ldr	r3, [pc, #156]	@ (8007d44 <tcp_input+0x7f4>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007cac:	4b26      	ldr	r3, [pc, #152]	@ (8007d48 <tcp_input+0x7f8>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007cb2:	4b26      	ldr	r3, [pc, #152]	@ (8007d4c <tcp_input+0x7fc>)
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d03f      	beq.n	8007d3a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007cba:	4b24      	ldr	r3, [pc, #144]	@ (8007d4c <tcp_input+0x7fc>)
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fd fe1c 	bl	80058fc <pbuf_free>
      inseg.p = NULL;
 8007cc4:	4b21      	ldr	r3, [pc, #132]	@ (8007d4c <tcp_input+0x7fc>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007cca:	e036      	b.n	8007d3a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007ccc:	4b20      	ldr	r3, [pc, #128]	@ (8007d50 <tcp_input+0x800>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	899b      	ldrh	r3, [r3, #12]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fc fa1b 	bl	8004110 <lwip_htons>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	f003 0304 	and.w	r3, r3, #4
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d118      	bne.n	8007d18 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8007d54 <tcp_input+0x804>)
 8007ce8:	6819      	ldr	r1, [r3, #0]
 8007cea:	4b1b      	ldr	r3, [pc, #108]	@ (8007d58 <tcp_input+0x808>)
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d5c <tcp_input+0x80c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007cf6:	4b16      	ldr	r3, [pc, #88]	@ (8007d50 <tcp_input+0x800>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007cfa:	885b      	ldrh	r3, [r3, #2]
 8007cfc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007cfe:	4a14      	ldr	r2, [pc, #80]	@ (8007d50 <tcp_input+0x800>)
 8007d00:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d02:	8812      	ldrh	r2, [r2, #0]
 8007d04:	b292      	uxth	r2, r2
 8007d06:	9202      	str	r2, [sp, #8]
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	4b15      	ldr	r3, [pc, #84]	@ (8007d60 <tcp_input+0x810>)
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	4b15      	ldr	r3, [pc, #84]	@ (8007d64 <tcp_input+0x814>)
 8007d10:	4602      	mov	r2, r0
 8007d12:	2000      	movs	r0, #0
 8007d14:	f003 f816 	bl	800ad44 <tcp_rst>
    pbuf_free(p);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7fd fdef 	bl	80058fc <pbuf_free>
  return;
 8007d1e:	e00c      	b.n	8007d3a <tcp_input+0x7ea>
    goto dropped;
 8007d20:	bf00      	nop
 8007d22:	e006      	b.n	8007d32 <tcp_input+0x7e2>
    goto dropped;
 8007d24:	bf00      	nop
 8007d26:	e004      	b.n	8007d32 <tcp_input+0x7e2>
    goto dropped;
 8007d28:	bf00      	nop
 8007d2a:	e002      	b.n	8007d32 <tcp_input+0x7e2>
      goto dropped;
 8007d2c:	bf00      	nop
 8007d2e:	e000      	b.n	8007d32 <tcp_input+0x7e2>
      goto dropped;
 8007d30:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7fd fde2 	bl	80058fc <pbuf_free>
 8007d38:	e000      	b.n	8007d3c <tcp_input+0x7ec>
  return;
 8007d3a:	bf00      	nop
}
 8007d3c:	3724      	adds	r7, #36	@ 0x24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd90      	pop	{r4, r7, pc}
 8007d42:	bf00      	nop
 8007d44:	24007bb8 	.word	0x24007bb8
 8007d48:	24007bb4 	.word	0x24007bb4
 8007d4c:	24007b84 	.word	0x24007b84
 8007d50:	24007b94 	.word	0x24007b94
 8007d54:	24007ba8 	.word	0x24007ba8
 8007d58:	24007bae 	.word	0x24007bae
 8007d5c:	24007ba4 	.word	0x24007ba4
 8007d60:	24004c60 	.word	0x24004c60
 8007d64:	24004c64 	.word	0x24004c64

08007d68 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d106      	bne.n	8007d84 <tcp_input_delayed_close+0x1c>
 8007d76:	4b17      	ldr	r3, [pc, #92]	@ (8007dd4 <tcp_input_delayed_close+0x6c>)
 8007d78:	f240 225a 	movw	r2, #602	@ 0x25a
 8007d7c:	4916      	ldr	r1, [pc, #88]	@ (8007dd8 <tcp_input_delayed_close+0x70>)
 8007d7e:	4817      	ldr	r0, [pc, #92]	@ (8007ddc <tcp_input_delayed_close+0x74>)
 8007d80:	f006 f850 	bl	800de24 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007d84:	4b16      	ldr	r3, [pc, #88]	@ (8007de0 <tcp_input_delayed_close+0x78>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	f003 0310 	and.w	r3, r3, #16
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01c      	beq.n	8007dca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	8b5b      	ldrh	r3, [r3, #26]
 8007d94:	f003 0310 	and.w	r3, r3, #16
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10d      	bne.n	8007db8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d008      	beq.n	8007db8 <tcp_input_delayed_close+0x50>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6912      	ldr	r2, [r2, #16]
 8007db0:	f06f 010e 	mvn.w	r1, #14
 8007db4:	4610      	mov	r0, r2
 8007db6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	480a      	ldr	r0, [pc, #40]	@ (8007de4 <tcp_input_delayed_close+0x7c>)
 8007dbc:	f7ff fa50 	bl	8007260 <tcp_pcb_remove>
    tcp_free(pcb);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7fe f83b 	bl	8005e3c <tcp_free>
    return 1;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	0800fe84 	.word	0x0800fe84
 8007dd8:	08010054 	.word	0x08010054
 8007ddc:	0800fed0 	.word	0x0800fed0
 8007de0:	24007bb1 	.word	0x24007bb1
 8007de4:	24007b78 	.word	0x24007b78

08007de8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007de8:	b590      	push	{r4, r7, lr}
 8007dea:	b08b      	sub	sp, #44	@ 0x2c
 8007dec:	af04      	add	r7, sp, #16
 8007dee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007df0:	4b6f      	ldr	r3, [pc, #444]	@ (8007fb0 <tcp_listen_input+0x1c8>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f040 80d2 	bne.w	8007fa2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d106      	bne.n	8007e12 <tcp_listen_input+0x2a>
 8007e04:	4b6b      	ldr	r3, [pc, #428]	@ (8007fb4 <tcp_listen_input+0x1cc>)
 8007e06:	f240 2281 	movw	r2, #641	@ 0x281
 8007e0a:	496b      	ldr	r1, [pc, #428]	@ (8007fb8 <tcp_listen_input+0x1d0>)
 8007e0c:	486b      	ldr	r0, [pc, #428]	@ (8007fbc <tcp_listen_input+0x1d4>)
 8007e0e:	f006 f809 	bl	800de24 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007e12:	4b67      	ldr	r3, [pc, #412]	@ (8007fb0 <tcp_listen_input+0x1c8>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f003 0310 	and.w	r3, r3, #16
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d019      	beq.n	8007e52 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e1e:	4b68      	ldr	r3, [pc, #416]	@ (8007fc0 <tcp_listen_input+0x1d8>)
 8007e20:	6819      	ldr	r1, [r3, #0]
 8007e22:	4b68      	ldr	r3, [pc, #416]	@ (8007fc4 <tcp_listen_input+0x1dc>)
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	4b67      	ldr	r3, [pc, #412]	@ (8007fc8 <tcp_listen_input+0x1e0>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e2e:	4b67      	ldr	r3, [pc, #412]	@ (8007fcc <tcp_listen_input+0x1e4>)
 8007e30:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e32:	885b      	ldrh	r3, [r3, #2]
 8007e34:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e36:	4a65      	ldr	r2, [pc, #404]	@ (8007fcc <tcp_listen_input+0x1e4>)
 8007e38:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e3a:	8812      	ldrh	r2, [r2, #0]
 8007e3c:	b292      	uxth	r2, r2
 8007e3e:	9202      	str	r2, [sp, #8]
 8007e40:	9301      	str	r3, [sp, #4]
 8007e42:	4b63      	ldr	r3, [pc, #396]	@ (8007fd0 <tcp_listen_input+0x1e8>)
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	4b63      	ldr	r3, [pc, #396]	@ (8007fd4 <tcp_listen_input+0x1ec>)
 8007e48:	4602      	mov	r2, r0
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f002 ff7a 	bl	800ad44 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007e50:	e0a9      	b.n	8007fa6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007e52:	4b57      	ldr	r3, [pc, #348]	@ (8007fb0 <tcp_listen_input+0x1c8>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 80a3 	beq.w	8007fa6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	7d5b      	ldrb	r3, [r3, #21]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff f927 	bl	80070b8 <tcp_alloc>
 8007e6a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d111      	bne.n	8007e96 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <tcp_listen_input+0xa8>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6910      	ldr	r0, [r2, #16]
 8007e82:	f04f 32ff 	mov.w	r2, #4294967295
 8007e86:	2100      	movs	r1, #0
 8007e88:	4798      	blx	r3
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73bb      	strb	r3, [r7, #14]
      return;
 8007e8e:	e08b      	b.n	8007fa8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007e90:	23f0      	movs	r3, #240	@ 0xf0
 8007e92:	73bb      	strb	r3, [r7, #14]
      return;
 8007e94:	e088      	b.n	8007fa8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007e96:	4b50      	ldr	r3, [pc, #320]	@ (8007fd8 <tcp_listen_input+0x1f0>)
 8007e98:	695a      	ldr	r2, [r3, #20]
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8007fd8 <tcp_listen_input+0x1f0>)
 8007ea0:	691a      	ldr	r2, [r3, #16]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	8ada      	ldrh	r2, [r3, #22]
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007eae:	4b47      	ldr	r3, [pc, #284]	@ (8007fcc <tcp_listen_input+0x1e4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007ec0:	4b41      	ldr	r3, [pc, #260]	@ (8007fc8 <tcp_listen_input+0x1e0>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8007ed2:	6978      	ldr	r0, [r7, #20]
 8007ed4:	f7ff fa58 	bl	8007388 <tcp_next_iss>
 8007ed8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007ef2:	4b35      	ldr	r3, [pc, #212]	@ (8007fc8 <tcp_listen_input+0x1e0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	1e5a      	subs	r2, r3, #1
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	691a      	ldr	r2, [r3, #16]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	7a5b      	ldrb	r3, [r3, #9]
 8007f0e:	f003 030c 	and.w	r3, r3, #12
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	7a1a      	ldrb	r2, [r3, #8]
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007f20:	4b2e      	ldr	r3, [pc, #184]	@ (8007fdc <tcp_listen_input+0x1f4>)
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	60da      	str	r2, [r3, #12]
 8007f28:	4a2c      	ldr	r2, [pc, #176]	@ (8007fdc <tcp_listen_input+0x1f4>)
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	f003 f8cb 	bl	800b0c8 <tcp_timer_needed>
 8007f32:	4b2b      	ldr	r3, [pc, #172]	@ (8007fe0 <tcp_listen_input+0x1f8>)
 8007f34:	2201      	movs	r2, #1
 8007f36:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007f38:	6978      	ldr	r0, [r7, #20]
 8007f3a:	f001 fd8b 	bl	8009a54 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007f3e:	4b23      	ldr	r3, [pc, #140]	@ (8007fcc <tcp_listen_input+0x1e4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	89db      	ldrh	r3, [r3, #14]
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	4618      	mov	r0, r3
 8007f62:	f004 fc73 	bl	800c84c <ip4_route>
 8007f66:	4601      	mov	r1, r0
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f7ff fa30 	bl	80073d4 <tcp_eff_send_mss_netif>
 8007f74:	4603      	mov	r3, r0
 8007f76:	461a      	mov	r2, r3
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007f7c:	2112      	movs	r1, #18
 8007f7e:	6978      	ldr	r0, [r7, #20]
 8007f80:	f002 f83e 	bl	800a000 <tcp_enqueue_flags>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d004      	beq.n	8007f9a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007f90:	2100      	movs	r1, #0
 8007f92:	6978      	ldr	r0, [r7, #20]
 8007f94:	f7fe f97c 	bl	8006290 <tcp_abandon>
      return;
 8007f98:	e006      	b.n	8007fa8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007f9a:	6978      	ldr	r0, [r7, #20]
 8007f9c:	f002 f91e 	bl	800a1dc <tcp_output>
  return;
 8007fa0:	e001      	b.n	8007fa6 <tcp_listen_input+0x1be>
    return;
 8007fa2:	bf00      	nop
 8007fa4:	e000      	b.n	8007fa8 <tcp_listen_input+0x1c0>
  return;
 8007fa6:	bf00      	nop
}
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd90      	pop	{r4, r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	24007bb0 	.word	0x24007bb0
 8007fb4:	0800fe84 	.word	0x0800fe84
 8007fb8:	0801007c 	.word	0x0801007c
 8007fbc:	0800fed0 	.word	0x0800fed0
 8007fc0:	24007ba8 	.word	0x24007ba8
 8007fc4:	24007bae 	.word	0x24007bae
 8007fc8:	24007ba4 	.word	0x24007ba4
 8007fcc:	24007b94 	.word	0x24007b94
 8007fd0:	24004c60 	.word	0x24004c60
 8007fd4:	24004c64 	.word	0x24004c64
 8007fd8:	24004c50 	.word	0x24004c50
 8007fdc:	24007b78 	.word	0x24007b78
 8007fe0:	24007b80 	.word	0x24007b80

08007fe4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af04      	add	r7, sp, #16
 8007fea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007fec:	4b2f      	ldr	r3, [pc, #188]	@ (80080ac <tcp_timewait_input+0xc8>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d153      	bne.n	80080a0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d106      	bne.n	800800c <tcp_timewait_input+0x28>
 8007ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80080b0 <tcp_timewait_input+0xcc>)
 8008000:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8008004:	492b      	ldr	r1, [pc, #172]	@ (80080b4 <tcp_timewait_input+0xd0>)
 8008006:	482c      	ldr	r0, [pc, #176]	@ (80080b8 <tcp_timewait_input+0xd4>)
 8008008:	f005 ff0c 	bl	800de24 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800800c:	4b27      	ldr	r3, [pc, #156]	@ (80080ac <tcp_timewait_input+0xc8>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d02a      	beq.n	800806e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008018:	4b28      	ldr	r3, [pc, #160]	@ (80080bc <tcp_timewait_input+0xd8>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	db2d      	blt.n	8008082 <tcp_timewait_input+0x9e>
 8008026:	4b25      	ldr	r3, [pc, #148]	@ (80080bc <tcp_timewait_input+0xd8>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008032:	440b      	add	r3, r1
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	dc23      	bgt.n	8008082 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800803a:	4b21      	ldr	r3, [pc, #132]	@ (80080c0 <tcp_timewait_input+0xdc>)
 800803c:	6819      	ldr	r1, [r3, #0]
 800803e:	4b21      	ldr	r3, [pc, #132]	@ (80080c4 <tcp_timewait_input+0xe0>)
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	4b1d      	ldr	r3, [pc, #116]	@ (80080bc <tcp_timewait_input+0xd8>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800804a:	4b1f      	ldr	r3, [pc, #124]	@ (80080c8 <tcp_timewait_input+0xe4>)
 800804c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800804e:	885b      	ldrh	r3, [r3, #2]
 8008050:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008052:	4a1d      	ldr	r2, [pc, #116]	@ (80080c8 <tcp_timewait_input+0xe4>)
 8008054:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008056:	8812      	ldrh	r2, [r2, #0]
 8008058:	b292      	uxth	r2, r2
 800805a:	9202      	str	r2, [sp, #8]
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	4b1b      	ldr	r3, [pc, #108]	@ (80080cc <tcp_timewait_input+0xe8>)
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	4b1b      	ldr	r3, [pc, #108]	@ (80080d0 <tcp_timewait_input+0xec>)
 8008064:	4602      	mov	r2, r0
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f002 fe6c 	bl	800ad44 <tcp_rst>
      return;
 800806c:	e01b      	b.n	80080a6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800806e:	4b0f      	ldr	r3, [pc, #60]	@ (80080ac <tcp_timewait_input+0xc8>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800807a:	4b16      	ldr	r3, [pc, #88]	@ (80080d4 <tcp_timewait_input+0xf0>)
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008082:	4b10      	ldr	r3, [pc, #64]	@ (80080c4 <tcp_timewait_input+0xe0>)
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00c      	beq.n	80080a4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	8b5b      	ldrh	r3, [r3, #26]
 800808e:	f043 0302 	orr.w	r3, r3, #2
 8008092:	b29a      	uxth	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f002 f89f 	bl	800a1dc <tcp_output>
  }
  return;
 800809e:	e001      	b.n	80080a4 <tcp_timewait_input+0xc0>
    return;
 80080a0:	bf00      	nop
 80080a2:	e000      	b.n	80080a6 <tcp_timewait_input+0xc2>
  return;
 80080a4:	bf00      	nop
}
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	24007bb0 	.word	0x24007bb0
 80080b0:	0800fe84 	.word	0x0800fe84
 80080b4:	0801009c 	.word	0x0801009c
 80080b8:	0800fed0 	.word	0x0800fed0
 80080bc:	24007ba4 	.word	0x24007ba4
 80080c0:	24007ba8 	.word	0x24007ba8
 80080c4:	24007bae 	.word	0x24007bae
 80080c8:	24007b94 	.word	0x24007b94
 80080cc:	24004c60 	.word	0x24004c60
 80080d0:	24004c64 	.word	0x24004c64
 80080d4:	24007b6c 	.word	0x24007b6c

080080d8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80080d8:	b590      	push	{r4, r7, lr}
 80080da:	b08d      	sub	sp, #52	@ 0x34
 80080dc:	af04      	add	r7, sp, #16
 80080de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <tcp_process+0x24>
 80080ee:	4b9d      	ldr	r3, [pc, #628]	@ (8008364 <tcp_process+0x28c>)
 80080f0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80080f4:	499c      	ldr	r1, [pc, #624]	@ (8008368 <tcp_process+0x290>)
 80080f6:	489d      	ldr	r0, [pc, #628]	@ (800836c <tcp_process+0x294>)
 80080f8:	f005 fe94 	bl	800de24 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80080fc:	4b9c      	ldr	r3, [pc, #624]	@ (8008370 <tcp_process+0x298>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	f003 0304 	and.w	r3, r3, #4
 8008104:	2b00      	cmp	r3, #0
 8008106:	d04e      	beq.n	80081a6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	7d1b      	ldrb	r3, [r3, #20]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d108      	bne.n	8008122 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008114:	4b97      	ldr	r3, [pc, #604]	@ (8008374 <tcp_process+0x29c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d123      	bne.n	8008164 <tcp_process+0x8c>
        acceptable = 1;
 800811c:	2301      	movs	r3, #1
 800811e:	76fb      	strb	r3, [r7, #27]
 8008120:	e020      	b.n	8008164 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008126:	4b94      	ldr	r3, [pc, #592]	@ (8008378 <tcp_process+0x2a0>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d102      	bne.n	8008134 <tcp_process+0x5c>
        acceptable = 1;
 800812e:	2301      	movs	r3, #1
 8008130:	76fb      	strb	r3, [r7, #27]
 8008132:	e017      	b.n	8008164 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008134:	4b90      	ldr	r3, [pc, #576]	@ (8008378 <tcp_process+0x2a0>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	db10      	blt.n	8008164 <tcp_process+0x8c>
 8008142:	4b8d      	ldr	r3, [pc, #564]	@ (8008378 <tcp_process+0x2a0>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800814e:	440b      	add	r3, r1
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	dc06      	bgt.n	8008164 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	8b5b      	ldrh	r3, [r3, #26]
 800815a:	f043 0302 	orr.w	r3, r3, #2
 800815e:	b29a      	uxth	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008164:	7efb      	ldrb	r3, [r7, #27]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d01b      	beq.n	80081a2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	7d1b      	ldrb	r3, [r3, #20]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d106      	bne.n	8008180 <tcp_process+0xa8>
 8008172:	4b7c      	ldr	r3, [pc, #496]	@ (8008364 <tcp_process+0x28c>)
 8008174:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8008178:	4980      	ldr	r1, [pc, #512]	@ (800837c <tcp_process+0x2a4>)
 800817a:	487c      	ldr	r0, [pc, #496]	@ (800836c <tcp_process+0x294>)
 800817c:	f005 fe52 	bl	800de24 <iprintf>
      recv_flags |= TF_RESET;
 8008180:	4b7f      	ldr	r3, [pc, #508]	@ (8008380 <tcp_process+0x2a8>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	f043 0308 	orr.w	r3, r3, #8
 8008188:	b2da      	uxtb	r2, r3
 800818a:	4b7d      	ldr	r3, [pc, #500]	@ (8008380 <tcp_process+0x2a8>)
 800818c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	8b5b      	ldrh	r3, [r3, #26]
 8008192:	f023 0301 	bic.w	r3, r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800819c:	f06f 030d 	mvn.w	r3, #13
 80081a0:	e37a      	b.n	8008898 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e378      	b.n	8008898 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80081a6:	4b72      	ldr	r3, [pc, #456]	@ (8008370 <tcp_process+0x298>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d010      	beq.n	80081d4 <tcp_process+0xfc>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	7d1b      	ldrb	r3, [r3, #20]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d00c      	beq.n	80081d4 <tcp_process+0xfc>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	7d1b      	ldrb	r3, [r3, #20]
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d008      	beq.n	80081d4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	8b5b      	ldrh	r3, [r3, #26]
 80081c6:	f043 0302 	orr.w	r3, r3, #2
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	e361      	b.n	8008898 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	8b5b      	ldrh	r3, [r3, #26]
 80081d8:	f003 0310 	and.w	r3, r3, #16
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d103      	bne.n	80081e8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80081e0:	4b68      	ldr	r3, [pc, #416]	@ (8008384 <tcp_process+0x2ac>)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 fc2b 	bl	8009a54 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	7d1b      	ldrb	r3, [r3, #20]
 8008202:	3b02      	subs	r3, #2
 8008204:	2b07      	cmp	r3, #7
 8008206:	f200 8337 	bhi.w	8008878 <tcp_process+0x7a0>
 800820a:	a201      	add	r2, pc, #4	@ (adr r2, 8008210 <tcp_process+0x138>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008231 	.word	0x08008231
 8008214:	08008461 	.word	0x08008461
 8008218:	080085d9 	.word	0x080085d9
 800821c:	08008603 	.word	0x08008603
 8008220:	08008727 	.word	0x08008727
 8008224:	080085d9 	.word	0x080085d9
 8008228:	080087b3 	.word	0x080087b3
 800822c:	08008843 	.word	0x08008843
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008230:	4b4f      	ldr	r3, [pc, #316]	@ (8008370 <tcp_process+0x298>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	f003 0310 	and.w	r3, r3, #16
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 80e4 	beq.w	8008406 <tcp_process+0x32e>
 800823e:	4b4c      	ldr	r3, [pc, #304]	@ (8008370 <tcp_process+0x298>)
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 80dd 	beq.w	8008406 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	4b48      	ldr	r3, [pc, #288]	@ (8008374 <tcp_process+0x29c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	f040 80d5 	bne.w	8008406 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800825c:	4b46      	ldr	r3, [pc, #280]	@ (8008378 <tcp_process+0x2a0>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800826e:	4b41      	ldr	r3, [pc, #260]	@ (8008374 <tcp_process+0x29c>)
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008276:	4b44      	ldr	r3, [pc, #272]	@ (8008388 <tcp_process+0x2b0>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	89db      	ldrh	r3, [r3, #14]
 800827c:	b29a      	uxth	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008290:	4b39      	ldr	r3, [pc, #228]	@ (8008378 <tcp_process+0x2a0>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	1e5a      	subs	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2204      	movs	r2, #4
 800829e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3304      	adds	r3, #4
 80082a8:	4618      	mov	r0, r3
 80082aa:	f004 facf 	bl	800c84c <ip4_route>
 80082ae:	4601      	mov	r1, r0
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3304      	adds	r3, #4
 80082b4:	461a      	mov	r2, r3
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7ff f88c 	bl	80073d4 <tcp_eff_send_mss_netif>
 80082bc:	4603      	mov	r3, r0
 80082be:	461a      	mov	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80082c8:	009a      	lsls	r2, r3, #2
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80082ce:	005b      	lsls	r3, r3, #1
 80082d0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80082d4:	428b      	cmp	r3, r1
 80082d6:	bf38      	it	cc
 80082d8:	460b      	movcc	r3, r1
 80082da:	429a      	cmp	r2, r3
 80082dc:	d204      	bcs.n	80082e8 <tcp_process+0x210>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	e00d      	b.n	8008304 <tcp_process+0x22c>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	f241 121c 	movw	r2, #4380	@ 0x111c
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d904      	bls.n	8008300 <tcp_process+0x228>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	e001      	b.n	8008304 <tcp_process+0x22c>
 8008300:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008310:	2b00      	cmp	r3, #0
 8008312:	d106      	bne.n	8008322 <tcp_process+0x24a>
 8008314:	4b13      	ldr	r3, [pc, #76]	@ (8008364 <tcp_process+0x28c>)
 8008316:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800831a:	491c      	ldr	r1, [pc, #112]	@ (800838c <tcp_process+0x2b4>)
 800831c:	4813      	ldr	r0, [pc, #76]	@ (800836c <tcp_process+0x294>)
 800831e:	f005 fd81 	bl	800de24 <iprintf>
        --pcb->snd_queuelen;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008328:	3b01      	subs	r3, #1
 800832a:	b29a      	uxth	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008336:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d12a      	bne.n	8008394 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008342:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d106      	bne.n	8008358 <tcp_process+0x280>
 800834a:	4b06      	ldr	r3, [pc, #24]	@ (8008364 <tcp_process+0x28c>)
 800834c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8008350:	490f      	ldr	r1, [pc, #60]	@ (8008390 <tcp_process+0x2b8>)
 8008352:	4806      	ldr	r0, [pc, #24]	@ (800836c <tcp_process+0x294>)
 8008354:	f005 fd66 	bl	800de24 <iprintf>
          pcb->unsent = rseg->next;
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008360:	e01c      	b.n	800839c <tcp_process+0x2c4>
 8008362:	bf00      	nop
 8008364:	0800fe84 	.word	0x0800fe84
 8008368:	080100bc 	.word	0x080100bc
 800836c:	0800fed0 	.word	0x0800fed0
 8008370:	24007bb0 	.word	0x24007bb0
 8008374:	24007ba8 	.word	0x24007ba8
 8008378:	24007ba4 	.word	0x24007ba4
 800837c:	080100d8 	.word	0x080100d8
 8008380:	24007bb1 	.word	0x24007bb1
 8008384:	24007b6c 	.word	0x24007b6c
 8008388:	24007b94 	.word	0x24007b94
 800838c:	080100f8 	.word	0x080100f8
 8008390:	08010110 	.word	0x08010110
        } else {
          pcb->unacked = rseg->next;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800839c:	69f8      	ldr	r0, [r7, #28]
 800839e:	f7fe fd22 	bl	8006de6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d104      	bne.n	80083b4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80083b0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80083b2:	e006      	b.n	80083c2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00a      	beq.n	80083e2 <tcp_process+0x30a>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	6910      	ldr	r0, [r2, #16]
 80083d6:	2200      	movs	r2, #0
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4798      	blx	r3
 80083dc:	4603      	mov	r3, r0
 80083de:	76bb      	strb	r3, [r7, #26]
 80083e0:	e001      	b.n	80083e6 <tcp_process+0x30e>
 80083e2:	2300      	movs	r3, #0
 80083e4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80083e6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80083ea:	f113 0f0d 	cmn.w	r3, #13
 80083ee:	d102      	bne.n	80083f6 <tcp_process+0x31e>
          return ERR_ABRT;
 80083f0:	f06f 030c 	mvn.w	r3, #12
 80083f4:	e250      	b.n	8008898 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	8b5b      	ldrh	r3, [r3, #26]
 80083fa:	f043 0302 	orr.w	r3, r3, #2
 80083fe:	b29a      	uxth	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008404:	e23a      	b.n	800887c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008406:	4b98      	ldr	r3, [pc, #608]	@ (8008668 <tcp_process+0x590>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	f003 0310 	and.w	r3, r3, #16
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 8234 	beq.w	800887c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008414:	4b95      	ldr	r3, [pc, #596]	@ (800866c <tcp_process+0x594>)
 8008416:	6819      	ldr	r1, [r3, #0]
 8008418:	4b95      	ldr	r3, [pc, #596]	@ (8008670 <tcp_process+0x598>)
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	4b95      	ldr	r3, [pc, #596]	@ (8008674 <tcp_process+0x59c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008424:	4b94      	ldr	r3, [pc, #592]	@ (8008678 <tcp_process+0x5a0>)
 8008426:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008428:	885b      	ldrh	r3, [r3, #2]
 800842a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800842c:	4a92      	ldr	r2, [pc, #584]	@ (8008678 <tcp_process+0x5a0>)
 800842e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008430:	8812      	ldrh	r2, [r2, #0]
 8008432:	b292      	uxth	r2, r2
 8008434:	9202      	str	r2, [sp, #8]
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	4b90      	ldr	r3, [pc, #576]	@ (800867c <tcp_process+0x5a4>)
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	4b90      	ldr	r3, [pc, #576]	@ (8008680 <tcp_process+0x5a8>)
 800843e:	4602      	mov	r2, r0
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f002 fc7f 	bl	800ad44 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800844c:	2b05      	cmp	r3, #5
 800844e:	f200 8215 	bhi.w	800887c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f002 fa4b 	bl	800a8f4 <tcp_rexmit_rto>
      break;
 800845e:	e20d      	b.n	800887c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008460:	4b81      	ldr	r3, [pc, #516]	@ (8008668 <tcp_process+0x590>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f003 0310 	and.w	r3, r3, #16
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 80a1 	beq.w	80085b0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800846e:	4b7f      	ldr	r3, [pc, #508]	@ (800866c <tcp_process+0x594>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	3b01      	subs	r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	db7e      	blt.n	800857c <tcp_process+0x4a4>
 800847e:	4b7b      	ldr	r3, [pc, #492]	@ (800866c <tcp_process+0x594>)
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	dc77      	bgt.n	800857c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2204      	movs	r2, #4
 8008490:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d102      	bne.n	80084a0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800849a:	23fa      	movs	r3, #250	@ 0xfa
 800849c:	76bb      	strb	r3, [r7, #26]
 800849e:	e01d      	b.n	80084dc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <tcp_process+0x3e0>
 80084aa:	4b76      	ldr	r3, [pc, #472]	@ (8008684 <tcp_process+0x5ac>)
 80084ac:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80084b0:	4975      	ldr	r1, [pc, #468]	@ (8008688 <tcp_process+0x5b0>)
 80084b2:	4876      	ldr	r0, [pc, #472]	@ (800868c <tcp_process+0x5b4>)
 80084b4:	f005 fcb6 	bl	800de24 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <tcp_process+0x400>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	6910      	ldr	r0, [r2, #16]
 80084cc:	2200      	movs	r2, #0
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	4798      	blx	r3
 80084d2:	4603      	mov	r3, r0
 80084d4:	76bb      	strb	r3, [r7, #26]
 80084d6:	e001      	b.n	80084dc <tcp_process+0x404>
 80084d8:	23f0      	movs	r3, #240	@ 0xf0
 80084da:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80084dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80084e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80084e8:	f113 0f0d 	cmn.w	r3, #13
 80084ec:	d002      	beq.n	80084f4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7fd ff8c 	bl	800640c <tcp_abort>
            }
            return ERR_ABRT;
 80084f4:	f06f 030c 	mvn.w	r3, #12
 80084f8:	e1ce      	b.n	8008898 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fae0 	bl	8008ac0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008500:	4b63      	ldr	r3, [pc, #396]	@ (8008690 <tcp_process+0x5b8>)
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d005      	beq.n	8008514 <tcp_process+0x43c>
            recv_acked--;
 8008508:	4b61      	ldr	r3, [pc, #388]	@ (8008690 <tcp_process+0x5b8>)
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	4b5f      	ldr	r3, [pc, #380]	@ (8008690 <tcp_process+0x5b8>)
 8008512:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008518:	009a      	lsls	r2, r3, #2
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008524:	428b      	cmp	r3, r1
 8008526:	bf38      	it	cc
 8008528:	460b      	movcc	r3, r1
 800852a:	429a      	cmp	r2, r3
 800852c:	d204      	bcs.n	8008538 <tcp_process+0x460>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	b29b      	uxth	r3, r3
 8008536:	e00d      	b.n	8008554 <tcp_process+0x47c>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008542:	4293      	cmp	r3, r2
 8008544:	d904      	bls.n	8008550 <tcp_process+0x478>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800854a:	005b      	lsls	r3, r3, #1
 800854c:	b29b      	uxth	r3, r3
 800854e:	e001      	b.n	8008554 <tcp_process+0x47c>
 8008550:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800855a:	4b4e      	ldr	r3, [pc, #312]	@ (8008694 <tcp_process+0x5bc>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	f003 0320 	and.w	r3, r3, #32
 8008562:	2b00      	cmp	r3, #0
 8008564:	d037      	beq.n	80085d6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	8b5b      	ldrh	r3, [r3, #26]
 800856a:	f043 0302 	orr.w	r3, r3, #2
 800856e:	b29a      	uxth	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2207      	movs	r2, #7
 8008578:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800857a:	e02c      	b.n	80085d6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800857c:	4b3b      	ldr	r3, [pc, #236]	@ (800866c <tcp_process+0x594>)
 800857e:	6819      	ldr	r1, [r3, #0]
 8008580:	4b3b      	ldr	r3, [pc, #236]	@ (8008670 <tcp_process+0x598>)
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	4b3b      	ldr	r3, [pc, #236]	@ (8008674 <tcp_process+0x59c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800858c:	4b3a      	ldr	r3, [pc, #232]	@ (8008678 <tcp_process+0x5a0>)
 800858e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008590:	885b      	ldrh	r3, [r3, #2]
 8008592:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008594:	4a38      	ldr	r2, [pc, #224]	@ (8008678 <tcp_process+0x5a0>)
 8008596:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008598:	8812      	ldrh	r2, [r2, #0]
 800859a:	b292      	uxth	r2, r2
 800859c:	9202      	str	r2, [sp, #8]
 800859e:	9301      	str	r3, [sp, #4]
 80085a0:	4b36      	ldr	r3, [pc, #216]	@ (800867c <tcp_process+0x5a4>)
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	4b36      	ldr	r3, [pc, #216]	@ (8008680 <tcp_process+0x5a8>)
 80085a6:	4602      	mov	r2, r0
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f002 fbcb 	bl	800ad44 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80085ae:	e167      	b.n	8008880 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80085b0:	4b2d      	ldr	r3, [pc, #180]	@ (8008668 <tcp_process+0x590>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8161 	beq.w	8008880 <tcp_process+0x7a8>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c2:	1e5a      	subs	r2, r3, #1
 80085c4:	4b2b      	ldr	r3, [pc, #172]	@ (8008674 <tcp_process+0x59c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	f040 8159 	bne.w	8008880 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f002 f9b2 	bl	800a938 <tcp_rexmit>
      break;
 80085d4:	e154      	b.n	8008880 <tcp_process+0x7a8>
 80085d6:	e153      	b.n	8008880 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fa71 	bl	8008ac0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80085de:	4b2d      	ldr	r3, [pc, #180]	@ (8008694 <tcp_process+0x5bc>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	f003 0320 	and.w	r3, r3, #32
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 814c 	beq.w	8008884 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	8b5b      	ldrh	r3, [r3, #26]
 80085f0:	f043 0302 	orr.w	r3, r3, #2
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2207      	movs	r2, #7
 80085fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008600:	e140      	b.n	8008884 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa5c 	bl	8008ac0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008608:	4b22      	ldr	r3, [pc, #136]	@ (8008694 <tcp_process+0x5bc>)
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	f003 0320 	and.w	r3, r3, #32
 8008610:	2b00      	cmp	r3, #0
 8008612:	d071      	beq.n	80086f8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008614:	4b14      	ldr	r3, [pc, #80]	@ (8008668 <tcp_process+0x590>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2b00      	cmp	r3, #0
 800861e:	d060      	beq.n	80086e2 <tcp_process+0x60a>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008624:	4b11      	ldr	r3, [pc, #68]	@ (800866c <tcp_process+0x594>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d15a      	bne.n	80086e2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008630:	2b00      	cmp	r3, #0
 8008632:	d156      	bne.n	80086e2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	8b5b      	ldrh	r3, [r3, #26]
 8008638:	f043 0302 	orr.w	r3, r3, #2
 800863c:	b29a      	uxth	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7fe fdbc 	bl	80071c0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008648:	4b13      	ldr	r3, [pc, #76]	@ (8008698 <tcp_process+0x5c0>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	429a      	cmp	r2, r3
 8008650:	d105      	bne.n	800865e <tcp_process+0x586>
 8008652:	4b11      	ldr	r3, [pc, #68]	@ (8008698 <tcp_process+0x5c0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	4a0f      	ldr	r2, [pc, #60]	@ (8008698 <tcp_process+0x5c0>)
 800865a:	6013      	str	r3, [r2, #0]
 800865c:	e02e      	b.n	80086bc <tcp_process+0x5e4>
 800865e:	4b0e      	ldr	r3, [pc, #56]	@ (8008698 <tcp_process+0x5c0>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	e027      	b.n	80086b6 <tcp_process+0x5de>
 8008666:	bf00      	nop
 8008668:	24007bb0 	.word	0x24007bb0
 800866c:	24007ba8 	.word	0x24007ba8
 8008670:	24007bae 	.word	0x24007bae
 8008674:	24007ba4 	.word	0x24007ba4
 8008678:	24007b94 	.word	0x24007b94
 800867c:	24004c60 	.word	0x24004c60
 8008680:	24004c64 	.word	0x24004c64
 8008684:	0800fe84 	.word	0x0800fe84
 8008688:	08010124 	.word	0x08010124
 800868c:	0800fed0 	.word	0x0800fed0
 8008690:	24007bac 	.word	0x24007bac
 8008694:	24007bb1 	.word	0x24007bb1
 8008698:	24007b78 	.word	0x24007b78
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d104      	bne.n	80086b0 <tcp_process+0x5d8>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	60da      	str	r2, [r3, #12]
 80086ae:	e005      	b.n	80086bc <tcp_process+0x5e4>
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	617b      	str	r3, [r7, #20]
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1ef      	bne.n	800869c <tcp_process+0x5c4>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	60da      	str	r2, [r3, #12]
 80086c2:	4b77      	ldr	r3, [pc, #476]	@ (80088a0 <tcp_process+0x7c8>)
 80086c4:	2201      	movs	r2, #1
 80086c6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	220a      	movs	r2, #10
 80086cc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80086ce:	4b75      	ldr	r3, [pc, #468]	@ (80088a4 <tcp_process+0x7cc>)
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60da      	str	r2, [r3, #12]
 80086d6:	4a73      	ldr	r2, [pc, #460]	@ (80088a4 <tcp_process+0x7cc>)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	f002 fcf4 	bl	800b0c8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80086e0:	e0d2      	b.n	8008888 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	8b5b      	ldrh	r3, [r3, #26]
 80086e6:	f043 0302 	orr.w	r3, r3, #2
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2208      	movs	r2, #8
 80086f4:	751a      	strb	r2, [r3, #20]
      break;
 80086f6:	e0c7      	b.n	8008888 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80086f8:	4b6b      	ldr	r3, [pc, #428]	@ (80088a8 <tcp_process+0x7d0>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	f003 0310 	and.w	r3, r3, #16
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 80c1 	beq.w	8008888 <tcp_process+0x7b0>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800870a:	4b68      	ldr	r3, [pc, #416]	@ (80088ac <tcp_process+0x7d4>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	429a      	cmp	r2, r3
 8008710:	f040 80ba 	bne.w	8008888 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008718:	2b00      	cmp	r3, #0
 800871a:	f040 80b5 	bne.w	8008888 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2206      	movs	r2, #6
 8008722:	751a      	strb	r2, [r3, #20]
      break;
 8008724:	e0b0      	b.n	8008888 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f9ca 	bl	8008ac0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800872c:	4b60      	ldr	r3, [pc, #384]	@ (80088b0 <tcp_process+0x7d8>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	f003 0320 	and.w	r3, r3, #32
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 80a9 	beq.w	800888c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	8b5b      	ldrh	r3, [r3, #26]
 800873e:	f043 0302 	orr.w	r3, r3, #2
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7fe fd39 	bl	80071c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800874e:	4b59      	ldr	r3, [pc, #356]	@ (80088b4 <tcp_process+0x7dc>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	429a      	cmp	r2, r3
 8008756:	d105      	bne.n	8008764 <tcp_process+0x68c>
 8008758:	4b56      	ldr	r3, [pc, #344]	@ (80088b4 <tcp_process+0x7dc>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	4a55      	ldr	r2, [pc, #340]	@ (80088b4 <tcp_process+0x7dc>)
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	e013      	b.n	800878c <tcp_process+0x6b4>
 8008764:	4b53      	ldr	r3, [pc, #332]	@ (80088b4 <tcp_process+0x7dc>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	e00c      	b.n	8008786 <tcp_process+0x6ae>
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	429a      	cmp	r2, r3
 8008774:	d104      	bne.n	8008780 <tcp_process+0x6a8>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	60da      	str	r2, [r3, #12]
 800877e:	e005      	b.n	800878c <tcp_process+0x6b4>
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1ef      	bne.n	800876c <tcp_process+0x694>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	60da      	str	r2, [r3, #12]
 8008792:	4b43      	ldr	r3, [pc, #268]	@ (80088a0 <tcp_process+0x7c8>)
 8008794:	2201      	movs	r2, #1
 8008796:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	220a      	movs	r2, #10
 800879c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800879e:	4b41      	ldr	r3, [pc, #260]	@ (80088a4 <tcp_process+0x7cc>)
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	60da      	str	r2, [r3, #12]
 80087a6:	4a3f      	ldr	r2, [pc, #252]	@ (80088a4 <tcp_process+0x7cc>)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	f002 fc8c 	bl	800b0c8 <tcp_timer_needed>
      }
      break;
 80087b0:	e06c      	b.n	800888c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f984 	bl	8008ac0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80087b8:	4b3b      	ldr	r3, [pc, #236]	@ (80088a8 <tcp_process+0x7d0>)
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	f003 0310 	and.w	r3, r3, #16
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d065      	beq.n	8008890 <tcp_process+0x7b8>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087c8:	4b38      	ldr	r3, [pc, #224]	@ (80088ac <tcp_process+0x7d4>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d15f      	bne.n	8008890 <tcp_process+0x7b8>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d15b      	bne.n	8008890 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7fe fcf1 	bl	80071c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80087de:	4b35      	ldr	r3, [pc, #212]	@ (80088b4 <tcp_process+0x7dc>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d105      	bne.n	80087f4 <tcp_process+0x71c>
 80087e8:	4b32      	ldr	r3, [pc, #200]	@ (80088b4 <tcp_process+0x7dc>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	4a31      	ldr	r2, [pc, #196]	@ (80088b4 <tcp_process+0x7dc>)
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	e013      	b.n	800881c <tcp_process+0x744>
 80087f4:	4b2f      	ldr	r3, [pc, #188]	@ (80088b4 <tcp_process+0x7dc>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	e00c      	b.n	8008816 <tcp_process+0x73e>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	429a      	cmp	r2, r3
 8008804:	d104      	bne.n	8008810 <tcp_process+0x738>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	60da      	str	r2, [r3, #12]
 800880e:	e005      	b.n	800881c <tcp_process+0x744>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1ef      	bne.n	80087fc <tcp_process+0x724>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	60da      	str	r2, [r3, #12]
 8008822:	4b1f      	ldr	r3, [pc, #124]	@ (80088a0 <tcp_process+0x7c8>)
 8008824:	2201      	movs	r2, #1
 8008826:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	220a      	movs	r2, #10
 800882c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800882e:	4b1d      	ldr	r3, [pc, #116]	@ (80088a4 <tcp_process+0x7cc>)
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60da      	str	r2, [r3, #12]
 8008836:	4a1b      	ldr	r2, [pc, #108]	@ (80088a4 <tcp_process+0x7cc>)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	f002 fc44 	bl	800b0c8 <tcp_timer_needed>
      }
      break;
 8008840:	e026      	b.n	8008890 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f93c 	bl	8008ac0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008848:	4b17      	ldr	r3, [pc, #92]	@ (80088a8 <tcp_process+0x7d0>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	f003 0310 	and.w	r3, r3, #16
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01f      	beq.n	8008894 <tcp_process+0x7bc>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008858:	4b14      	ldr	r3, [pc, #80]	@ (80088ac <tcp_process+0x7d4>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	429a      	cmp	r2, r3
 800885e:	d119      	bne.n	8008894 <tcp_process+0x7bc>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008864:	2b00      	cmp	r3, #0
 8008866:	d115      	bne.n	8008894 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008868:	4b11      	ldr	r3, [pc, #68]	@ (80088b0 <tcp_process+0x7d8>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	f043 0310 	orr.w	r3, r3, #16
 8008870:	b2da      	uxtb	r2, r3
 8008872:	4b0f      	ldr	r3, [pc, #60]	@ (80088b0 <tcp_process+0x7d8>)
 8008874:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008876:	e00d      	b.n	8008894 <tcp_process+0x7bc>
    default:
      break;
 8008878:	bf00      	nop
 800887a:	e00c      	b.n	8008896 <tcp_process+0x7be>
      break;
 800887c:	bf00      	nop
 800887e:	e00a      	b.n	8008896 <tcp_process+0x7be>
      break;
 8008880:	bf00      	nop
 8008882:	e008      	b.n	8008896 <tcp_process+0x7be>
      break;
 8008884:	bf00      	nop
 8008886:	e006      	b.n	8008896 <tcp_process+0x7be>
      break;
 8008888:	bf00      	nop
 800888a:	e004      	b.n	8008896 <tcp_process+0x7be>
      break;
 800888c:	bf00      	nop
 800888e:	e002      	b.n	8008896 <tcp_process+0x7be>
      break;
 8008890:	bf00      	nop
 8008892:	e000      	b.n	8008896 <tcp_process+0x7be>
      break;
 8008894:	bf00      	nop
  }
  return ERR_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3724      	adds	r7, #36	@ 0x24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd90      	pop	{r4, r7, pc}
 80088a0:	24007b80 	.word	0x24007b80
 80088a4:	24007b7c 	.word	0x24007b7c
 80088a8:	24007bb0 	.word	0x24007bb0
 80088ac:	24007ba8 	.word	0x24007ba8
 80088b0:	24007bb1 	.word	0x24007bb1
 80088b4:	24007b78 	.word	0x24007b78

080088b8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80088b8:	b590      	push	{r4, r7, lr}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <tcp_oos_insert_segment+0x1e>
 80088c8:	4b3b      	ldr	r3, [pc, #236]	@ (80089b8 <tcp_oos_insert_segment+0x100>)
 80088ca:	f240 421f 	movw	r2, #1055	@ 0x41f
 80088ce:	493b      	ldr	r1, [pc, #236]	@ (80089bc <tcp_oos_insert_segment+0x104>)
 80088d0:	483b      	ldr	r0, [pc, #236]	@ (80089c0 <tcp_oos_insert_segment+0x108>)
 80088d2:	f005 faa7 	bl	800de24 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	899b      	ldrh	r3, [r3, #12]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fb fc16 	bl	8004110 <lwip_htons>
 80088e4:	4603      	mov	r3, r0
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d028      	beq.n	8008942 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80088f0:	6838      	ldr	r0, [r7, #0]
 80088f2:	f7fe fa63 	bl	8006dbc <tcp_segs_free>
    next = NULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	603b      	str	r3, [r7, #0]
 80088fa:	e056      	b.n	80089aa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	899b      	ldrh	r3, [r3, #12]
 8008902:	b29b      	uxth	r3, r3
 8008904:	4618      	mov	r0, r3
 8008906:	f7fb fc03 	bl	8004110 <lwip_htons>
 800890a:	4603      	mov	r3, r0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00d      	beq.n	8008932 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	899b      	ldrh	r3, [r3, #12]
 800891c:	b29c      	uxth	r4, r3
 800891e:	2001      	movs	r0, #1
 8008920:	f7fb fbf6 	bl	8004110 <lwip_htons>
 8008924:	4603      	mov	r3, r0
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	4322      	orrs	r2, r4
 800892e:	b292      	uxth	r2, r2
 8008930:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f7fe fa52 	bl	8006de6 <tcp_seg_free>
    while (next &&
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00e      	beq.n	8008966 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	891b      	ldrh	r3, [r3, #8]
 800894c:	461a      	mov	r2, r3
 800894e:	4b1d      	ldr	r3, [pc, #116]	@ (80089c4 <tcp_oos_insert_segment+0x10c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	441a      	add	r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	8909      	ldrh	r1, [r1, #8]
 800895e:	440b      	add	r3, r1
 8008960:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008962:	2b00      	cmp	r3, #0
 8008964:	daca      	bge.n	80088fc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01e      	beq.n	80089aa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	891b      	ldrh	r3, [r3, #8]
 8008970:	461a      	mov	r2, r3
 8008972:	4b14      	ldr	r3, [pc, #80]	@ (80089c4 <tcp_oos_insert_segment+0x10c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	441a      	add	r2, r3
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008980:	2b00      	cmp	r3, #0
 8008982:	dd12      	ble.n	80089aa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	b29a      	uxth	r2, r3
 800898c:	4b0d      	ldr	r3, [pc, #52]	@ (80089c4 <tcp_oos_insert_segment+0x10c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	b29b      	uxth	r3, r3
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	b29a      	uxth	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	891b      	ldrh	r3, [r3, #8]
 80089a2:	4619      	mov	r1, r3
 80089a4:	4610      	mov	r0, r2
 80089a6:	f7fc fe23 	bl	80055f0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	601a      	str	r2, [r3, #0]
}
 80089b0:	bf00      	nop
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd90      	pop	{r4, r7, pc}
 80089b8:	0800fe84 	.word	0x0800fe84
 80089bc:	08010144 	.word	0x08010144
 80089c0:	0800fed0 	.word	0x0800fed0
 80089c4:	24007ba4 	.word	0x24007ba4

080089c8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80089c8:	b5b0      	push	{r4, r5, r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80089d6:	e03e      	b.n	8008a56 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fd f810 	bl	8005a0c <pbuf_clen>
 80089ec:	4603      	mov	r3, r0
 80089ee:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80089f6:	8a7a      	ldrh	r2, [r7, #18]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d906      	bls.n	8008a0a <tcp_free_acked_segments+0x42>
 80089fc:	4b2a      	ldr	r3, [pc, #168]	@ (8008aa8 <tcp_free_acked_segments+0xe0>)
 80089fe:	f240 4257 	movw	r2, #1111	@ 0x457
 8008a02:	492a      	ldr	r1, [pc, #168]	@ (8008aac <tcp_free_acked_segments+0xe4>)
 8008a04:	482a      	ldr	r0, [pc, #168]	@ (8008ab0 <tcp_free_acked_segments+0xe8>)
 8008a06:	f005 fa0d 	bl	800de24 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8008a10:	8a7b      	ldrh	r3, [r7, #18]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	891a      	ldrh	r2, [r3, #8]
 8008a20:	4b24      	ldr	r3, [pc, #144]	@ (8008ab4 <tcp_free_acked_segments+0xec>)
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	4413      	add	r3, r2
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	4b22      	ldr	r3, [pc, #136]	@ (8008ab4 <tcp_free_acked_segments+0xec>)
 8008a2a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008a2c:	6978      	ldr	r0, [r7, #20]
 8008a2e:	f7fe f9da 	bl	8006de6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00c      	beq.n	8008a56 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d109      	bne.n	8008a56 <tcp_free_acked_segments+0x8e>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d106      	bne.n	8008a56 <tcp_free_acked_segments+0x8e>
 8008a48:	4b17      	ldr	r3, [pc, #92]	@ (8008aa8 <tcp_free_acked_segments+0xe0>)
 8008a4a:	f240 4261 	movw	r2, #1121	@ 0x461
 8008a4e:	491a      	ldr	r1, [pc, #104]	@ (8008ab8 <tcp_free_acked_segments+0xf0>)
 8008a50:	4817      	ldr	r0, [pc, #92]	@ (8008ab0 <tcp_free_acked_segments+0xe8>)
 8008a52:	f005 f9e7 	bl	800de24 <iprintf>
  while (seg_list != NULL &&
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d020      	beq.n	8008a9e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fb fb69 	bl	800413a <lwip_htonl>
 8008a68:	4604      	mov	r4, r0
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	891b      	ldrh	r3, [r3, #8]
 8008a6e:	461d      	mov	r5, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	899b      	ldrh	r3, [r3, #12]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fb fb49 	bl	8004110 <lwip_htons>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	f003 0303 	and.w	r3, r3, #3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <tcp_free_acked_segments+0xc6>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e000      	b.n	8008a90 <tcp_free_acked_segments+0xc8>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	442b      	add	r3, r5
 8008a92:	18e2      	adds	r2, r4, r3
 8008a94:	4b09      	ldr	r3, [pc, #36]	@ (8008abc <tcp_free_acked_segments+0xf4>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dd9c      	ble.n	80089d8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8008aa8:	0800fe84 	.word	0x0800fe84
 8008aac:	0801016c 	.word	0x0801016c
 8008ab0:	0800fed0 	.word	0x0800fed0
 8008ab4:	24007bac 	.word	0x24007bac
 8008ab8:	08010194 	.word	0x08010194
 8008abc:	24007ba8 	.word	0x24007ba8

08008ac0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008ac0:	b5b0      	push	{r4, r5, r7, lr}
 8008ac2:	b094      	sub	sp, #80	@ 0x50
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <tcp_receive+0x20>
 8008ad2:	4b91      	ldr	r3, [pc, #580]	@ (8008d18 <tcp_receive+0x258>)
 8008ad4:	f240 427b 	movw	r2, #1147	@ 0x47b
 8008ad8:	4990      	ldr	r1, [pc, #576]	@ (8008d1c <tcp_receive+0x25c>)
 8008ada:	4891      	ldr	r0, [pc, #580]	@ (8008d20 <tcp_receive+0x260>)
 8008adc:	f005 f9a2 	bl	800de24 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	7d1b      	ldrb	r3, [r3, #20]
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d806      	bhi.n	8008af6 <tcp_receive+0x36>
 8008ae8:	4b8b      	ldr	r3, [pc, #556]	@ (8008d18 <tcp_receive+0x258>)
 8008aea:	f240 427c 	movw	r2, #1148	@ 0x47c
 8008aee:	498d      	ldr	r1, [pc, #564]	@ (8008d24 <tcp_receive+0x264>)
 8008af0:	488b      	ldr	r0, [pc, #556]	@ (8008d20 <tcp_receive+0x260>)
 8008af2:	f005 f997 	bl	800de24 <iprintf>

  if (flags & TCP_ACK) {
 8008af6:	4b8c      	ldr	r3, [pc, #560]	@ (8008d28 <tcp_receive+0x268>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	f003 0310 	and.w	r3, r3, #16
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 8264 	beq.w	8008fcc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b10:	4413      	add	r3, r2
 8008b12:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b18:	4b84      	ldr	r3, [pc, #528]	@ (8008d2c <tcp_receive+0x26c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	db1b      	blt.n	8008b5a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b26:	4b81      	ldr	r3, [pc, #516]	@ (8008d2c <tcp_receive+0x26c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d106      	bne.n	8008b3c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008b32:	4b7f      	ldr	r3, [pc, #508]	@ (8008d30 <tcp_receive+0x270>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	db0e      	blt.n	8008b5a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008b40:	4b7b      	ldr	r3, [pc, #492]	@ (8008d30 <tcp_receive+0x270>)
 8008b42:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d125      	bne.n	8008b94 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008b48:	4b7a      	ldr	r3, [pc, #488]	@ (8008d34 <tcp_receive+0x274>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	89db      	ldrh	r3, [r3, #14]
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d91c      	bls.n	8008b94 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008b5a:	4b76      	ldr	r3, [pc, #472]	@ (8008d34 <tcp_receive+0x274>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	89db      	ldrh	r3, [r3, #14]
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d205      	bcs.n	8008b84 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8008b84:	4b69      	ldr	r3, [pc, #420]	@ (8008d2c <tcp_receive+0x26c>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8008b8c:	4b68      	ldr	r3, [pc, #416]	@ (8008d30 <tcp_receive+0x270>)
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008b94:	4b66      	ldr	r3, [pc, #408]	@ (8008d30 <tcp_receive+0x270>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dc58      	bgt.n	8008c54 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008ba2:	4b65      	ldr	r3, [pc, #404]	@ (8008d38 <tcp_receive+0x278>)
 8008ba4:	881b      	ldrh	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d14b      	bne.n	8008c42 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8008bb4:	4413      	add	r3, r2
 8008bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d142      	bne.n	8008c42 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	db3d      	blt.n	8008c42 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bca:	4b59      	ldr	r3, [pc, #356]	@ (8008d30 <tcp_receive+0x270>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d137      	bne.n	8008c42 <tcp_receive+0x182>
              found_dupack = 1;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008bdc:	2bff      	cmp	r3, #255	@ 0xff
 8008bde:	d007      	beq.n	8008bf0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008be6:	3301      	adds	r3, #1
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d91b      	bls.n	8008c32 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008c04:	4413      	add	r3, r2
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d30a      	bcc.n	8008c28 <tcp_receive+0x168>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008c1c:	4413      	add	r3, r2
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008c26:	e004      	b.n	8008c32 <tcp_receive+0x172>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c2e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d902      	bls.n	8008c42 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 fee7 	bl	800aa10 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f040 8161 	bne.w	8008f0c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c52:	e15b      	b.n	8008f0c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008c54:	4b36      	ldr	r3, [pc, #216]	@ (8008d30 <tcp_receive+0x270>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f2c0 814e 	blt.w	8008f02 <tcp_receive+0x442>
 8008c66:	4b32      	ldr	r3, [pc, #200]	@ (8008d30 <tcp_receive+0x270>)
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f300 8146 	bgt.w	8008f02 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	8b5b      	ldrh	r3, [r3, #26]
 8008c7a:	f003 0304 	and.w	r3, r3, #4
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d010      	beq.n	8008ca4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	8b5b      	ldrh	r3, [r3, #26]
 8008c86:	f023 0304 	bic.w	r3, r3, #4
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008cb2:	10db      	asrs	r3, r3, #3
 8008cb4:	b21b      	sxth	r3, r3
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	4413      	add	r3, r2
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	b21a      	sxth	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008ccc:	4b18      	ldr	r3, [pc, #96]	@ (8008d30 <tcp_receive+0x270>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8008ce4:	4b12      	ldr	r3, [pc, #72]	@ (8008d30 <tcp_receive+0x270>)
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	7d1b      	ldrb	r3, [r3, #20]
 8008cf0:	2b03      	cmp	r3, #3
 8008cf2:	f240 8097 	bls.w	8008e24 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d245      	bcs.n	8008d92 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	8b5b      	ldrh	r3, [r3, #26]
 8008d0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d014      	beq.n	8008d3c <tcp_receive+0x27c>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e013      	b.n	8008d3e <tcp_receive+0x27e>
 8008d16:	bf00      	nop
 8008d18:	0800fe84 	.word	0x0800fe84
 8008d1c:	080101b4 	.word	0x080101b4
 8008d20:	0800fed0 	.word	0x0800fed0
 8008d24:	080101d0 	.word	0x080101d0
 8008d28:	24007bb0 	.word	0x24007bb0
 8008d2c:	24007ba4 	.word	0x24007ba4
 8008d30:	24007ba8 	.word	0x24007ba8
 8008d34:	24007b94 	.word	0x24007b94
 8008d38:	24007bae 	.word	0x24007bae
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008d42:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008d4c:	fb12 f303 	smulbb	r3, r2, r3
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008d54:	4293      	cmp	r3, r2
 8008d56:	bf28      	it	cs
 8008d58:	4613      	movcs	r3, r2
 8008d5a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008d62:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008d64:	4413      	add	r3, r2
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d309      	bcc.n	8008d86 <tcp_receive+0x2c6>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008d78:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008d7a:	4413      	add	r3, r2
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008d84:	e04e      	b.n	8008e24 <tcp_receive+0x364>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d8c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008d90:	e048      	b.n	8008e24 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008d98:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008d9a:	4413      	add	r3, r2
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d309      	bcc.n	8008dbc <tcp_receive+0x2fc>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008dae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008db0:	4413      	add	r3, r2
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008dba:	e004      	b.n	8008dc6 <tcp_receive+0x306>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008dc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d326      	bcc.n	8008e24 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008df6:	4413      	add	r3, r2
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d30a      	bcc.n	8008e1a <tcp_receive+0x35a>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008e0e:	4413      	add	r3, r2
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008e18:	e004      	b.n	8008e24 <tcp_receive+0x364>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e20:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e2c:	4a98      	ldr	r2, [pc, #608]	@ (8009090 <tcp_receive+0x5d0>)
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7ff fdca 	bl	80089c8 <tcp_free_acked_segments>
 8008e34:	4602      	mov	r2, r0
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e42:	4a94      	ldr	r2, [pc, #592]	@ (8009094 <tcp_receive+0x5d4>)
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff fdbf 	bl	80089c8 <tcp_free_acked_segments>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d104      	bne.n	8008e62 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e5e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008e60:	e002      	b.n	8008e68 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d103      	bne.n	8008e7e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8008e84:	4b84      	ldr	r3, [pc, #528]	@ (8009098 <tcp_receive+0x5d8>)
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	4413      	add	r3, r2
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	8b5b      	ldrh	r3, [r3, #26]
 8008e96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d035      	beq.n	8008f0a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d118      	bne.n	8008ed8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00c      	beq.n	8008ec8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fb f93d 	bl	800413a <lwip_htonl>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dc20      	bgt.n	8008f0a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	8b5b      	ldrh	r3, [r3, #26]
 8008ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008ed6:	e018      	b.n	8008f0a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fb f928 	bl	800413a <lwip_htonl>
 8008eea:	4603      	mov	r3, r0
 8008eec:	1ae3      	subs	r3, r4, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dc0b      	bgt.n	8008f0a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	8b5b      	ldrh	r3, [r3, #26]
 8008ef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008f00:	e003      	b.n	8008f0a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f001 ff70 	bl	800ade8 <tcp_send_empty_ack>
 8008f08:	e000      	b.n	8008f0c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008f0a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d05b      	beq.n	8008fcc <tcp_receive+0x50c>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f18:	4b60      	ldr	r3, [pc, #384]	@ (800909c <tcp_receive+0x5dc>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	da54      	bge.n	8008fcc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008f22:	4b5f      	ldr	r3, [pc, #380]	@ (80090a0 <tcp_receive+0x5e0>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008f36:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008f40:	10db      	asrs	r3, r3, #3
 8008f42:	b21b      	sxth	r3, r3
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008f5a:	4413      	add	r3, r2
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	b21a      	sxth	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8008f64:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	da05      	bge.n	8008f78 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008f6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008f70:	425b      	negs	r3, r3
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008f78:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008f82:	109b      	asrs	r3, r3, #2
 8008f84:	b21b      	sxth	r3, r3
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008f9c:	4413      	add	r3, r2
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	b21a      	sxth	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008fac:	10db      	asrs	r3, r3, #3
 8008fae:	b21b      	sxth	r3, r3
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	4413      	add	r3, r2
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	b21a      	sxth	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008fcc:	4b35      	ldr	r3, [pc, #212]	@ (80090a4 <tcp_receive+0x5e4>)
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 84df 	beq.w	8009994 <tcp_receive+0xed4>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	7d1b      	ldrb	r3, [r3, #20]
 8008fda:	2b06      	cmp	r3, #6
 8008fdc:	f200 84da 	bhi.w	8009994 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fe4:	4b30      	ldr	r3, [pc, #192]	@ (80090a8 <tcp_receive+0x5e8>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	3b01      	subs	r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f2c0 808f 	blt.w	8009110 <tcp_receive+0x650>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80090a4 <tcp_receive+0x5e4>)
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80090a8 <tcp_receive+0x5e8>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	440b      	add	r3, r1
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	3301      	adds	r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	f300 8082 	bgt.w	8009110 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800900c:	4b27      	ldr	r3, [pc, #156]	@ (80090ac <tcp_receive+0x5ec>)
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009016:	4b24      	ldr	r3, [pc, #144]	@ (80090a8 <tcp_receive+0x5e8>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800901e:	4b23      	ldr	r3, [pc, #140]	@ (80090ac <tcp_receive+0x5ec>)
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d106      	bne.n	8009034 <tcp_receive+0x574>
 8009026:	4b22      	ldr	r3, [pc, #136]	@ (80090b0 <tcp_receive+0x5f0>)
 8009028:	f240 5294 	movw	r2, #1428	@ 0x594
 800902c:	4921      	ldr	r1, [pc, #132]	@ (80090b4 <tcp_receive+0x5f4>)
 800902e:	4822      	ldr	r0, [pc, #136]	@ (80090b8 <tcp_receive+0x5f8>)
 8009030:	f004 fef8 	bl	800de24 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009036:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800903a:	4293      	cmp	r3, r2
 800903c:	d906      	bls.n	800904c <tcp_receive+0x58c>
 800903e:	4b1c      	ldr	r3, [pc, #112]	@ (80090b0 <tcp_receive+0x5f0>)
 8009040:	f240 5295 	movw	r2, #1429	@ 0x595
 8009044:	491d      	ldr	r1, [pc, #116]	@ (80090bc <tcp_receive+0x5fc>)
 8009046:	481c      	ldr	r0, [pc, #112]	@ (80090b8 <tcp_receive+0x5f8>)
 8009048:	f004 feec 	bl	800de24 <iprintf>
      off = (u16_t)off32;
 800904c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009052:	4b16      	ldr	r3, [pc, #88]	@ (80090ac <tcp_receive+0x5ec>)
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	891b      	ldrh	r3, [r3, #8]
 8009058:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800905c:	429a      	cmp	r2, r3
 800905e:	d906      	bls.n	800906e <tcp_receive+0x5ae>
 8009060:	4b13      	ldr	r3, [pc, #76]	@ (80090b0 <tcp_receive+0x5f0>)
 8009062:	f240 5297 	movw	r2, #1431	@ 0x597
 8009066:	4916      	ldr	r1, [pc, #88]	@ (80090c0 <tcp_receive+0x600>)
 8009068:	4813      	ldr	r0, [pc, #76]	@ (80090b8 <tcp_receive+0x5f8>)
 800906a:	f004 fedb 	bl	800de24 <iprintf>
      inseg.len -= off;
 800906e:	4b0f      	ldr	r3, [pc, #60]	@ (80090ac <tcp_receive+0x5ec>)
 8009070:	891a      	ldrh	r2, [r3, #8]
 8009072:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	b29a      	uxth	r2, r3
 800907a:	4b0c      	ldr	r3, [pc, #48]	@ (80090ac <tcp_receive+0x5ec>)
 800907c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800907e:	4b0b      	ldr	r3, [pc, #44]	@ (80090ac <tcp_receive+0x5ec>)
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	891a      	ldrh	r2, [r3, #8]
 8009084:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800908c:	e02a      	b.n	80090e4 <tcp_receive+0x624>
 800908e:	bf00      	nop
 8009090:	080101ec 	.word	0x080101ec
 8009094:	080101f4 	.word	0x080101f4
 8009098:	24007bac 	.word	0x24007bac
 800909c:	24007ba8 	.word	0x24007ba8
 80090a0:	24007b6c 	.word	0x24007b6c
 80090a4:	24007bae 	.word	0x24007bae
 80090a8:	24007ba4 	.word	0x24007ba4
 80090ac:	24007b84 	.word	0x24007b84
 80090b0:	0800fe84 	.word	0x0800fe84
 80090b4:	080101fc 	.word	0x080101fc
 80090b8:	0800fed0 	.word	0x0800fed0
 80090bc:	0801020c 	.word	0x0801020c
 80090c0:	0801021c 	.word	0x0801021c
        off -= p->len;
 80090c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090c6:	895b      	ldrh	r3, [r3, #10]
 80090c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80090d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090d4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80090d6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80090d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090da:	2200      	movs	r2, #0
 80090dc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80090de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80090e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090e6:	895b      	ldrh	r3, [r3, #10]
 80090e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d8e9      	bhi.n	80090c4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80090f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80090f4:	4619      	mov	r1, r3
 80090f6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80090f8:	f7fc fb7a 	bl	80057f0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009100:	4a90      	ldr	r2, [pc, #576]	@ (8009344 <tcp_receive+0x884>)
 8009102:	6013      	str	r3, [r2, #0]
 8009104:	4b90      	ldr	r3, [pc, #576]	@ (8009348 <tcp_receive+0x888>)
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	4a8e      	ldr	r2, [pc, #568]	@ (8009344 <tcp_receive+0x884>)
 800910a:	6812      	ldr	r2, [r2, #0]
 800910c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800910e:	e00d      	b.n	800912c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009110:	4b8c      	ldr	r3, [pc, #560]	@ (8009344 <tcp_receive+0x884>)
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	da06      	bge.n	800912c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	8b5b      	ldrh	r3, [r3, #26]
 8009122:	f043 0302 	orr.w	r3, r3, #2
 8009126:	b29a      	uxth	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800912c:	4b85      	ldr	r3, [pc, #532]	@ (8009344 <tcp_receive+0x884>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	f2c0 8427 	blt.w	800998a <tcp_receive+0xeca>
 800913c:	4b81      	ldr	r3, [pc, #516]	@ (8009344 <tcp_receive+0x884>)
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009144:	6879      	ldr	r1, [r7, #4]
 8009146:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009148:	440b      	add	r3, r1
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	3301      	adds	r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	f300 841b 	bgt.w	800998a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009158:	4b7a      	ldr	r3, [pc, #488]	@ (8009344 <tcp_receive+0x884>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	429a      	cmp	r2, r3
 800915e:	f040 8298 	bne.w	8009692 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009162:	4b79      	ldr	r3, [pc, #484]	@ (8009348 <tcp_receive+0x888>)
 8009164:	891c      	ldrh	r4, [r3, #8]
 8009166:	4b78      	ldr	r3, [pc, #480]	@ (8009348 <tcp_receive+0x888>)
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	899b      	ldrh	r3, [r3, #12]
 800916c:	b29b      	uxth	r3, r3
 800916e:	4618      	mov	r0, r3
 8009170:	f7fa ffce 	bl	8004110 <lwip_htons>
 8009174:	4603      	mov	r3, r0
 8009176:	b2db      	uxtb	r3, r3
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <tcp_receive+0x6c4>
 8009180:	2301      	movs	r3, #1
 8009182:	e000      	b.n	8009186 <tcp_receive+0x6c6>
 8009184:	2300      	movs	r3, #0
 8009186:	4423      	add	r3, r4
 8009188:	b29a      	uxth	r2, r3
 800918a:	4b70      	ldr	r3, [pc, #448]	@ (800934c <tcp_receive+0x88c>)
 800918c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009192:	4b6e      	ldr	r3, [pc, #440]	@ (800934c <tcp_receive+0x88c>)
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	d274      	bcs.n	8009284 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800919a:	4b6b      	ldr	r3, [pc, #428]	@ (8009348 <tcp_receive+0x888>)
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	899b      	ldrh	r3, [r3, #12]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fa ffb4 	bl	8004110 <lwip_htons>
 80091a8:	4603      	mov	r3, r0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d01e      	beq.n	80091f2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80091b4:	4b64      	ldr	r3, [pc, #400]	@ (8009348 <tcp_receive+0x888>)
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	899b      	ldrh	r3, [r3, #12]
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	b21b      	sxth	r3, r3
 80091be:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80091c2:	b21c      	sxth	r4, r3
 80091c4:	4b60      	ldr	r3, [pc, #384]	@ (8009348 <tcp_receive+0x888>)
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	899b      	ldrh	r3, [r3, #12]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fa ff9f 	bl	8004110 <lwip_htons>
 80091d2:	4603      	mov	r3, r0
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80091da:	b29b      	uxth	r3, r3
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fa ff97 	bl	8004110 <lwip_htons>
 80091e2:	4603      	mov	r3, r0
 80091e4:	b21b      	sxth	r3, r3
 80091e6:	4323      	orrs	r3, r4
 80091e8:	b21a      	sxth	r2, r3
 80091ea:	4b57      	ldr	r3, [pc, #348]	@ (8009348 <tcp_receive+0x888>)
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	b292      	uxth	r2, r2
 80091f0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80091f6:	4b54      	ldr	r3, [pc, #336]	@ (8009348 <tcp_receive+0x888>)
 80091f8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80091fa:	4b53      	ldr	r3, [pc, #332]	@ (8009348 <tcp_receive+0x888>)
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	899b      	ldrh	r3, [r3, #12]
 8009200:	b29b      	uxth	r3, r3
 8009202:	4618      	mov	r0, r3
 8009204:	f7fa ff84 	bl	8004110 <lwip_htons>
 8009208:	4603      	mov	r3, r0
 800920a:	b2db      	uxtb	r3, r3
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d005      	beq.n	8009220 <tcp_receive+0x760>
            inseg.len -= 1;
 8009214:	4b4c      	ldr	r3, [pc, #304]	@ (8009348 <tcp_receive+0x888>)
 8009216:	891b      	ldrh	r3, [r3, #8]
 8009218:	3b01      	subs	r3, #1
 800921a:	b29a      	uxth	r2, r3
 800921c:	4b4a      	ldr	r3, [pc, #296]	@ (8009348 <tcp_receive+0x888>)
 800921e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009220:	4b49      	ldr	r3, [pc, #292]	@ (8009348 <tcp_receive+0x888>)
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	4a48      	ldr	r2, [pc, #288]	@ (8009348 <tcp_receive+0x888>)
 8009226:	8912      	ldrh	r2, [r2, #8]
 8009228:	4611      	mov	r1, r2
 800922a:	4618      	mov	r0, r3
 800922c:	f7fc f9e0 	bl	80055f0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009230:	4b45      	ldr	r3, [pc, #276]	@ (8009348 <tcp_receive+0x888>)
 8009232:	891c      	ldrh	r4, [r3, #8]
 8009234:	4b44      	ldr	r3, [pc, #272]	@ (8009348 <tcp_receive+0x888>)
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	899b      	ldrh	r3, [r3, #12]
 800923a:	b29b      	uxth	r3, r3
 800923c:	4618      	mov	r0, r3
 800923e:	f7fa ff67 	bl	8004110 <lwip_htons>
 8009242:	4603      	mov	r3, r0
 8009244:	b2db      	uxtb	r3, r3
 8009246:	f003 0303 	and.w	r3, r3, #3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <tcp_receive+0x792>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <tcp_receive+0x794>
 8009252:	2300      	movs	r3, #0
 8009254:	4423      	add	r3, r4
 8009256:	b29a      	uxth	r2, r3
 8009258:	4b3c      	ldr	r3, [pc, #240]	@ (800934c <tcp_receive+0x88c>)
 800925a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800925c:	4b3b      	ldr	r3, [pc, #236]	@ (800934c <tcp_receive+0x88c>)
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	4b38      	ldr	r3, [pc, #224]	@ (8009344 <tcp_receive+0x884>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	441a      	add	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009270:	440b      	add	r3, r1
 8009272:	429a      	cmp	r2, r3
 8009274:	d006      	beq.n	8009284 <tcp_receive+0x7c4>
 8009276:	4b36      	ldr	r3, [pc, #216]	@ (8009350 <tcp_receive+0x890>)
 8009278:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800927c:	4935      	ldr	r1, [pc, #212]	@ (8009354 <tcp_receive+0x894>)
 800927e:	4836      	ldr	r0, [pc, #216]	@ (8009358 <tcp_receive+0x898>)
 8009280:	f004 fdd0 	bl	800de24 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 80e6 	beq.w	800945a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800928e:	4b2e      	ldr	r3, [pc, #184]	@ (8009348 <tcp_receive+0x888>)
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	899b      	ldrh	r3, [r3, #12]
 8009294:	b29b      	uxth	r3, r3
 8009296:	4618      	mov	r0, r3
 8009298:	f7fa ff3a 	bl	8004110 <lwip_htons>
 800929c:	4603      	mov	r3, r0
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d010      	beq.n	80092ca <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80092a8:	e00a      	b.n	80092c0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ae:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f7fd fd93 	bl	8006de6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1f0      	bne.n	80092aa <tcp_receive+0x7ea>
 80092c8:	e0c7      	b.n	800945a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80092d0:	e051      	b.n	8009376 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80092d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	899b      	ldrh	r3, [r3, #12]
 80092d8:	b29b      	uxth	r3, r3
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fa ff18 	bl	8004110 <lwip_htons>
 80092e0:	4603      	mov	r3, r0
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d03c      	beq.n	8009366 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80092ec:	4b16      	ldr	r3, [pc, #88]	@ (8009348 <tcp_receive+0x888>)
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	899b      	ldrh	r3, [r3, #12]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fa ff0b 	bl	8004110 <lwip_htons>
 80092fa:	4603      	mov	r3, r0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009302:	2b00      	cmp	r3, #0
 8009304:	d12f      	bne.n	8009366 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009306:	4b10      	ldr	r3, [pc, #64]	@ (8009348 <tcp_receive+0x888>)
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	899b      	ldrh	r3, [r3, #12]
 800930c:	b29c      	uxth	r4, r3
 800930e:	2001      	movs	r0, #1
 8009310:	f7fa fefe 	bl	8004110 <lwip_htons>
 8009314:	4603      	mov	r3, r0
 8009316:	461a      	mov	r2, r3
 8009318:	4b0b      	ldr	r3, [pc, #44]	@ (8009348 <tcp_receive+0x888>)
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	4322      	orrs	r2, r4
 800931e:	b292      	uxth	r2, r2
 8009320:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009322:	4b09      	ldr	r3, [pc, #36]	@ (8009348 <tcp_receive+0x888>)
 8009324:	891c      	ldrh	r4, [r3, #8]
 8009326:	4b08      	ldr	r3, [pc, #32]	@ (8009348 <tcp_receive+0x888>)
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	899b      	ldrh	r3, [r3, #12]
 800932c:	b29b      	uxth	r3, r3
 800932e:	4618      	mov	r0, r3
 8009330:	f7fa feee 	bl	8004110 <lwip_htons>
 8009334:	4603      	mov	r3, r0
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f003 0303 	and.w	r3, r3, #3
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00d      	beq.n	800935c <tcp_receive+0x89c>
 8009340:	2301      	movs	r3, #1
 8009342:	e00c      	b.n	800935e <tcp_receive+0x89e>
 8009344:	24007ba4 	.word	0x24007ba4
 8009348:	24007b84 	.word	0x24007b84
 800934c:	24007bae 	.word	0x24007bae
 8009350:	0800fe84 	.word	0x0800fe84
 8009354:	0801022c 	.word	0x0801022c
 8009358:	0800fed0 	.word	0x0800fed0
 800935c:	2300      	movs	r3, #0
 800935e:	4423      	add	r3, r4
 8009360:	b29a      	uxth	r2, r3
 8009362:	4b98      	ldr	r3, [pc, #608]	@ (80095c4 <tcp_receive+0xb04>)
 8009364:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009368:	613b      	str	r3, [r7, #16]
              next = next->next;
 800936a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8009370:	6938      	ldr	r0, [r7, #16]
 8009372:	f7fd fd38 	bl	8006de6 <tcp_seg_free>
            while (next &&
 8009376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00e      	beq.n	800939a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800937c:	4b91      	ldr	r3, [pc, #580]	@ (80095c4 <tcp_receive+0xb04>)
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	4b91      	ldr	r3, [pc, #580]	@ (80095c8 <tcp_receive+0xb08>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	441a      	add	r2, r3
 8009388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009390:	8909      	ldrh	r1, [r1, #8]
 8009392:	440b      	add	r3, r1
 8009394:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009396:	2b00      	cmp	r3, #0
 8009398:	da9b      	bge.n	80092d2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800939a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800939c:	2b00      	cmp	r3, #0
 800939e:	d059      	beq.n	8009454 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80093a0:	4b88      	ldr	r3, [pc, #544]	@ (80095c4 <tcp_receive+0xb04>)
 80093a2:	881b      	ldrh	r3, [r3, #0]
 80093a4:	461a      	mov	r2, r3
 80093a6:	4b88      	ldr	r3, [pc, #544]	@ (80095c8 <tcp_receive+0xb08>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	441a      	add	r2, r3
 80093ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	dd4d      	ble.n	8009454 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80093b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	b29a      	uxth	r2, r3
 80093c0:	4b81      	ldr	r3, [pc, #516]	@ (80095c8 <tcp_receive+0xb08>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	4b80      	ldr	r3, [pc, #512]	@ (80095cc <tcp_receive+0xb0c>)
 80093cc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80093ce:	4b7f      	ldr	r3, [pc, #508]	@ (80095cc <tcp_receive+0xb0c>)
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	899b      	ldrh	r3, [r3, #12]
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fa fe9a 	bl	8004110 <lwip_htons>
 80093dc:	4603      	mov	r3, r0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <tcp_receive+0x934>
                inseg.len -= 1;
 80093e8:	4b78      	ldr	r3, [pc, #480]	@ (80095cc <tcp_receive+0xb0c>)
 80093ea:	891b      	ldrh	r3, [r3, #8]
 80093ec:	3b01      	subs	r3, #1
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	4b76      	ldr	r3, [pc, #472]	@ (80095cc <tcp_receive+0xb0c>)
 80093f2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80093f4:	4b75      	ldr	r3, [pc, #468]	@ (80095cc <tcp_receive+0xb0c>)
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	4a74      	ldr	r2, [pc, #464]	@ (80095cc <tcp_receive+0xb0c>)
 80093fa:	8912      	ldrh	r2, [r2, #8]
 80093fc:	4611      	mov	r1, r2
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fc f8f6 	bl	80055f0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009404:	4b71      	ldr	r3, [pc, #452]	@ (80095cc <tcp_receive+0xb0c>)
 8009406:	891c      	ldrh	r4, [r3, #8]
 8009408:	4b70      	ldr	r3, [pc, #448]	@ (80095cc <tcp_receive+0xb0c>)
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	899b      	ldrh	r3, [r3, #12]
 800940e:	b29b      	uxth	r3, r3
 8009410:	4618      	mov	r0, r3
 8009412:	f7fa fe7d 	bl	8004110 <lwip_htons>
 8009416:	4603      	mov	r3, r0
 8009418:	b2db      	uxtb	r3, r3
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <tcp_receive+0x966>
 8009422:	2301      	movs	r3, #1
 8009424:	e000      	b.n	8009428 <tcp_receive+0x968>
 8009426:	2300      	movs	r3, #0
 8009428:	4423      	add	r3, r4
 800942a:	b29a      	uxth	r2, r3
 800942c:	4b65      	ldr	r3, [pc, #404]	@ (80095c4 <tcp_receive+0xb04>)
 800942e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009430:	4b64      	ldr	r3, [pc, #400]	@ (80095c4 <tcp_receive+0xb04>)
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	461a      	mov	r2, r3
 8009436:	4b64      	ldr	r3, [pc, #400]	@ (80095c8 <tcp_receive+0xb08>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	441a      	add	r2, r3
 800943c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	429a      	cmp	r2, r3
 8009444:	d006      	beq.n	8009454 <tcp_receive+0x994>
 8009446:	4b62      	ldr	r3, [pc, #392]	@ (80095d0 <tcp_receive+0xb10>)
 8009448:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800944c:	4961      	ldr	r1, [pc, #388]	@ (80095d4 <tcp_receive+0xb14>)
 800944e:	4862      	ldr	r0, [pc, #392]	@ (80095d8 <tcp_receive+0xb18>)
 8009450:	f004 fce8 	bl	800de24 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009458:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800945a:	4b5a      	ldr	r3, [pc, #360]	@ (80095c4 <tcp_receive+0xb04>)
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	4b59      	ldr	r3, [pc, #356]	@ (80095c8 <tcp_receive+0xb08>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	441a      	add	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800946e:	4b55      	ldr	r3, [pc, #340]	@ (80095c4 <tcp_receive+0xb04>)
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	429a      	cmp	r2, r3
 8009474:	d206      	bcs.n	8009484 <tcp_receive+0x9c4>
 8009476:	4b56      	ldr	r3, [pc, #344]	@ (80095d0 <tcp_receive+0xb10>)
 8009478:	f240 6207 	movw	r2, #1543	@ 0x607
 800947c:	4957      	ldr	r1, [pc, #348]	@ (80095dc <tcp_receive+0xb1c>)
 800947e:	4856      	ldr	r0, [pc, #344]	@ (80095d8 <tcp_receive+0xb18>)
 8009480:	f004 fcd0 	bl	800de24 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009488:	4b4e      	ldr	r3, [pc, #312]	@ (80095c4 <tcp_receive+0xb04>)
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7fc ffc5 	bl	8006424 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800949a:	4b4c      	ldr	r3, [pc, #304]	@ (80095cc <tcp_receive+0xb0c>)
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	891b      	ldrh	r3, [r3, #8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d006      	beq.n	80094b2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80094a4:	4b49      	ldr	r3, [pc, #292]	@ (80095cc <tcp_receive+0xb0c>)
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	4a4d      	ldr	r2, [pc, #308]	@ (80095e0 <tcp_receive+0xb20>)
 80094aa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80094ac:	4b47      	ldr	r3, [pc, #284]	@ (80095cc <tcp_receive+0xb0c>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80094b2:	4b46      	ldr	r3, [pc, #280]	@ (80095cc <tcp_receive+0xb0c>)
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	899b      	ldrh	r3, [r3, #12]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fa fe28 	bl	8004110 <lwip_htons>
 80094c0:	4603      	mov	r3, r0
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 80b8 	beq.w	800963e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80094ce:	4b45      	ldr	r3, [pc, #276]	@ (80095e4 <tcp_receive+0xb24>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	f043 0320 	orr.w	r3, r3, #32
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	4b42      	ldr	r3, [pc, #264]	@ (80095e4 <tcp_receive+0xb24>)
 80094da:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80094dc:	e0af      	b.n	800963e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094e2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	4a36      	ldr	r2, [pc, #216]	@ (80095c8 <tcp_receive+0xb08>)
 80094ee:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	891b      	ldrh	r3, [r3, #8]
 80094f4:	461c      	mov	r4, r3
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	899b      	ldrh	r3, [r3, #12]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fa fe06 	bl	8004110 <lwip_htons>
 8009504:	4603      	mov	r3, r0
 8009506:	b2db      	uxtb	r3, r3
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <tcp_receive+0xa54>
 8009510:	2301      	movs	r3, #1
 8009512:	e000      	b.n	8009516 <tcp_receive+0xa56>
 8009514:	2300      	movs	r3, #0
 8009516:	191a      	adds	r2, r3, r4
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800951c:	441a      	add	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009526:	461c      	mov	r4, r3
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	891b      	ldrh	r3, [r3, #8]
 800952c:	461d      	mov	r5, r3
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	899b      	ldrh	r3, [r3, #12]
 8009534:	b29b      	uxth	r3, r3
 8009536:	4618      	mov	r0, r3
 8009538:	f7fa fdea 	bl	8004110 <lwip_htons>
 800953c:	4603      	mov	r3, r0
 800953e:	b2db      	uxtb	r3, r3
 8009540:	f003 0303 	and.w	r3, r3, #3
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <tcp_receive+0xa8c>
 8009548:	2301      	movs	r3, #1
 800954a:	e000      	b.n	800954e <tcp_receive+0xa8e>
 800954c:	2300      	movs	r3, #0
 800954e:	442b      	add	r3, r5
 8009550:	429c      	cmp	r4, r3
 8009552:	d206      	bcs.n	8009562 <tcp_receive+0xaa2>
 8009554:	4b1e      	ldr	r3, [pc, #120]	@ (80095d0 <tcp_receive+0xb10>)
 8009556:	f240 622b 	movw	r2, #1579	@ 0x62b
 800955a:	4923      	ldr	r1, [pc, #140]	@ (80095e8 <tcp_receive+0xb28>)
 800955c:	481e      	ldr	r0, [pc, #120]	@ (80095d8 <tcp_receive+0xb18>)
 800955e:	f004 fc61 	bl	800de24 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	891b      	ldrh	r3, [r3, #8]
 8009566:	461c      	mov	r4, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	899b      	ldrh	r3, [r3, #12]
 800956e:	b29b      	uxth	r3, r3
 8009570:	4618      	mov	r0, r3
 8009572:	f7fa fdcd 	bl	8004110 <lwip_htons>
 8009576:	4603      	mov	r3, r0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	f003 0303 	and.w	r3, r3, #3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <tcp_receive+0xac6>
 8009582:	2301      	movs	r3, #1
 8009584:	e000      	b.n	8009588 <tcp_receive+0xac8>
 8009586:	2300      	movs	r3, #0
 8009588:	1919      	adds	r1, r3, r4
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800958e:	b28b      	uxth	r3, r1
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	b29a      	uxth	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7fc ff43 	bl	8006424 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	891b      	ldrh	r3, [r3, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d028      	beq.n	80095fa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80095a8:	4b0d      	ldr	r3, [pc, #52]	@ (80095e0 <tcp_receive+0xb20>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d01d      	beq.n	80095ec <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80095b0:	4b0b      	ldr	r3, [pc, #44]	@ (80095e0 <tcp_receive+0xb20>)
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	f7fc fa60 	bl	8005a80 <pbuf_cat>
 80095c0:	e018      	b.n	80095f4 <tcp_receive+0xb34>
 80095c2:	bf00      	nop
 80095c4:	24007bae 	.word	0x24007bae
 80095c8:	24007ba4 	.word	0x24007ba4
 80095cc:	24007b84 	.word	0x24007b84
 80095d0:	0800fe84 	.word	0x0800fe84
 80095d4:	08010264 	.word	0x08010264
 80095d8:	0800fed0 	.word	0x0800fed0
 80095dc:	080102a0 	.word	0x080102a0
 80095e0:	24007bb4 	.word	0x24007bb4
 80095e4:	24007bb1 	.word	0x24007bb1
 80095e8:	080102c0 	.word	0x080102c0
            } else {
              recv_data = cseg->p;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	4a70      	ldr	r2, [pc, #448]	@ (80097b4 <tcp_receive+0xcf4>)
 80095f2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2200      	movs	r2, #0
 80095f8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	899b      	ldrh	r3, [r3, #12]
 8009600:	b29b      	uxth	r3, r3
 8009602:	4618      	mov	r0, r3
 8009604:	f7fa fd84 	bl	8004110 <lwip_htons>
 8009608:	4603      	mov	r3, r0
 800960a:	b2db      	uxtb	r3, r3
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00d      	beq.n	8009630 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009614:	4b68      	ldr	r3, [pc, #416]	@ (80097b8 <tcp_receive+0xcf8>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f043 0320 	orr.w	r3, r3, #32
 800961c:	b2da      	uxtb	r2, r3
 800961e:	4b66      	ldr	r3, [pc, #408]	@ (80097b8 <tcp_receive+0xcf8>)
 8009620:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	7d1b      	ldrb	r3, [r3, #20]
 8009626:	2b04      	cmp	r3, #4
 8009628:	d102      	bne.n	8009630 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2207      	movs	r2, #7
 800962e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8009638:	68b8      	ldr	r0, [r7, #8]
 800963a:	f7fd fbd4 	bl	8006de6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009642:	2b00      	cmp	r3, #0
 8009644:	d008      	beq.n	8009658 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8009652:	429a      	cmp	r2, r3
 8009654:	f43f af43 	beq.w	80094de <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	8b5b      	ldrh	r3, [r3, #26]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00e      	beq.n	8009682 <tcp_receive+0xbc2>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	8b5b      	ldrh	r3, [r3, #26]
 8009668:	f023 0301 	bic.w	r3, r3, #1
 800966c:	b29a      	uxth	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	835a      	strh	r2, [r3, #26]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	8b5b      	ldrh	r3, [r3, #26]
 8009676:	f043 0302 	orr.w	r3, r3, #2
 800967a:	b29a      	uxth	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009680:	e187      	b.n	8009992 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	8b5b      	ldrh	r3, [r3, #26]
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	b29a      	uxth	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009690:	e17f      	b.n	8009992 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009696:	2b00      	cmp	r3, #0
 8009698:	d106      	bne.n	80096a8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800969a:	4848      	ldr	r0, [pc, #288]	@ (80097bc <tcp_receive+0xcfc>)
 800969c:	f7fd fbbc 	bl	8006e18 <tcp_seg_copy>
 80096a0:	4602      	mov	r2, r0
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80096a6:	e16c      	b.n	8009982 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80096a8:	2300      	movs	r3, #0
 80096aa:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096b2:	e156      	b.n	8009962 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80096b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	4b41      	ldr	r3, [pc, #260]	@ (80097c0 <tcp_receive+0xd00>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d11d      	bne.n	80096fe <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80096c2:	4b3e      	ldr	r3, [pc, #248]	@ (80097bc <tcp_receive+0xcfc>)
 80096c4:	891a      	ldrh	r2, [r3, #8]
 80096c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c8:	891b      	ldrh	r3, [r3, #8]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	f240 814e 	bls.w	800996c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80096d0:	483a      	ldr	r0, [pc, #232]	@ (80097bc <tcp_receive+0xcfc>)
 80096d2:	f7fd fba1 	bl	8006e18 <tcp_seg_copy>
 80096d6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 8148 	beq.w	8009970 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80096e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <tcp_receive+0xc2e>
                    prev->next = cseg;
 80096e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	601a      	str	r2, [r3, #0]
 80096ec:	e002      	b.n	80096f4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80096f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80096f6:	6978      	ldr	r0, [r7, #20]
 80096f8:	f7ff f8de 	bl	80088b8 <tcp_oos_insert_segment>
                }
                break;
 80096fc:	e138      	b.n	8009970 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80096fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009700:	2b00      	cmp	r3, #0
 8009702:	d117      	bne.n	8009734 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009704:	4b2e      	ldr	r3, [pc, #184]	@ (80097c0 <tcp_receive+0xd00>)
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	2b00      	cmp	r3, #0
 8009712:	da57      	bge.n	80097c4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009714:	4829      	ldr	r0, [pc, #164]	@ (80097bc <tcp_receive+0xcfc>)
 8009716:	f7fd fb7f 	bl	8006e18 <tcp_seg_copy>
 800971a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	2b00      	cmp	r3, #0
 8009720:	f000 8128 	beq.w	8009974 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800972a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800972c:	69b8      	ldr	r0, [r7, #24]
 800972e:	f7ff f8c3 	bl	80088b8 <tcp_oos_insert_segment>
                  }
                  break;
 8009732:	e11f      	b.n	8009974 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009734:	4b22      	ldr	r3, [pc, #136]	@ (80097c0 <tcp_receive+0xd00>)
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	3b01      	subs	r3, #1
 8009742:	2b00      	cmp	r3, #0
 8009744:	db3e      	blt.n	80097c4 <tcp_receive+0xd04>
 8009746:	4b1e      	ldr	r3, [pc, #120]	@ (80097c0 <tcp_receive+0xd00>)
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	3301      	adds	r3, #1
 8009754:	2b00      	cmp	r3, #0
 8009756:	dc35      	bgt.n	80097c4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009758:	4818      	ldr	r0, [pc, #96]	@ (80097bc <tcp_receive+0xcfc>)
 800975a:	f7fd fb5d 	bl	8006e18 <tcp_seg_copy>
 800975e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	2b00      	cmp	r3, #0
 8009764:	f000 8108 	beq.w	8009978 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009770:	8912      	ldrh	r2, [r2, #8]
 8009772:	441a      	add	r2, r3
 8009774:	4b12      	ldr	r3, [pc, #72]	@ (80097c0 <tcp_receive+0xd00>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	dd12      	ble.n	80097a4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800977e:	4b10      	ldr	r3, [pc, #64]	@ (80097c0 <tcp_receive+0xd00>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	b29a      	uxth	r2, r3
 8009784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	b29b      	uxth	r3, r3
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	b29a      	uxth	r2, r3
 8009790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009792:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800979a:	891b      	ldrh	r3, [r3, #8]
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	f7fb ff26 	bl	80055f0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80097a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80097aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80097ac:	69f8      	ldr	r0, [r7, #28]
 80097ae:	f7ff f883 	bl	80088b8 <tcp_oos_insert_segment>
                  }
                  break;
 80097b2:	e0e1      	b.n	8009978 <tcp_receive+0xeb8>
 80097b4:	24007bb4 	.word	0x24007bb4
 80097b8:	24007bb1 	.word	0x24007bb1
 80097bc:	24007b84 	.word	0x24007b84
 80097c0:	24007ba4 	.word	0x24007ba4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80097c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80097c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f040 80c5 	bne.w	800995c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80097d2:	4b7f      	ldr	r3, [pc, #508]	@ (80099d0 <tcp_receive+0xf10>)
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f340 80bc 	ble.w	800995c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80097e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	899b      	ldrh	r3, [r3, #12]
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fa fc8f 	bl	8004110 <lwip_htons>
 80097f2:	4603      	mov	r3, r0
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f040 80be 	bne.w	800997c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009800:	4874      	ldr	r0, [pc, #464]	@ (80099d4 <tcp_receive+0xf14>)
 8009802:	f7fd fb09 	bl	8006e18 <tcp_seg_copy>
 8009806:	4602      	mov	r2, r0
 8009808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800980c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 80b5 	beq.w	8009980 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800981e:	8912      	ldrh	r2, [r2, #8]
 8009820:	441a      	add	r2, r3
 8009822:	4b6b      	ldr	r3, [pc, #428]	@ (80099d0 <tcp_receive+0xf10>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	dd12      	ble.n	8009852 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800982c:	4b68      	ldr	r3, [pc, #416]	@ (80099d0 <tcp_receive+0xf10>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	b29a      	uxth	r2, r3
 8009832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	b29b      	uxth	r3, r3
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	b29a      	uxth	r2, r3
 800983e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009840:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009844:	685a      	ldr	r2, [r3, #4]
 8009846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009848:	891b      	ldrh	r3, [r3, #8]
 800984a:	4619      	mov	r1, r3
 800984c:	4610      	mov	r0, r2
 800984e:	f7fb fecf 	bl	80055f0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009852:	4b61      	ldr	r3, [pc, #388]	@ (80099d8 <tcp_receive+0xf18>)
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	4b5d      	ldr	r3, [pc, #372]	@ (80099d0 <tcp_receive+0xf10>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	441a      	add	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009862:	6879      	ldr	r1, [r7, #4]
 8009864:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009866:	440b      	add	r3, r1
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	2b00      	cmp	r3, #0
 800986c:	f340 8088 	ble.w	8009980 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	899b      	ldrh	r3, [r3, #12]
 8009878:	b29b      	uxth	r3, r3
 800987a:	4618      	mov	r0, r3
 800987c:	f7fa fc48 	bl	8004110 <lwip_htons>
 8009880:	4603      	mov	r3, r0
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	d021      	beq.n	80098d0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800988c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	899b      	ldrh	r3, [r3, #12]
 8009894:	b29b      	uxth	r3, r3
 8009896:	b21b      	sxth	r3, r3
 8009898:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800989c:	b21c      	sxth	r4, r3
 800989e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	899b      	ldrh	r3, [r3, #12]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fa fc31 	bl	8004110 <lwip_htons>
 80098ae:	4603      	mov	r3, r0
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fa fc29 	bl	8004110 <lwip_htons>
 80098be:	4603      	mov	r3, r0
 80098c0:	b21b      	sxth	r3, r3
 80098c2:	4323      	orrs	r3, r4
 80098c4:	b21a      	sxth	r2, r3
 80098c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	b292      	uxth	r2, r2
 80098ce:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098da:	4413      	add	r3, r2
 80098dc:	b299      	uxth	r1, r3
 80098de:	4b3c      	ldr	r3, [pc, #240]	@ (80099d0 <tcp_receive+0xf10>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	1a8a      	subs	r2, r1, r2
 80098ea:	b292      	uxth	r2, r2
 80098ec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80098ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	891b      	ldrh	r3, [r3, #8]
 80098fa:	4619      	mov	r1, r3
 80098fc:	4610      	mov	r0, r2
 80098fe:	f7fb fe77 	bl	80055f0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	891c      	ldrh	r4, [r3, #8]
 8009908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	899b      	ldrh	r3, [r3, #12]
 8009910:	b29b      	uxth	r3, r3
 8009912:	4618      	mov	r0, r3
 8009914:	f7fa fbfc 	bl	8004110 <lwip_htons>
 8009918:	4603      	mov	r3, r0
 800991a:	b2db      	uxtb	r3, r3
 800991c:	f003 0303 	and.w	r3, r3, #3
 8009920:	2b00      	cmp	r3, #0
 8009922:	d001      	beq.n	8009928 <tcp_receive+0xe68>
 8009924:	2301      	movs	r3, #1
 8009926:	e000      	b.n	800992a <tcp_receive+0xe6a>
 8009928:	2300      	movs	r3, #0
 800992a:	4423      	add	r3, r4
 800992c:	b29a      	uxth	r2, r3
 800992e:	4b2a      	ldr	r3, [pc, #168]	@ (80099d8 <tcp_receive+0xf18>)
 8009930:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009932:	4b29      	ldr	r3, [pc, #164]	@ (80099d8 <tcp_receive+0xf18>)
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	4b25      	ldr	r3, [pc, #148]	@ (80099d0 <tcp_receive+0xf10>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	441a      	add	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009942:	6879      	ldr	r1, [r7, #4]
 8009944:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009946:	440b      	add	r3, r1
 8009948:	429a      	cmp	r2, r3
 800994a:	d019      	beq.n	8009980 <tcp_receive+0xec0>
 800994c:	4b23      	ldr	r3, [pc, #140]	@ (80099dc <tcp_receive+0xf1c>)
 800994e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8009952:	4923      	ldr	r1, [pc, #140]	@ (80099e0 <tcp_receive+0xf20>)
 8009954:	4823      	ldr	r0, [pc, #140]	@ (80099e4 <tcp_receive+0xf24>)
 8009956:	f004 fa65 	bl	800de24 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800995a:	e011      	b.n	8009980 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800995c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009964:	2b00      	cmp	r3, #0
 8009966:	f47f aea5 	bne.w	80096b4 <tcp_receive+0xbf4>
 800996a:	e00a      	b.n	8009982 <tcp_receive+0xec2>
                break;
 800996c:	bf00      	nop
 800996e:	e008      	b.n	8009982 <tcp_receive+0xec2>
                break;
 8009970:	bf00      	nop
 8009972:	e006      	b.n	8009982 <tcp_receive+0xec2>
                  break;
 8009974:	bf00      	nop
 8009976:	e004      	b.n	8009982 <tcp_receive+0xec2>
                  break;
 8009978:	bf00      	nop
 800997a:	e002      	b.n	8009982 <tcp_receive+0xec2>
                  break;
 800997c:	bf00      	nop
 800997e:	e000      	b.n	8009982 <tcp_receive+0xec2>
                break;
 8009980:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f001 fa30 	bl	800ade8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009988:	e003      	b.n	8009992 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 fa2c 	bl	800ade8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009990:	e01a      	b.n	80099c8 <tcp_receive+0xf08>
 8009992:	e019      	b.n	80099c8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009994:	4b0e      	ldr	r3, [pc, #56]	@ (80099d0 <tcp_receive+0xf10>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	db0a      	blt.n	80099b8 <tcp_receive+0xef8>
 80099a2:	4b0b      	ldr	r3, [pc, #44]	@ (80099d0 <tcp_receive+0xf10>)
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099aa:	6879      	ldr	r1, [r7, #4]
 80099ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80099ae:	440b      	add	r3, r1
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	3301      	adds	r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	dd07      	ble.n	80099c8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	8b5b      	ldrh	r3, [r3, #26]
 80099bc:	f043 0302 	orr.w	r3, r3, #2
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80099c6:	e7ff      	b.n	80099c8 <tcp_receive+0xf08>
 80099c8:	bf00      	nop
 80099ca:	3750      	adds	r7, #80	@ 0x50
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bdb0      	pop	{r4, r5, r7, pc}
 80099d0:	24007ba4 	.word	0x24007ba4
 80099d4:	24007b84 	.word	0x24007b84
 80099d8:	24007bae 	.word	0x24007bae
 80099dc:	0800fe84 	.word	0x0800fe84
 80099e0:	0801022c 	.word	0x0801022c
 80099e4:	0800fed0 	.word	0x0800fed0

080099e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80099ee:	4b15      	ldr	r3, [pc, #84]	@ (8009a44 <tcp_get_next_optbyte+0x5c>)
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	b291      	uxth	r1, r2
 80099f6:	4a13      	ldr	r2, [pc, #76]	@ (8009a44 <tcp_get_next_optbyte+0x5c>)
 80099f8:	8011      	strh	r1, [r2, #0]
 80099fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80099fc:	4b12      	ldr	r3, [pc, #72]	@ (8009a48 <tcp_get_next_optbyte+0x60>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d004      	beq.n	8009a0e <tcp_get_next_optbyte+0x26>
 8009a04:	4b11      	ldr	r3, [pc, #68]	@ (8009a4c <tcp_get_next_optbyte+0x64>)
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	88fa      	ldrh	r2, [r7, #6]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d208      	bcs.n	8009a20 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009a0e:	4b10      	ldr	r3, [pc, #64]	@ (8009a50 <tcp_get_next_optbyte+0x68>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3314      	adds	r3, #20
 8009a14:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	e00b      	b.n	8009a38 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009a20:	88fb      	ldrh	r3, [r7, #6]
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	4b09      	ldr	r3, [pc, #36]	@ (8009a4c <tcp_get_next_optbyte+0x64>)
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009a2e:	4b06      	ldr	r3, [pc, #24]	@ (8009a48 <tcp_get_next_optbyte+0x60>)
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	797b      	ldrb	r3, [r7, #5]
 8009a34:	4413      	add	r3, r2
 8009a36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	24007ba0 	.word	0x24007ba0
 8009a48:	24007b9c 	.word	0x24007b9c
 8009a4c:	24007b9a 	.word	0x24007b9a
 8009a50:	24007b94 	.word	0x24007b94

08009a54 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d106      	bne.n	8009a70 <tcp_parseopt+0x1c>
 8009a62:	4b32      	ldr	r3, [pc, #200]	@ (8009b2c <tcp_parseopt+0xd8>)
 8009a64:	f240 727d 	movw	r2, #1917	@ 0x77d
 8009a68:	4931      	ldr	r1, [pc, #196]	@ (8009b30 <tcp_parseopt+0xdc>)
 8009a6a:	4832      	ldr	r0, [pc, #200]	@ (8009b34 <tcp_parseopt+0xe0>)
 8009a6c:	f004 f9da 	bl	800de24 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009a70:	4b31      	ldr	r3, [pc, #196]	@ (8009b38 <tcp_parseopt+0xe4>)
 8009a72:	881b      	ldrh	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d056      	beq.n	8009b26 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009a78:	4b30      	ldr	r3, [pc, #192]	@ (8009b3c <tcp_parseopt+0xe8>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	801a      	strh	r2, [r3, #0]
 8009a7e:	e046      	b.n	8009b0e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8009a80:	f7ff ffb2 	bl	80099e8 <tcp_get_next_optbyte>
 8009a84:	4603      	mov	r3, r0
 8009a86:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d006      	beq.n	8009a9c <tcp_parseopt+0x48>
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	dc2a      	bgt.n	8009ae8 <tcp_parseopt+0x94>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d042      	beq.n	8009b1c <tcp_parseopt+0xc8>
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d038      	beq.n	8009b0c <tcp_parseopt+0xb8>
 8009a9a:	e025      	b.n	8009ae8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009a9c:	f7ff ffa4 	bl	80099e8 <tcp_get_next_optbyte>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b04      	cmp	r3, #4
 8009aa4:	d13c      	bne.n	8009b20 <tcp_parseopt+0xcc>
 8009aa6:	4b25      	ldr	r3, [pc, #148]	@ (8009b3c <tcp_parseopt+0xe8>)
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	4a22      	ldr	r2, [pc, #136]	@ (8009b38 <tcp_parseopt+0xe4>)
 8009aae:	8812      	ldrh	r2, [r2, #0]
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	da35      	bge.n	8009b20 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009ab4:	f7ff ff98 	bl	80099e8 <tcp_get_next_optbyte>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	021b      	lsls	r3, r3, #8
 8009abc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009abe:	f7ff ff93 	bl	80099e8 <tcp_get_next_optbyte>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	89bb      	ldrh	r3, [r7, #12]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009acc:	89bb      	ldrh	r3, [r7, #12]
 8009ace:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009ad2:	d804      	bhi.n	8009ade <tcp_parseopt+0x8a>
 8009ad4:	89bb      	ldrh	r3, [r7, #12]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <tcp_parseopt+0x8a>
 8009ada:	89ba      	ldrh	r2, [r7, #12]
 8009adc:	e001      	b.n	8009ae2 <tcp_parseopt+0x8e>
 8009ade:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8009ae6:	e012      	b.n	8009b0e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009ae8:	f7ff ff7e 	bl	80099e8 <tcp_get_next_optbyte>
 8009aec:	4603      	mov	r3, r0
 8009aee:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009af0:	7afb      	ldrb	r3, [r7, #11]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d916      	bls.n	8009b24 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009af6:	7afb      	ldrb	r3, [r7, #11]
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	4b10      	ldr	r3, [pc, #64]	@ (8009b3c <tcp_parseopt+0xe8>)
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	4413      	add	r3, r2
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3b02      	subs	r3, #2
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	4b0d      	ldr	r3, [pc, #52]	@ (8009b3c <tcp_parseopt+0xe8>)
 8009b08:	801a      	strh	r2, [r3, #0]
 8009b0a:	e000      	b.n	8009b0e <tcp_parseopt+0xba>
          break;
 8009b0c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b3c <tcp_parseopt+0xe8>)
 8009b10:	881a      	ldrh	r2, [r3, #0]
 8009b12:	4b09      	ldr	r3, [pc, #36]	@ (8009b38 <tcp_parseopt+0xe4>)
 8009b14:	881b      	ldrh	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d3b2      	bcc.n	8009a80 <tcp_parseopt+0x2c>
 8009b1a:	e004      	b.n	8009b26 <tcp_parseopt+0xd2>
          return;
 8009b1c:	bf00      	nop
 8009b1e:	e002      	b.n	8009b26 <tcp_parseopt+0xd2>
            return;
 8009b20:	bf00      	nop
 8009b22:	e000      	b.n	8009b26 <tcp_parseopt+0xd2>
            return;
 8009b24:	bf00      	nop
      }
    }
  }
}
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	0800fe84 	.word	0x0800fe84
 8009b30:	080102e8 	.word	0x080102e8
 8009b34:	0800fed0 	.word	0x0800fed0
 8009b38:	24007b98 	.word	0x24007b98
 8009b3c:	24007ba0 	.word	0x24007ba0

08009b40 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009b40:	b480      	push	{r7}
 8009b42:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009b44:	4b05      	ldr	r3, [pc, #20]	@ (8009b5c <tcp_trigger_input_pcb_close+0x1c>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f043 0310 	orr.w	r3, r3, #16
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	4b03      	ldr	r3, [pc, #12]	@ (8009b5c <tcp_trigger_input_pcb_close+0x1c>)
 8009b50:	701a      	strb	r2, [r3, #0]
}
 8009b52:	bf00      	nop
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	24007bb1 	.word	0x24007bb1

08009b60 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00a      	beq.n	8009b88 <tcp_route+0x28>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	7a1b      	ldrb	r3, [r3, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d006      	beq.n	8009b88 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	7a1b      	ldrb	r3, [r3, #8]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fb fb7c 	bl	800527c <netif_get_by_index>
 8009b84:	4603      	mov	r3, r0
 8009b86:	e003      	b.n	8009b90 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f002 fe5f 	bl	800c84c <ip4_route>
 8009b8e:	4603      	mov	r3, r0
  }
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009b98:	b590      	push	{r4, r7, lr}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d105      	bne.n	8009bba <tcp_create_segment+0x22>
 8009bae:	4b43      	ldr	r3, [pc, #268]	@ (8009cbc <tcp_create_segment+0x124>)
 8009bb0:	22a3      	movs	r2, #163	@ 0xa3
 8009bb2:	4943      	ldr	r1, [pc, #268]	@ (8009cc0 <tcp_create_segment+0x128>)
 8009bb4:	4843      	ldr	r0, [pc, #268]	@ (8009cc4 <tcp_create_segment+0x12c>)
 8009bb6:	f004 f935 	bl	800de24 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d105      	bne.n	8009bcc <tcp_create_segment+0x34>
 8009bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8009cbc <tcp_create_segment+0x124>)
 8009bc2:	22a4      	movs	r2, #164	@ 0xa4
 8009bc4:	4940      	ldr	r1, [pc, #256]	@ (8009cc8 <tcp_create_segment+0x130>)
 8009bc6:	483f      	ldr	r0, [pc, #252]	@ (8009cc4 <tcp_create_segment+0x12c>)
 8009bc8:	f004 f92c 	bl	800de24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009bcc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	f003 0304 	and.w	r3, r3, #4
 8009bd8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009bda:	2003      	movs	r0, #3
 8009bdc:	f7fa ffc8 	bl	8004b70 <memp_malloc>
 8009be0:	6138      	str	r0, [r7, #16]
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d104      	bne.n	8009bf2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009be8:	68b8      	ldr	r0, [r7, #8]
 8009bea:	f7fb fe87 	bl	80058fc <pbuf_free>
    return NULL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e060      	b.n	8009cb4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8009bf8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	891a      	ldrh	r2, [r3, #8]
 8009c0a:	7dfb      	ldrb	r3, [r7, #23]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d205      	bcs.n	8009c1e <tcp_create_segment+0x86>
 8009c12:	4b2a      	ldr	r3, [pc, #168]	@ (8009cbc <tcp_create_segment+0x124>)
 8009c14:	22b0      	movs	r2, #176	@ 0xb0
 8009c16:	492d      	ldr	r1, [pc, #180]	@ (8009ccc <tcp_create_segment+0x134>)
 8009c18:	482a      	ldr	r0, [pc, #168]	@ (8009cc4 <tcp_create_segment+0x12c>)
 8009c1a:	f004 f903 	bl	800de24 <iprintf>
  seg->len = p->tot_len - optlen;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	891a      	ldrh	r2, [r3, #8]
 8009c22:	7dfb      	ldrb	r3, [r7, #23]
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009c2e:	2114      	movs	r1, #20
 8009c30:	68b8      	ldr	r0, [r7, #8]
 8009c32:	f7fb fdcd 	bl	80057d0 <pbuf_add_header>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d004      	beq.n	8009c46 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009c3c:	6938      	ldr	r0, [r7, #16]
 8009c3e:	f7fd f8d2 	bl	8006de6 <tcp_seg_free>
    return NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	e036      	b.n	8009cb4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	8ada      	ldrh	r2, [r3, #22]
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	68dc      	ldr	r4, [r3, #12]
 8009c58:	4610      	mov	r0, r2
 8009c5a:	f7fa fa59 	bl	8004110 <lwip_htons>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8b1a      	ldrh	r2, [r3, #24]
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	68dc      	ldr	r4, [r3, #12]
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f7fa fa50 	bl	8004110 <lwip_htons>
 8009c70:	4603      	mov	r3, r0
 8009c72:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	68dc      	ldr	r4, [r3, #12]
 8009c78:	6838      	ldr	r0, [r7, #0]
 8009c7a:	f7fa fa5e 	bl	800413a <lwip_htonl>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	089b      	lsrs	r3, r3, #2
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	3305      	adds	r3, #5
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	031b      	lsls	r3, r3, #12
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	4313      	orrs	r3, r2
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	68dc      	ldr	r4, [r3, #12]
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	f7fa fa37 	bl	8004110 <lwip_htons>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	749a      	strb	r2, [r3, #18]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	74da      	strb	r2, [r3, #19]
  return seg;
 8009cb2:	693b      	ldr	r3, [r7, #16]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	371c      	adds	r7, #28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd90      	pop	{r4, r7, pc}
 8009cbc:	08010304 	.word	0x08010304
 8009cc0:	08010338 	.word	0x08010338
 8009cc4:	08010358 	.word	0x08010358
 8009cc8:	08010380 	.word	0x08010380
 8009ccc:	080103a4 	.word	0x080103a4

08009cd0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009cd0:	b590      	push	{r4, r7, lr}
 8009cd2:	b08b      	sub	sp, #44	@ 0x2c
 8009cd4:	af02      	add	r7, sp, #8
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	61fb      	str	r3, [r7, #28]
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d106      	bne.n	8009cfc <tcp_split_unsent_seg+0x2c>
 8009cee:	4b95      	ldr	r3, [pc, #596]	@ (8009f44 <tcp_split_unsent_seg+0x274>)
 8009cf0:	f240 324b 	movw	r2, #843	@ 0x34b
 8009cf4:	4994      	ldr	r1, [pc, #592]	@ (8009f48 <tcp_split_unsent_seg+0x278>)
 8009cf6:	4895      	ldr	r0, [pc, #596]	@ (8009f4c <tcp_split_unsent_seg+0x27c>)
 8009cf8:	f004 f894 	bl	800de24 <iprintf>

  useg = pcb->unsent;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d00:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009d08:	f04f 33ff 	mov.w	r3, #4294967295
 8009d0c:	e116      	b.n	8009f3c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009d0e:	887b      	ldrh	r3, [r7, #2]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d109      	bne.n	8009d28 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009d14:	4b8b      	ldr	r3, [pc, #556]	@ (8009f44 <tcp_split_unsent_seg+0x274>)
 8009d16:	f240 3253 	movw	r2, #851	@ 0x353
 8009d1a:	498d      	ldr	r1, [pc, #564]	@ (8009f50 <tcp_split_unsent_seg+0x280>)
 8009d1c:	488b      	ldr	r0, [pc, #556]	@ (8009f4c <tcp_split_unsent_seg+0x27c>)
 8009d1e:	f004 f881 	bl	800de24 <iprintf>
    return ERR_VAL;
 8009d22:	f06f 0305 	mvn.w	r3, #5
 8009d26:	e109      	b.n	8009f3c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	891b      	ldrh	r3, [r3, #8]
 8009d2c:	887a      	ldrh	r2, [r7, #2]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d301      	bcc.n	8009d36 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	e102      	b.n	8009f3c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d3a:	887a      	ldrh	r2, [r7, #2]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d906      	bls.n	8009d4e <tcp_split_unsent_seg+0x7e>
 8009d40:	4b80      	ldr	r3, [pc, #512]	@ (8009f44 <tcp_split_unsent_seg+0x274>)
 8009d42:	f240 325b 	movw	r2, #859	@ 0x35b
 8009d46:	4983      	ldr	r1, [pc, #524]	@ (8009f54 <tcp_split_unsent_seg+0x284>)
 8009d48:	4880      	ldr	r0, [pc, #512]	@ (8009f4c <tcp_split_unsent_seg+0x27c>)
 8009d4a:	f004 f86b 	bl	800de24 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	891b      	ldrh	r3, [r3, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d106      	bne.n	8009d64 <tcp_split_unsent_seg+0x94>
 8009d56:	4b7b      	ldr	r3, [pc, #492]	@ (8009f44 <tcp_split_unsent_seg+0x274>)
 8009d58:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8009d5c:	497e      	ldr	r1, [pc, #504]	@ (8009f58 <tcp_split_unsent_seg+0x288>)
 8009d5e:	487b      	ldr	r0, [pc, #492]	@ (8009f4c <tcp_split_unsent_seg+0x27c>)
 8009d60:	f004 f860 	bl	800de24 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	7a9b      	ldrb	r3, [r3, #10]
 8009d68:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	f003 0304 	and.w	r3, r3, #4
 8009d74:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	891a      	ldrh	r2, [r3, #8]
 8009d7a:	887b      	ldrh	r3, [r7, #2]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	89bb      	ldrh	r3, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009d8e:	4619      	mov	r1, r3
 8009d90:	2036      	movs	r0, #54	@ 0x36
 8009d92:	f7fb facf 	bl	8005334 <pbuf_alloc>
 8009d96:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f000 80b7 	beq.w	8009f0e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	891a      	ldrh	r2, [r3, #8]
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	891b      	ldrh	r3, [r3, #8]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	887b      	ldrh	r3, [r7, #2]
 8009db0:	4413      	add	r3, r2
 8009db2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	6858      	ldr	r0, [r3, #4]
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	18d1      	adds	r1, r2, r3
 8009dc0:	897b      	ldrh	r3, [r7, #10]
 8009dc2:	89ba      	ldrh	r2, [r7, #12]
 8009dc4:	f7fb ff84 	bl	8005cd0 <pbuf_copy_partial>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	461a      	mov	r2, r3
 8009dcc:	89bb      	ldrh	r3, [r7, #12]
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	f040 809f 	bne.w	8009f12 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	899b      	ldrh	r3, [r3, #12]
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fa f997 	bl	8004110 <lwip_htons>
 8009de2:	4603      	mov	r3, r0
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009dea:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009dec:	2300      	movs	r3, #0
 8009dee:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009df0:	7efb      	ldrb	r3, [r7, #27]
 8009df2:	f003 0308 	and.w	r3, r3, #8
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d007      	beq.n	8009e0a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009dfa:	7efb      	ldrb	r3, [r7, #27]
 8009dfc:	f023 0308 	bic.w	r3, r3, #8
 8009e00:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009e02:	7ebb      	ldrb	r3, [r7, #26]
 8009e04:	f043 0308 	orr.w	r3, r3, #8
 8009e08:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009e0a:	7efb      	ldrb	r3, [r7, #27]
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d007      	beq.n	8009e24 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009e14:	7efb      	ldrb	r3, [r7, #27]
 8009e16:	f023 0301 	bic.w	r3, r3, #1
 8009e1a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009e1c:	7ebb      	ldrb	r3, [r7, #26]
 8009e1e:	f043 0301 	orr.w	r3, r3, #1
 8009e22:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fa f985 	bl	800413a <lwip_htonl>
 8009e30:	4602      	mov	r2, r0
 8009e32:	887b      	ldrh	r3, [r7, #2]
 8009e34:	18d1      	adds	r1, r2, r3
 8009e36:	7eba      	ldrb	r2, [r7, #26]
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	6939      	ldr	r1, [r7, #16]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff fea9 	bl	8009b98 <tcp_create_segment>
 8009e46:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d063      	beq.n	8009f16 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fb fdda 	bl	8005a0c <pbuf_clen>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009e62:	1a9b      	subs	r3, r3, r2
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	6858      	ldr	r0, [r3, #4]
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	891a      	ldrh	r2, [r3, #8]
 8009e76:	89bb      	ldrh	r3, [r7, #12]
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	f7fb fbb7 	bl	80055f0 <pbuf_realloc>
  useg->len -= remainder;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	891a      	ldrh	r2, [r3, #8]
 8009e86:	89bb      	ldrh	r3, [r7, #12]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	899b      	ldrh	r3, [r3, #12]
 8009e96:	b29c      	uxth	r4, r3
 8009e98:	7efb      	ldrb	r3, [r7, #27]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fa f937 	bl	8004110 <lwip_htons>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	4322      	orrs	r2, r4
 8009eac:	b292      	uxth	r2, r2
 8009eae:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fb fda9 	bl	8005a0c <pbuf_clen>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009ec4:	4413      	add	r3, r2
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fb fd9a 	bl	8005a0c <pbuf_clen>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	461a      	mov	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009ee2:	4413      	add	r3, r2
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	69fa      	ldr	r2, [r7, #28]
 8009ef8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d103      	bne.n	8009f0a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e016      	b.n	8009f3c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009f0e:	bf00      	nop
 8009f10:	e002      	b.n	8009f18 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009f12:	bf00      	nop
 8009f14:	e000      	b.n	8009f18 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009f16:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d006      	beq.n	8009f2c <tcp_split_unsent_seg+0x25c>
 8009f1e:	4b09      	ldr	r3, [pc, #36]	@ (8009f44 <tcp_split_unsent_seg+0x274>)
 8009f20:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8009f24:	490d      	ldr	r1, [pc, #52]	@ (8009f5c <tcp_split_unsent_seg+0x28c>)
 8009f26:	4809      	ldr	r0, [pc, #36]	@ (8009f4c <tcp_split_unsent_seg+0x27c>)
 8009f28:	f003 ff7c 	bl	800de24 <iprintf>
  if (p != NULL) {
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d002      	beq.n	8009f38 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009f32:	6938      	ldr	r0, [r7, #16]
 8009f34:	f7fb fce2 	bl	80058fc <pbuf_free>
  }

  return ERR_MEM;
 8009f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3724      	adds	r7, #36	@ 0x24
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd90      	pop	{r4, r7, pc}
 8009f44:	08010304 	.word	0x08010304
 8009f48:	08010698 	.word	0x08010698
 8009f4c:	08010358 	.word	0x08010358
 8009f50:	080106bc 	.word	0x080106bc
 8009f54:	080106e0 	.word	0x080106e0
 8009f58:	080106f0 	.word	0x080106f0
 8009f5c:	08010700 	.word	0x08010700

08009f60 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d106      	bne.n	8009f7c <tcp_send_fin+0x1c>
 8009f6e:	4b21      	ldr	r3, [pc, #132]	@ (8009ff4 <tcp_send_fin+0x94>)
 8009f70:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8009f74:	4920      	ldr	r1, [pc, #128]	@ (8009ff8 <tcp_send_fin+0x98>)
 8009f76:	4821      	ldr	r0, [pc, #132]	@ (8009ffc <tcp_send_fin+0x9c>)
 8009f78:	f003 ff54 	bl	800de24 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d02e      	beq.n	8009fe2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f88:	60fb      	str	r3, [r7, #12]
 8009f8a:	e002      	b.n	8009f92 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1f8      	bne.n	8009f8c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	899b      	ldrh	r3, [r3, #12]
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fa f8b4 	bl	8004110 <lwip_htons>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f003 0307 	and.w	r3, r3, #7
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d116      	bne.n	8009fe2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	899b      	ldrh	r3, [r3, #12]
 8009fba:	b29c      	uxth	r4, r3
 8009fbc:	2001      	movs	r0, #1
 8009fbe:	f7fa f8a7 	bl	8004110 <lwip_htons>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	4322      	orrs	r2, r4
 8009fcc:	b292      	uxth	r2, r2
 8009fce:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	8b5b      	ldrh	r3, [r3, #26]
 8009fd4:	f043 0320 	orr.w	r3, r3, #32
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e004      	b.n	8009fec <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f80b 	bl	800a000 <tcp_enqueue_flags>
 8009fea:	4603      	mov	r3, r0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3714      	adds	r7, #20
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd90      	pop	{r4, r7, pc}
 8009ff4:	08010304 	.word	0x08010304
 8009ff8:	0801070c 	.word	0x0801070c
 8009ffc:	08010358 	.word	0x08010358

0800a000 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08a      	sub	sp, #40	@ 0x28
 800a004:	af02      	add	r7, sp, #8
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	460b      	mov	r3, r1
 800a00a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a00c:	2300      	movs	r3, #0
 800a00e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	f003 0303 	and.w	r3, r3, #3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d106      	bne.n	800a02c <tcp_enqueue_flags+0x2c>
 800a01e:	4b67      	ldr	r3, [pc, #412]	@ (800a1bc <tcp_enqueue_flags+0x1bc>)
 800a020:	f240 4211 	movw	r2, #1041	@ 0x411
 800a024:	4966      	ldr	r1, [pc, #408]	@ (800a1c0 <tcp_enqueue_flags+0x1c0>)
 800a026:	4867      	ldr	r0, [pc, #412]	@ (800a1c4 <tcp_enqueue_flags+0x1c4>)
 800a028:	f003 fefc 	bl	800de24 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d106      	bne.n	800a040 <tcp_enqueue_flags+0x40>
 800a032:	4b62      	ldr	r3, [pc, #392]	@ (800a1bc <tcp_enqueue_flags+0x1bc>)
 800a034:	f240 4213 	movw	r2, #1043	@ 0x413
 800a038:	4963      	ldr	r1, [pc, #396]	@ (800a1c8 <tcp_enqueue_flags+0x1c8>)
 800a03a:	4862      	ldr	r0, [pc, #392]	@ (800a1c4 <tcp_enqueue_flags+0x1c4>)
 800a03c:	f003 fef2 	bl	800de24 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a040:	78fb      	ldrb	r3, [r7, #3]
 800a042:	f003 0302 	and.w	r3, r3, #2
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a04a:	2301      	movs	r3, #1
 800a04c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a04e:	7ffb      	ldrb	r3, [r7, #31]
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	b2db      	uxtb	r3, r3
 800a054:	f003 0304 	and.w	r3, r3, #4
 800a058:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a05a:	7dfb      	ldrb	r3, [r7, #23]
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a062:	4619      	mov	r1, r3
 800a064:	2036      	movs	r0, #54	@ 0x36
 800a066:	f7fb f965 	bl	8005334 <pbuf_alloc>
 800a06a:	6138      	str	r0, [r7, #16]
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d109      	bne.n	800a086 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	8b5b      	ldrh	r3, [r3, #26]
 800a076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a080:	f04f 33ff 	mov.w	r3, #4294967295
 800a084:	e095      	b.n	800a1b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	895a      	ldrh	r2, [r3, #10]
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	429a      	cmp	r2, r3
 800a090:	d206      	bcs.n	800a0a0 <tcp_enqueue_flags+0xa0>
 800a092:	4b4a      	ldr	r3, [pc, #296]	@ (800a1bc <tcp_enqueue_flags+0x1bc>)
 800a094:	f240 4239 	movw	r2, #1081	@ 0x439
 800a098:	494c      	ldr	r1, [pc, #304]	@ (800a1cc <tcp_enqueue_flags+0x1cc>)
 800a09a:	484a      	ldr	r0, [pc, #296]	@ (800a1c4 <tcp_enqueue_flags+0x1c4>)
 800a09c:	f003 fec2 	bl	800de24 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800a0a4:	78fa      	ldrb	r2, [r7, #3]
 800a0a6:	7ffb      	ldrb	r3, [r7, #31]
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	6939      	ldr	r1, [r7, #16]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7ff fd72 	bl	8009b98 <tcp_create_segment>
 800a0b4:	60f8      	str	r0, [r7, #12]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d109      	bne.n	800a0d0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	8b5b      	ldrh	r3, [r3, #26]
 800a0c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a0ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ce:	e070      	b.n	800a1b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	f003 0303 	and.w	r3, r3, #3
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d006      	beq.n	800a0ea <tcp_enqueue_flags+0xea>
 800a0dc:	4b37      	ldr	r3, [pc, #220]	@ (800a1bc <tcp_enqueue_flags+0x1bc>)
 800a0de:	f240 4242 	movw	r2, #1090	@ 0x442
 800a0e2:	493b      	ldr	r1, [pc, #236]	@ (800a1d0 <tcp_enqueue_flags+0x1d0>)
 800a0e4:	4837      	ldr	r0, [pc, #220]	@ (800a1c4 <tcp_enqueue_flags+0x1c4>)
 800a0e6:	f003 fe9d 	bl	800de24 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	891b      	ldrh	r3, [r3, #8]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d006      	beq.n	800a100 <tcp_enqueue_flags+0x100>
 800a0f2:	4b32      	ldr	r3, [pc, #200]	@ (800a1bc <tcp_enqueue_flags+0x1bc>)
 800a0f4:	f240 4243 	movw	r2, #1091	@ 0x443
 800a0f8:	4936      	ldr	r1, [pc, #216]	@ (800a1d4 <tcp_enqueue_flags+0x1d4>)
 800a0fa:	4832      	ldr	r0, [pc, #200]	@ (800a1c4 <tcp_enqueue_flags+0x1c4>)
 800a0fc:	f003 fe92 	bl	800de24 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a104:	2b00      	cmp	r3, #0
 800a106:	d103      	bne.n	800a110 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a10e:	e00d      	b.n	800a12c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a114:	61bb      	str	r3, [r7, #24]
 800a116:	e002      	b.n	800a11e <tcp_enqueue_flags+0x11e>
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	61bb      	str	r3, [r7, #24]
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1f8      	bne.n	800a118 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d104      	bne.n	800a148 <tcp_enqueue_flags+0x148>
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b00      	cmp	r3, #0
 800a146:	d004      	beq.n	800a152 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a152:	78fb      	ldrb	r3, [r7, #3]
 800a154:	f003 0301 	and.w	r3, r3, #1
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d006      	beq.n	800a16a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	8b5b      	ldrh	r3, [r3, #26]
 800a160:	f043 0320 	orr.w	r3, r3, #32
 800a164:	b29a      	uxth	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fb fc4c 	bl	8005a0c <pbuf_clen>
 800a174:	4603      	mov	r3, r0
 800a176:	461a      	mov	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a17e:	4413      	add	r3, r2
 800a180:	b29a      	uxth	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00e      	beq.n	800a1b0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10a      	bne.n	800a1b0 <tcp_enqueue_flags+0x1b0>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d106      	bne.n	800a1b0 <tcp_enqueue_flags+0x1b0>
 800a1a2:	4b06      	ldr	r3, [pc, #24]	@ (800a1bc <tcp_enqueue_flags+0x1bc>)
 800a1a4:	f240 4265 	movw	r2, #1125	@ 0x465
 800a1a8:	490b      	ldr	r1, [pc, #44]	@ (800a1d8 <tcp_enqueue_flags+0x1d8>)
 800a1aa:	4806      	ldr	r0, [pc, #24]	@ (800a1c4 <tcp_enqueue_flags+0x1c4>)
 800a1ac:	f003 fe3a 	bl	800de24 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3720      	adds	r7, #32
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	08010304 	.word	0x08010304
 800a1c0:	08010728 	.word	0x08010728
 800a1c4:	08010358 	.word	0x08010358
 800a1c8:	08010780 	.word	0x08010780
 800a1cc:	080107a0 	.word	0x080107a0
 800a1d0:	080107dc 	.word	0x080107dc
 800a1d4:	080107f4 	.word	0x080107f4
 800a1d8:	08010820 	.word	0x08010820

0800a1dc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a1dc:	b5b0      	push	{r4, r5, r7, lr}
 800a1de:	b08a      	sub	sp, #40	@ 0x28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d106      	bne.n	800a1f8 <tcp_output+0x1c>
 800a1ea:	4b8a      	ldr	r3, [pc, #552]	@ (800a414 <tcp_output+0x238>)
 800a1ec:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800a1f0:	4989      	ldr	r1, [pc, #548]	@ (800a418 <tcp_output+0x23c>)
 800a1f2:	488a      	ldr	r0, [pc, #552]	@ (800a41c <tcp_output+0x240>)
 800a1f4:	f003 fe16 	bl	800de24 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	7d1b      	ldrb	r3, [r3, #20]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d106      	bne.n	800a20e <tcp_output+0x32>
 800a200:	4b84      	ldr	r3, [pc, #528]	@ (800a414 <tcp_output+0x238>)
 800a202:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800a206:	4986      	ldr	r1, [pc, #536]	@ (800a420 <tcp_output+0x244>)
 800a208:	4884      	ldr	r0, [pc, #528]	@ (800a41c <tcp_output+0x240>)
 800a20a:	f003 fe0b 	bl	800de24 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a20e:	4b85      	ldr	r3, [pc, #532]	@ (800a424 <tcp_output+0x248>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	429a      	cmp	r2, r3
 800a216:	d101      	bne.n	800a21c <tcp_output+0x40>
    return ERR_OK;
 800a218:	2300      	movs	r3, #0
 800a21a:	e1ce      	b.n	800a5ba <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a228:	4293      	cmp	r3, r2
 800a22a:	bf28      	it	cs
 800a22c:	4613      	movcs	r3, r2
 800a22e:	b29b      	uxth	r3, r3
 800a230:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a236:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800a238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10b      	bne.n	800a256 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	8b5b      	ldrh	r3, [r3, #26]
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 81aa 	beq.w	800a5a0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fdcb 	bl	800ade8 <tcp_send_empty_ack>
 800a252:	4603      	mov	r3, r0
 800a254:	e1b1      	b.n	800a5ba <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a256:	6879      	ldr	r1, [r7, #4]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	3304      	adds	r3, #4
 800a25c:	461a      	mov	r2, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7ff fc7e 	bl	8009b60 <tcp_route>
 800a264:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d102      	bne.n	800a272 <tcp_output+0x96>
    return ERR_RTE;
 800a26c:	f06f 0303 	mvn.w	r3, #3
 800a270:	e1a3      	b.n	800a5ba <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d003      	beq.n	800a280 <tcp_output+0xa4>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d111      	bne.n	800a2a4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d002      	beq.n	800a28c <tcp_output+0xb0>
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	3304      	adds	r3, #4
 800a28a:	e000      	b.n	800a28e <tcp_output+0xb2>
 800a28c:	2300      	movs	r3, #0
 800a28e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d102      	bne.n	800a29c <tcp_output+0xc0>
      return ERR_RTE;
 800a296:	f06f 0303 	mvn.w	r3, #3
 800a29a:	e18e      	b.n	800a5ba <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7f9 ff45 	bl	800413a <lwip_htonl>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2ba:	8912      	ldrh	r2, [r2, #8]
 800a2bc:	4413      	add	r3, r2
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d227      	bcs.n	800a314 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d114      	bne.n	800a2fc <tcp_output+0x120>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d110      	bne.n	800a2fc <tcp_output+0x120>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10b      	bne.n	800a2fc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	8b5b      	ldrh	r3, [r3, #26]
 800a300:	f003 0302 	and.w	r3, r3, #2
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 814d 	beq.w	800a5a4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fd6c 	bl	800ade8 <tcp_send_empty_ack>
 800a310:	4603      	mov	r3, r0
 800a312:	e152      	b.n	800a5ba <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a320:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 811c 	beq.w	800a562 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a32a:	e002      	b.n	800a332 <tcp_output+0x156>
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	623b      	str	r3, [r7, #32]
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1f8      	bne.n	800a32c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a33a:	e112      	b.n	800a562 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	899b      	ldrh	r3, [r3, #12]
 800a342:	b29b      	uxth	r3, r3
 800a344:	4618      	mov	r0, r3
 800a346:	f7f9 fee3 	bl	8004110 <lwip_htons>
 800a34a:	4603      	mov	r3, r0
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	f003 0304 	and.w	r3, r3, #4
 800a352:	2b00      	cmp	r3, #0
 800a354:	d006      	beq.n	800a364 <tcp_output+0x188>
 800a356:	4b2f      	ldr	r3, [pc, #188]	@ (800a414 <tcp_output+0x238>)
 800a358:	f240 5236 	movw	r2, #1334	@ 0x536
 800a35c:	4932      	ldr	r1, [pc, #200]	@ (800a428 <tcp_output+0x24c>)
 800a35e:	482f      	ldr	r0, [pc, #188]	@ (800a41c <tcp_output+0x240>)
 800a360:	f003 fd60 	bl	800de24 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d01f      	beq.n	800a3ac <tcp_output+0x1d0>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	8b5b      	ldrh	r3, [r3, #26]
 800a370:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800a374:	2b00      	cmp	r3, #0
 800a376:	d119      	bne.n	800a3ac <tcp_output+0x1d0>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00b      	beq.n	800a398 <tcp_output+0x1bc>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d110      	bne.n	800a3ac <tcp_output+0x1d0>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a38e:	891a      	ldrh	r2, [r3, #8]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a394:	429a      	cmp	r2, r3
 800a396:	d209      	bcs.n	800a3ac <tcp_output+0x1d0>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d004      	beq.n	800a3ac <tcp_output+0x1d0>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a3a8:	2b08      	cmp	r3, #8
 800a3aa:	d901      	bls.n	800a3b0 <tcp_output+0x1d4>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e000      	b.n	800a3b2 <tcp_output+0x1d6>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d106      	bne.n	800a3c4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	8b5b      	ldrh	r3, [r3, #26]
 800a3ba:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 80e4 	beq.w	800a58c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	7d1b      	ldrb	r3, [r3, #20]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d00d      	beq.n	800a3e8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	899b      	ldrh	r3, [r3, #12]
 800a3d2:	b29c      	uxth	r4, r3
 800a3d4:	2010      	movs	r0, #16
 800a3d6:	f7f9 fe9b 	bl	8004110 <lwip_htons>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	461a      	mov	r2, r3
 800a3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	4322      	orrs	r2, r4
 800a3e4:	b292      	uxth	r2, r2
 800a3e6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	6879      	ldr	r1, [r7, #4]
 800a3ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a3ee:	f000 f909 	bl	800a604 <tcp_output_segment>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a3f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d016      	beq.n	800a42c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	8b5b      	ldrh	r3, [r3, #26]
 800a402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a406:	b29a      	uxth	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	835a      	strh	r2, [r3, #26]
      return err;
 800a40c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a410:	e0d3      	b.n	800a5ba <tcp_output+0x3de>
 800a412:	bf00      	nop
 800a414:	08010304 	.word	0x08010304
 800a418:	08010848 	.word	0x08010848
 800a41c:	08010358 	.word	0x08010358
 800a420:	08010860 	.word	0x08010860
 800a424:	24007bb8 	.word	0x24007bb8
 800a428:	08010888 	.word	0x08010888
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	7d1b      	ldrb	r3, [r3, #20]
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d006      	beq.n	800a44a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	8b5b      	ldrh	r3, [r3, #26]
 800a440:	f023 0303 	bic.w	r3, r3, #3
 800a444:	b29a      	uxth	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	4618      	mov	r0, r3
 800a452:	f7f9 fe72 	bl	800413a <lwip_htonl>
 800a456:	4604      	mov	r4, r0
 800a458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45a:	891b      	ldrh	r3, [r3, #8]
 800a45c:	461d      	mov	r5, r3
 800a45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	899b      	ldrh	r3, [r3, #12]
 800a464:	b29b      	uxth	r3, r3
 800a466:	4618      	mov	r0, r3
 800a468:	f7f9 fe52 	bl	8004110 <lwip_htons>
 800a46c:	4603      	mov	r3, r0
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	f003 0303 	and.w	r3, r3, #3
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <tcp_output+0x2a0>
 800a478:	2301      	movs	r3, #1
 800a47a:	e000      	b.n	800a47e <tcp_output+0x2a2>
 800a47c:	2300      	movs	r3, #0
 800a47e:	442b      	add	r3, r5
 800a480:	4423      	add	r3, r4
 800a482:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	da02      	bge.n	800a496 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a498:	891b      	ldrh	r3, [r3, #8]
 800a49a:	461c      	mov	r4, r3
 800a49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	899b      	ldrh	r3, [r3, #12]
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7f9 fe33 	bl	8004110 <lwip_htons>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <tcp_output+0x2de>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e000      	b.n	800a4bc <tcp_output+0x2e0>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	4423      	add	r3, r4
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d049      	beq.n	800a556 <tcp_output+0x37a>
      seg->next = NULL;
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d105      	bne.n	800a4dc <tcp_output+0x300>
        pcb->unacked = seg;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4d4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d8:	623b      	str	r3, [r7, #32]
 800a4da:	e03f      	b.n	800a55c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7f9 fe29 	bl	800413a <lwip_htonl>
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7f9 fe22 	bl	800413a <lwip_htonl>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	1ae3      	subs	r3, r4, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	da24      	bge.n	800a548 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	3370      	adds	r3, #112	@ 0x70
 800a502:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a504:	e002      	b.n	800a50c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d011      	beq.n	800a538 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7f9 fe0c 	bl	800413a <lwip_htonl>
 800a522:	4604      	mov	r4, r0
 800a524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7f9 fe05 	bl	800413a <lwip_htonl>
 800a530:	4603      	mov	r3, r0
 800a532:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a534:	2b00      	cmp	r3, #0
 800a536:	dbe6      	blt.n	800a506 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	e009      	b.n	800a55c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a548:	6a3b      	ldr	r3, [r7, #32]
 800a54a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a54c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	623b      	str	r3, [r7, #32]
 800a554:	e002      	b.n	800a55c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a556:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a558:	f7fc fc45 	bl	8006de6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a560:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800a562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a564:	2b00      	cmp	r3, #0
 800a566:	d012      	beq.n	800a58e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	4618      	mov	r0, r3
 800a570:	f7f9 fde3 	bl	800413a <lwip_htonl>
 800a574:	4602      	mov	r2, r0
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a57e:	8912      	ldrh	r2, [r2, #8]
 800a580:	4413      	add	r3, r2
  while (seg != NULL &&
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	429a      	cmp	r2, r3
 800a586:	f4bf aed9 	bcs.w	800a33c <tcp_output+0x160>
 800a58a:	e000      	b.n	800a58e <tcp_output+0x3b2>
      break;
 800a58c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a592:	2b00      	cmp	r3, #0
 800a594:	d108      	bne.n	800a5a8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800a59e:	e004      	b.n	800a5aa <tcp_output+0x3ce>
    goto output_done;
 800a5a0:	bf00      	nop
 800a5a2:	e002      	b.n	800a5aa <tcp_output+0x3ce>
    goto output_done;
 800a5a4:	bf00      	nop
 800a5a6:	e000      	b.n	800a5aa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a5a8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	8b5b      	ldrh	r3, [r3, #26]
 800a5ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3728      	adds	r7, #40	@ 0x28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bdb0      	pop	{r4, r5, r7, pc}
 800a5c2:	bf00      	nop

0800a5c4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d106      	bne.n	800a5e0 <tcp_output_segment_busy+0x1c>
 800a5d2:	4b09      	ldr	r3, [pc, #36]	@ (800a5f8 <tcp_output_segment_busy+0x34>)
 800a5d4:	f240 529a 	movw	r2, #1434	@ 0x59a
 800a5d8:	4908      	ldr	r1, [pc, #32]	@ (800a5fc <tcp_output_segment_busy+0x38>)
 800a5da:	4809      	ldr	r0, [pc, #36]	@ (800a600 <tcp_output_segment_busy+0x3c>)
 800a5dc:	f003 fc22 	bl	800de24 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	7b9b      	ldrb	r3, [r3, #14]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d001      	beq.n	800a5ee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e000      	b.n	800a5f0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	08010304 	.word	0x08010304
 800a5fc:	080108a0 	.word	0x080108a0
 800a600:	08010358 	.word	0x08010358

0800a604 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a604:	b5b0      	push	{r4, r5, r7, lr}
 800a606:	b08c      	sub	sp, #48	@ 0x30
 800a608:	af04      	add	r7, sp, #16
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d106      	bne.n	800a624 <tcp_output_segment+0x20>
 800a616:	4b64      	ldr	r3, [pc, #400]	@ (800a7a8 <tcp_output_segment+0x1a4>)
 800a618:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800a61c:	4963      	ldr	r1, [pc, #396]	@ (800a7ac <tcp_output_segment+0x1a8>)
 800a61e:	4864      	ldr	r0, [pc, #400]	@ (800a7b0 <tcp_output_segment+0x1ac>)
 800a620:	f003 fc00 	bl	800de24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d106      	bne.n	800a638 <tcp_output_segment+0x34>
 800a62a:	4b5f      	ldr	r3, [pc, #380]	@ (800a7a8 <tcp_output_segment+0x1a4>)
 800a62c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800a630:	4960      	ldr	r1, [pc, #384]	@ (800a7b4 <tcp_output_segment+0x1b0>)
 800a632:	485f      	ldr	r0, [pc, #380]	@ (800a7b0 <tcp_output_segment+0x1ac>)
 800a634:	f003 fbf6 	bl	800de24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d106      	bne.n	800a64c <tcp_output_segment+0x48>
 800a63e:	4b5a      	ldr	r3, [pc, #360]	@ (800a7a8 <tcp_output_segment+0x1a4>)
 800a640:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800a644:	495c      	ldr	r1, [pc, #368]	@ (800a7b8 <tcp_output_segment+0x1b4>)
 800a646:	485a      	ldr	r0, [pc, #360]	@ (800a7b0 <tcp_output_segment+0x1ac>)
 800a648:	f003 fbec 	bl	800de24 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f7ff ffb9 	bl	800a5c4 <tcp_output_segment_busy>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	e0a1      	b.n	800a7a0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	68dc      	ldr	r4, [r3, #12]
 800a664:	4610      	mov	r0, r2
 800a666:	f7f9 fd68 	bl	800413a <lwip_htonl>
 800a66a:	4603      	mov	r3, r0
 800a66c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	68dc      	ldr	r4, [r3, #12]
 800a676:	4610      	mov	r0, r2
 800a678:	f7f9 fd4a 	bl	8004110 <lwip_htons>
 800a67c:	4603      	mov	r3, r0
 800a67e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800a688:	441a      	add	r2, r3
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	3314      	adds	r3, #20
 800a694:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	7a9b      	ldrb	r3, [r3, #10]
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d015      	beq.n	800a6ce <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	6879      	ldr	r1, [r7, #4]
 800a6aa:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800a6ae:	f7fc fe91 	bl	80073d4 <tcp_eff_send_mss_netif>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a6b6:	8b7b      	ldrh	r3, [r7, #26]
 800a6b8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7f9 fd3c 	bl	800413a <lwip_htonl>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	da02      	bge.n	800a6de <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10c      	bne.n	800a700 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a6e6:	4b35      	ldr	r3, [pc, #212]	@ (800a7bc <tcp_output_segment+0x1b8>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7f9 fd20 	bl	800413a <lwip_htonl>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	68da      	ldr	r2, [r3, #12]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	8959      	ldrh	r1, [r3, #10]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	8b3a      	ldrh	r2, [r7, #24]
 800a71a:	1a8a      	subs	r2, r1, r2
 800a71c:	b292      	uxth	r2, r2
 800a71e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	8919      	ldrh	r1, [r3, #8]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	8b3a      	ldrh	r2, [r7, #24]
 800a72c:	1a8a      	subs	r2, r1, r2
 800a72e:	b292      	uxth	r2, r2
 800a730:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	68d2      	ldr	r2, [r2, #12]
 800a73a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	741a      	strb	r2, [r3, #16]
 800a744:	2200      	movs	r2, #0
 800a746:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	68da      	ldr	r2, [r3, #12]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	7a9b      	ldrb	r3, [r3, #10]
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <tcp_output_segment+0x158>
 800a758:	2318      	movs	r3, #24
 800a75a:	e000      	b.n	800a75e <tcp_output_segment+0x15a>
 800a75c:	2314      	movs	r3, #20
 800a75e:	4413      	add	r3, r2
 800a760:	69fa      	ldr	r2, [r7, #28]
 800a762:	429a      	cmp	r2, r3
 800a764:	d006      	beq.n	800a774 <tcp_output_segment+0x170>
 800a766:	4b10      	ldr	r3, [pc, #64]	@ (800a7a8 <tcp_output_segment+0x1a4>)
 800a768:	f240 621c 	movw	r2, #1564	@ 0x61c
 800a76c:	4914      	ldr	r1, [pc, #80]	@ (800a7c0 <tcp_output_segment+0x1bc>)
 800a76e:	4810      	ldr	r0, [pc, #64]	@ (800a7b0 <tcp_output_segment+0x1ac>)
 800a770:	f003 fb58 	bl	800de24 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6858      	ldr	r0, [r3, #4]
 800a778:	68b9      	ldr	r1, [r7, #8]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	1d1c      	adds	r4, r3, #4
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	7add      	ldrb	r5, [r3, #11]
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	7a9b      	ldrb	r3, [r3, #10]
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	9202      	str	r2, [sp, #8]
 800a78a:	2206      	movs	r2, #6
 800a78c:	9201      	str	r2, [sp, #4]
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	462b      	mov	r3, r5
 800a792:	4622      	mov	r2, r4
 800a794:	f002 fa18 	bl	800cbc8 <ip4_output_if>
 800a798:	4603      	mov	r3, r0
 800a79a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a79c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3720      	adds	r7, #32
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bdb0      	pop	{r4, r5, r7, pc}
 800a7a8:	08010304 	.word	0x08010304
 800a7ac:	080108c8 	.word	0x080108c8
 800a7b0:	08010358 	.word	0x08010358
 800a7b4:	080108e8 	.word	0x080108e8
 800a7b8:	08010908 	.word	0x08010908
 800a7bc:	24007b6c 	.word	0x24007b6c
 800a7c0:	0801092c 	.word	0x0801092c

0800a7c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a7c4:	b5b0      	push	{r4, r5, r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d106      	bne.n	800a7e0 <tcp_rexmit_rto_prepare+0x1c>
 800a7d2:	4b31      	ldr	r3, [pc, #196]	@ (800a898 <tcp_rexmit_rto_prepare+0xd4>)
 800a7d4:	f240 6263 	movw	r2, #1635	@ 0x663
 800a7d8:	4930      	ldr	r1, [pc, #192]	@ (800a89c <tcp_rexmit_rto_prepare+0xd8>)
 800a7da:	4831      	ldr	r0, [pc, #196]	@ (800a8a0 <tcp_rexmit_rto_prepare+0xdc>)
 800a7dc:	f003 fb22 	bl	800de24 <iprintf>

  if (pcb->unacked == NULL) {
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a7e8:	f06f 0305 	mvn.w	r3, #5
 800a7ec:	e050      	b.n	800a890 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7f2:	60fb      	str	r3, [r7, #12]
 800a7f4:	e00b      	b.n	800a80e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f7ff fee4 	bl	800a5c4 <tcp_output_segment_busy>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a802:	f06f 0305 	mvn.w	r3, #5
 800a806:	e043      	b.n	800a890 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1ef      	bne.n	800a7f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f7ff fed4 	bl	800a5c4 <tcp_output_segment_busy>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d002      	beq.n	800a828 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a822:	f06f 0305 	mvn.w	r3, #5
 800a826:	e033      	b.n	800a890 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	8b5b      	ldrh	r3, [r3, #26]
 800a842:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a846:	b29a      	uxth	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	4618      	mov	r0, r3
 800a854:	f7f9 fc71 	bl	800413a <lwip_htonl>
 800a858:	4604      	mov	r4, r0
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	891b      	ldrh	r3, [r3, #8]
 800a85e:	461d      	mov	r5, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	899b      	ldrh	r3, [r3, #12]
 800a866:	b29b      	uxth	r3, r3
 800a868:	4618      	mov	r0, r3
 800a86a:	f7f9 fc51 	bl	8004110 <lwip_htons>
 800a86e:	4603      	mov	r3, r0
 800a870:	b2db      	uxtb	r3, r3
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <tcp_rexmit_rto_prepare+0xba>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e000      	b.n	800a880 <tcp_rexmit_rto_prepare+0xbc>
 800a87e:	2300      	movs	r3, #0
 800a880:	442b      	add	r3, r5
 800a882:	18e2      	adds	r2, r4, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bdb0      	pop	{r4, r5, r7, pc}
 800a898:	08010304 	.word	0x08010304
 800a89c:	08010940 	.word	0x08010940
 800a8a0:	08010358 	.word	0x08010358

0800a8a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d106      	bne.n	800a8c0 <tcp_rexmit_rto_commit+0x1c>
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e8 <tcp_rexmit_rto_commit+0x44>)
 800a8b4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a8b8:	490c      	ldr	r1, [pc, #48]	@ (800a8ec <tcp_rexmit_rto_commit+0x48>)
 800a8ba:	480d      	ldr	r0, [pc, #52]	@ (800a8f0 <tcp_rexmit_rto_commit+0x4c>)
 800a8bc:	f003 fab2 	bl	800de24 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8c6:	2bff      	cmp	r3, #255	@ 0xff
 800a8c8:	d007      	beq.n	800a8da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7ff fc7e 	bl	800a1dc <tcp_output>
}
 800a8e0:	bf00      	nop
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	08010304 	.word	0x08010304
 800a8ec:	08010964 	.word	0x08010964
 800a8f0:	08010358 	.word	0x08010358

0800a8f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d106      	bne.n	800a910 <tcp_rexmit_rto+0x1c>
 800a902:	4b0a      	ldr	r3, [pc, #40]	@ (800a92c <tcp_rexmit_rto+0x38>)
 800a904:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800a908:	4909      	ldr	r1, [pc, #36]	@ (800a930 <tcp_rexmit_rto+0x3c>)
 800a90a:	480a      	ldr	r0, [pc, #40]	@ (800a934 <tcp_rexmit_rto+0x40>)
 800a90c:	f003 fa8a 	bl	800de24 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff ff57 	bl	800a7c4 <tcp_rexmit_rto_prepare>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d102      	bne.n	800a922 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7ff ffc1 	bl	800a8a4 <tcp_rexmit_rto_commit>
  }
}
 800a922:	bf00      	nop
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	08010304 	.word	0x08010304
 800a930:	08010988 	.word	0x08010988
 800a934:	08010358 	.word	0x08010358

0800a938 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a938:	b590      	push	{r4, r7, lr}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d106      	bne.n	800a954 <tcp_rexmit+0x1c>
 800a946:	4b2f      	ldr	r3, [pc, #188]	@ (800aa04 <tcp_rexmit+0xcc>)
 800a948:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800a94c:	492e      	ldr	r1, [pc, #184]	@ (800aa08 <tcp_rexmit+0xd0>)
 800a94e:	482f      	ldr	r0, [pc, #188]	@ (800aa0c <tcp_rexmit+0xd4>)
 800a950:	f003 fa68 	bl	800de24 <iprintf>

  if (pcb->unacked == NULL) {
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d102      	bne.n	800a962 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a95c:	f06f 0305 	mvn.w	r3, #5
 800a960:	e04c      	b.n	800a9fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a966:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a968:	68b8      	ldr	r0, [r7, #8]
 800a96a:	f7ff fe2b 	bl	800a5c4 <tcp_output_segment_busy>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a974:	f06f 0305 	mvn.w	r3, #5
 800a978:	e040      	b.n	800a9fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	336c      	adds	r3, #108	@ 0x6c
 800a986:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a988:	e002      	b.n	800a990 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d011      	beq.n	800a9bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7f9 fbca 	bl	800413a <lwip_htonl>
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f9 fbc3 	bl	800413a <lwip_htonl>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	dbe6      	blt.n	800a98a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d103      	bne.n	800a9da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a9e0:	2bff      	cmp	r3, #255	@ 0xff
 800a9e2:	d007      	beq.n	800a9f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd90      	pop	{r4, r7, pc}
 800aa04:	08010304 	.word	0x08010304
 800aa08:	080109a4 	.word	0x080109a4
 800aa0c:	08010358 	.word	0x08010358

0800aa10 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d106      	bne.n	800aa2c <tcp_rexmit_fast+0x1c>
 800aa1e:	4b2a      	ldr	r3, [pc, #168]	@ (800aac8 <tcp_rexmit_fast+0xb8>)
 800aa20:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800aa24:	4929      	ldr	r1, [pc, #164]	@ (800aacc <tcp_rexmit_fast+0xbc>)
 800aa26:	482a      	ldr	r0, [pc, #168]	@ (800aad0 <tcp_rexmit_fast+0xc0>)
 800aa28:	f003 f9fc 	bl	800de24 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d045      	beq.n	800aac0 <tcp_rexmit_fast+0xb0>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	8b5b      	ldrh	r3, [r3, #26]
 800aa38:	f003 0304 	and.w	r3, r3, #4
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d13f      	bne.n	800aac0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7ff ff79 	bl	800a938 <tcp_rexmit>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d139      	bne.n	800aac0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	bf28      	it	cs
 800aa5c:	4613      	movcs	r3, r2
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	da00      	bge.n	800aa66 <tcp_rexmit_fast+0x56>
 800aa64:	3301      	adds	r3, #1
 800aa66:	105b      	asrs	r3, r3, #1
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800aa76:	461a      	mov	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d206      	bcs.n	800aa90 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aa86:	005b      	lsls	r3, r3, #1
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	0049      	lsls	r1, r1, #1
 800aa9e:	440b      	add	r3, r1
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	4413      	add	r3, r2
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	8b5b      	ldrh	r3, [r3, #26]
 800aab0:	f043 0304 	orr.w	r3, r3, #4
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800aac0:	bf00      	nop
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	08010304 	.word	0x08010304
 800aacc:	080109bc 	.word	0x080109bc
 800aad0:	08010358 	.word	0x08010358

0800aad4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	607b      	str	r3, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	817b      	strh	r3, [r7, #10]
 800aae2:	4613      	mov	r3, r2
 800aae4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800aae6:	897a      	ldrh	r2, [r7, #10]
 800aae8:	893b      	ldrh	r3, [r7, #8]
 800aaea:	4413      	add	r3, r2
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	3314      	adds	r3, #20
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	2022      	movs	r0, #34	@ 0x22
 800aafa:	f7fa fc1b 	bl	8005334 <pbuf_alloc>
 800aafe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d04d      	beq.n	800aba2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ab06:	897b      	ldrh	r3, [r7, #10]
 800ab08:	3313      	adds	r3, #19
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	8952      	ldrh	r2, [r2, #10]
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	db06      	blt.n	800ab20 <tcp_output_alloc_header_common+0x4c>
 800ab12:	4b26      	ldr	r3, [pc, #152]	@ (800abac <tcp_output_alloc_header_common+0xd8>)
 800ab14:	f240 7223 	movw	r2, #1827	@ 0x723
 800ab18:	4925      	ldr	r1, [pc, #148]	@ (800abb0 <tcp_output_alloc_header_common+0xdc>)
 800ab1a:	4826      	ldr	r0, [pc, #152]	@ (800abb4 <tcp_output_alloc_header_common+0xe0>)
 800ab1c:	f003 f982 	bl	800de24 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ab26:	8c3b      	ldrh	r3, [r7, #32]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7f9 faf1 	bl	8004110 <lwip_htons>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	461a      	mov	r2, r3
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ab36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7f9 fae9 	bl	8004110 <lwip_htons>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	461a      	mov	r2, r3
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f7f9 faf4 	bl	800413a <lwip_htonl>
 800ab52:	4602      	mov	r2, r0
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ab58:	897b      	ldrh	r3, [r7, #10]
 800ab5a:	089b      	lsrs	r3, r3, #2
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	3305      	adds	r3, #5
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	031b      	lsls	r3, r3, #12
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7f9 facd 	bl	8004110 <lwip_htons>
 800ab76:	4603      	mov	r3, r0
 800ab78:	461a      	mov	r2, r3
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ab7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7f9 fac5 	bl	8004110 <lwip_htons>
 800ab86:	4603      	mov	r3, r0
 800ab88:	461a      	mov	r2, r3
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	2200      	movs	r2, #0
 800ab92:	741a      	strb	r2, [r3, #16]
 800ab94:	2200      	movs	r2, #0
 800ab96:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	749a      	strb	r2, [r3, #18]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800aba2:	697b      	ldr	r3, [r7, #20]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	08010304 	.word	0x08010304
 800abb0:	080109dc 	.word	0x080109dc
 800abb4:	08010358 	.word	0x08010358

0800abb8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800abb8:	b5b0      	push	{r4, r5, r7, lr}
 800abba:	b08a      	sub	sp, #40	@ 0x28
 800abbc:	af04      	add	r7, sp, #16
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	607b      	str	r3, [r7, #4]
 800abc2:	460b      	mov	r3, r1
 800abc4:	817b      	strh	r3, [r7, #10]
 800abc6:	4613      	mov	r3, r2
 800abc8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d106      	bne.n	800abde <tcp_output_alloc_header+0x26>
 800abd0:	4b15      	ldr	r3, [pc, #84]	@ (800ac28 <tcp_output_alloc_header+0x70>)
 800abd2:	f240 7242 	movw	r2, #1858	@ 0x742
 800abd6:	4915      	ldr	r1, [pc, #84]	@ (800ac2c <tcp_output_alloc_header+0x74>)
 800abd8:	4815      	ldr	r0, [pc, #84]	@ (800ac30 <tcp_output_alloc_header+0x78>)
 800abda:	f003 f923 	bl	800de24 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	8adb      	ldrh	r3, [r3, #22]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	8b12      	ldrh	r2, [r2, #24]
 800abea:	68f9      	ldr	r1, [r7, #12]
 800abec:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800abee:	893d      	ldrh	r5, [r7, #8]
 800abf0:	897c      	ldrh	r4, [r7, #10]
 800abf2:	9103      	str	r1, [sp, #12]
 800abf4:	2110      	movs	r1, #16
 800abf6:	9102      	str	r1, [sp, #8]
 800abf8:	9201      	str	r2, [sp, #4]
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	462a      	mov	r2, r5
 800ac00:	4621      	mov	r1, r4
 800ac02:	f7ff ff67 	bl	800aad4 <tcp_output_alloc_header_common>
 800ac06:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d006      	beq.n	800ac1c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ac16:	441a      	add	r2, r3
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800ac1c:	697b      	ldr	r3, [r7, #20]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bdb0      	pop	{r4, r5, r7, pc}
 800ac26:	bf00      	nop
 800ac28:	08010304 	.word	0x08010304
 800ac2c:	08010a0c 	.word	0x08010a0c
 800ac30:	08010358 	.word	0x08010358

0800ac34 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b088      	sub	sp, #32
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	4611      	mov	r1, r2
 800ac40:	461a      	mov	r2, r3
 800ac42:	460b      	mov	r3, r1
 800ac44:	71fb      	strb	r3, [r7, #7]
 800ac46:	4613      	mov	r3, r2
 800ac48:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d106      	bne.n	800ac62 <tcp_output_fill_options+0x2e>
 800ac54:	4b12      	ldr	r3, [pc, #72]	@ (800aca0 <tcp_output_fill_options+0x6c>)
 800ac56:	f240 7256 	movw	r2, #1878	@ 0x756
 800ac5a:	4912      	ldr	r1, [pc, #72]	@ (800aca4 <tcp_output_fill_options+0x70>)
 800ac5c:	4812      	ldr	r0, [pc, #72]	@ (800aca8 <tcp_output_fill_options+0x74>)
 800ac5e:	f003 f8e1 	bl	800de24 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	3314      	adds	r3, #20
 800ac6c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ac6e:	8bfb      	ldrh	r3, [r7, #30]
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	461a      	mov	r2, r3
 800ac74:	79fb      	ldrb	r3, [r7, #7]
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	f003 0304 	and.w	r3, r3, #4
 800ac7c:	4413      	add	r3, r2
 800ac7e:	3314      	adds	r3, #20
 800ac80:	69ba      	ldr	r2, [r7, #24]
 800ac82:	4413      	add	r3, r2
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d006      	beq.n	800ac98 <tcp_output_fill_options+0x64>
 800ac8a:	4b05      	ldr	r3, [pc, #20]	@ (800aca0 <tcp_output_fill_options+0x6c>)
 800ac8c:	f240 7275 	movw	r2, #1909	@ 0x775
 800ac90:	4906      	ldr	r1, [pc, #24]	@ (800acac <tcp_output_fill_options+0x78>)
 800ac92:	4805      	ldr	r0, [pc, #20]	@ (800aca8 <tcp_output_fill_options+0x74>)
 800ac94:	f003 f8c6 	bl	800de24 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ac98:	bf00      	nop
 800ac9a:	3720      	adds	r7, #32
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	08010304 	.word	0x08010304
 800aca4:	08010a34 	.word	0x08010a34
 800aca8:	08010358 	.word	0x08010358
 800acac:	0801092c 	.word	0x0801092c

0800acb0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08a      	sub	sp, #40	@ 0x28
 800acb4:	af04      	add	r7, sp, #16
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
 800acbc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d106      	bne.n	800acd2 <tcp_output_control_segment+0x22>
 800acc4:	4b1c      	ldr	r3, [pc, #112]	@ (800ad38 <tcp_output_control_segment+0x88>)
 800acc6:	f240 7287 	movw	r2, #1927	@ 0x787
 800acca:	491c      	ldr	r1, [pc, #112]	@ (800ad3c <tcp_output_control_segment+0x8c>)
 800accc:	481c      	ldr	r0, [pc, #112]	@ (800ad40 <tcp_output_control_segment+0x90>)
 800acce:	f003 f8a9 	bl	800de24 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800acd2:	683a      	ldr	r2, [r7, #0]
 800acd4:	6879      	ldr	r1, [r7, #4]
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f7fe ff42 	bl	8009b60 <tcp_route>
 800acdc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ace4:	23fc      	movs	r3, #252	@ 0xfc
 800ace6:	75fb      	strb	r3, [r7, #23]
 800ace8:	e01c      	b.n	800ad24 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d006      	beq.n	800acfe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	7adb      	ldrb	r3, [r3, #11]
 800acf4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	7a9b      	ldrb	r3, [r3, #10]
 800acfa:	757b      	strb	r3, [r7, #21]
 800acfc:	e003      	b.n	800ad06 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800acfe:	23ff      	movs	r3, #255	@ 0xff
 800ad00:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ad06:	7dba      	ldrb	r2, [r7, #22]
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	9302      	str	r3, [sp, #8]
 800ad0c:	2306      	movs	r3, #6
 800ad0e:	9301      	str	r3, [sp, #4]
 800ad10:	7d7b      	ldrb	r3, [r7, #21]
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	4613      	mov	r3, r2
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	6879      	ldr	r1, [r7, #4]
 800ad1a:	68b8      	ldr	r0, [r7, #8]
 800ad1c:	f001 ff54 	bl	800cbc8 <ip4_output_if>
 800ad20:	4603      	mov	r3, r0
 800ad22:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ad24:	68b8      	ldr	r0, [r7, #8]
 800ad26:	f7fa fde9 	bl	80058fc <pbuf_free>
  return err;
 800ad2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3718      	adds	r7, #24
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	08010304 	.word	0x08010304
 800ad3c:	08010a5c 	.word	0x08010a5c
 800ad40:	08010358 	.word	0x08010358

0800ad44 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ad44:	b590      	push	{r4, r7, lr}
 800ad46:	b08b      	sub	sp, #44	@ 0x2c
 800ad48:	af04      	add	r7, sp, #16
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d106      	bne.n	800ad66 <tcp_rst+0x22>
 800ad58:	4b1f      	ldr	r3, [pc, #124]	@ (800add8 <tcp_rst+0x94>)
 800ad5a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800ad5e:	491f      	ldr	r1, [pc, #124]	@ (800addc <tcp_rst+0x98>)
 800ad60:	481f      	ldr	r0, [pc, #124]	@ (800ade0 <tcp_rst+0x9c>)
 800ad62:	f003 f85f 	bl	800de24 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ad66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d106      	bne.n	800ad7a <tcp_rst+0x36>
 800ad6c:	4b1a      	ldr	r3, [pc, #104]	@ (800add8 <tcp_rst+0x94>)
 800ad6e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800ad72:	491c      	ldr	r1, [pc, #112]	@ (800ade4 <tcp_rst+0xa0>)
 800ad74:	481a      	ldr	r0, [pc, #104]	@ (800ade0 <tcp_rst+0x9c>)
 800ad76:	f003 f855 	bl	800de24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ad7e:	f246 0308 	movw	r3, #24584	@ 0x6008
 800ad82:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
 800ad86:	b29c      	uxth	r4, r3
 800ad88:	68b8      	ldr	r0, [r7, #8]
 800ad8a:	f7f9 f9d6 	bl	800413a <lwip_htonl>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	8abb      	ldrh	r3, [r7, #20]
 800ad92:	9303      	str	r3, [sp, #12]
 800ad94:	2314      	movs	r3, #20
 800ad96:	9302      	str	r3, [sp, #8]
 800ad98:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ad9a:	9301      	str	r3, [sp, #4]
 800ad9c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	4613      	mov	r3, r2
 800ada2:	2200      	movs	r2, #0
 800ada4:	4621      	mov	r1, r4
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7ff fe94 	bl	800aad4 <tcp_output_alloc_header_common>
 800adac:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00c      	beq.n	800adce <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800adb4:	7dfb      	ldrb	r3, [r7, #23]
 800adb6:	2200      	movs	r2, #0
 800adb8:	6939      	ldr	r1, [r7, #16]
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f7ff ff3a 	bl	800ac34 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800adc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	6939      	ldr	r1, [r7, #16]
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f7ff ff72 	bl	800acb0 <tcp_output_control_segment>
 800adcc:	e000      	b.n	800add0 <tcp_rst+0x8c>
    return;
 800adce:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800add0:	371c      	adds	r7, #28
 800add2:	46bd      	mov	sp, r7
 800add4:	bd90      	pop	{r4, r7, pc}
 800add6:	bf00      	nop
 800add8:	08010304 	.word	0x08010304
 800addc:	08010a88 	.word	0x08010a88
 800ade0:	08010358 	.word	0x08010358
 800ade4:	08010aa4 	.word	0x08010aa4

0800ade8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ade8:	b590      	push	{r4, r7, lr}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d106      	bne.n	800ae0c <tcp_send_empty_ack+0x24>
 800adfe:	4b28      	ldr	r3, [pc, #160]	@ (800aea0 <tcp_send_empty_ack+0xb8>)
 800ae00:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800ae04:	4927      	ldr	r1, [pc, #156]	@ (800aea4 <tcp_send_empty_ack+0xbc>)
 800ae06:	4828      	ldr	r0, [pc, #160]	@ (800aea8 <tcp_send_empty_ack+0xc0>)
 800ae08:	f003 f80c 	bl	800de24 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ae0c:	7dfb      	ldrb	r3, [r7, #23]
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	f003 0304 	and.w	r3, r3, #4
 800ae16:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ae18:	7d7b      	ldrb	r3, [r7, #21]
 800ae1a:	b29c      	uxth	r4, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7f9 f98a 	bl	800413a <lwip_htonl>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2200      	movs	r2, #0
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff fec3 	bl	800abb8 <tcp_output_alloc_header>
 800ae32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d109      	bne.n	800ae4e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	8b5b      	ldrh	r3, [r3, #26]
 800ae3e:	f043 0303 	orr.w	r3, r3, #3
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ae48:	f06f 0301 	mvn.w	r3, #1
 800ae4c:	e023      	b.n	800ae96 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ae4e:	7dbb      	ldrb	r3, [r7, #22]
 800ae50:	7dfa      	ldrb	r2, [r7, #23]
 800ae52:	6939      	ldr	r1, [r7, #16]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7ff feed 	bl	800ac34 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3304      	adds	r3, #4
 800ae60:	6939      	ldr	r1, [r7, #16]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7ff ff24 	bl	800acb0 <tcp_output_control_segment>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ae6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d007      	beq.n	800ae84 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	8b5b      	ldrh	r3, [r3, #26]
 800ae78:	f043 0303 	orr.w	r3, r3, #3
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	835a      	strh	r2, [r3, #26]
 800ae82:	e006      	b.n	800ae92 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	8b5b      	ldrh	r3, [r3, #26]
 800ae88:	f023 0303 	bic.w	r3, r3, #3
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ae92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	371c      	adds	r7, #28
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd90      	pop	{r4, r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	08010304 	.word	0x08010304
 800aea4:	08010ac0 	.word	0x08010ac0
 800aea8:	08010358 	.word	0x08010358

0800aeac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800aeac:	b590      	push	{r4, r7, lr}
 800aeae:	b087      	sub	sp, #28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d106      	bne.n	800aecc <tcp_keepalive+0x20>
 800aebe:	4b18      	ldr	r3, [pc, #96]	@ (800af20 <tcp_keepalive+0x74>)
 800aec0:	f640 0224 	movw	r2, #2084	@ 0x824
 800aec4:	4917      	ldr	r1, [pc, #92]	@ (800af24 <tcp_keepalive+0x78>)
 800aec6:	4818      	ldr	r0, [pc, #96]	@ (800af28 <tcp_keepalive+0x7c>)
 800aec8:	f002 ffac 	bl	800de24 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800aecc:	7dfb      	ldrb	r3, [r7, #23]
 800aece:	b29c      	uxth	r4, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aed4:	3b01      	subs	r3, #1
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7f9 f92f 	bl	800413a <lwip_htonl>
 800aedc:	4603      	mov	r3, r0
 800aede:	2200      	movs	r2, #0
 800aee0:	4621      	mov	r1, r4
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7ff fe68 	bl	800abb8 <tcp_output_alloc_header>
 800aee8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d102      	bne.n	800aef6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800aef0:	f04f 33ff 	mov.w	r3, #4294967295
 800aef4:	e010      	b.n	800af18 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
 800aef8:	2200      	movs	r2, #0
 800aefa:	6939      	ldr	r1, [r7, #16]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7ff fe99 	bl	800ac34 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3304      	adds	r3, #4
 800af08:	6939      	ldr	r1, [r7, #16]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7ff fed0 	bl	800acb0 <tcp_output_control_segment>
 800af10:	4603      	mov	r3, r0
 800af12:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800af14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	371c      	adds	r7, #28
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd90      	pop	{r4, r7, pc}
 800af20:	08010304 	.word	0x08010304
 800af24:	08010ae0 	.word	0x08010ae0
 800af28:	08010358 	.word	0x08010358

0800af2c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800af2c:	b590      	push	{r4, r7, lr}
 800af2e:	b08b      	sub	sp, #44	@ 0x2c
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800af34:	2300      	movs	r3, #0
 800af36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d106      	bne.n	800af4e <tcp_zero_window_probe+0x22>
 800af40:	4b4c      	ldr	r3, [pc, #304]	@ (800b074 <tcp_zero_window_probe+0x148>)
 800af42:	f640 024f 	movw	r2, #2127	@ 0x84f
 800af46:	494c      	ldr	r1, [pc, #304]	@ (800b078 <tcp_zero_window_probe+0x14c>)
 800af48:	484c      	ldr	r0, [pc, #304]	@ (800b07c <tcp_zero_window_probe+0x150>)
 800af4a:	f002 ff6b 	bl	800de24 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af52:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d101      	bne.n	800af5e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	e086      	b.n	800b06c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800af64:	2bff      	cmp	r3, #255	@ 0xff
 800af66:	d007      	beq.n	800af78 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800af6e:	3301      	adds	r3, #1
 800af70:	b2da      	uxtb	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800af78:	6a3b      	ldr	r3, [r7, #32]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	899b      	ldrh	r3, [r3, #12]
 800af7e:	b29b      	uxth	r3, r3
 800af80:	4618      	mov	r0, r3
 800af82:	f7f9 f8c5 	bl	8004110 <lwip_htons>
 800af86:	4603      	mov	r3, r0
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d005      	beq.n	800af9e <tcp_zero_window_probe+0x72>
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	891b      	ldrh	r3, [r3, #8]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <tcp_zero_window_probe+0x72>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e000      	b.n	800afa0 <tcp_zero_window_probe+0x74>
 800af9e:	2300      	movs	r3, #0
 800afa0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800afa2:	7ffb      	ldrb	r3, [r7, #31]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bf0c      	ite	eq
 800afa8:	2301      	moveq	r3, #1
 800afaa:	2300      	movne	r3, #0
 800afac:	b2db      	uxtb	r3, r3
 800afae:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800afb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800afb4:	b299      	uxth	r1, r3
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	8bba      	ldrh	r2, [r7, #28]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff fdfa 	bl	800abb8 <tcp_output_alloc_header>
 800afc4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800afcc:	f04f 33ff 	mov.w	r3, #4294967295
 800afd0:	e04c      	b.n	800b06c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800afd8:	7ffb      	ldrb	r3, [r7, #31]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d011      	beq.n	800b002 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	899b      	ldrh	r3, [r3, #12]
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	b21b      	sxth	r3, r3
 800afe6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800afea:	b21c      	sxth	r4, r3
 800afec:	2011      	movs	r0, #17
 800afee:	f7f9 f88f 	bl	8004110 <lwip_htons>
 800aff2:	4603      	mov	r3, r0
 800aff4:	b21b      	sxth	r3, r3
 800aff6:	4323      	orrs	r3, r4
 800aff8:	b21b      	sxth	r3, r3
 800affa:	b29a      	uxth	r2, r3
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	819a      	strh	r2, [r3, #12]
 800b000:	e010      	b.n	800b024 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	3314      	adds	r3, #20
 800b008:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	6858      	ldr	r0, [r3, #4]
 800b00e:	6a3b      	ldr	r3, [r7, #32]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	891a      	ldrh	r2, [r3, #8]
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	891b      	ldrh	r3, [r3, #8]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	2201      	movs	r2, #1
 800b01e:	6939      	ldr	r1, [r7, #16]
 800b020:	f7fa fe56 	bl	8005cd0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b024:	6a3b      	ldr	r3, [r7, #32]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7f9 f885 	bl	800413a <lwip_htonl>
 800b030:	4603      	mov	r3, r0
 800b032:	3301      	adds	r3, #1
 800b034:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	2b00      	cmp	r3, #0
 800b040:	da02      	bge.n	800b048 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b04c:	2200      	movs	r2, #0
 800b04e:	69b9      	ldr	r1, [r7, #24]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7ff fdef 	bl	800ac34 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3304      	adds	r3, #4
 800b05c:	69b9      	ldr	r1, [r7, #24]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff fe26 	bl	800acb0 <tcp_output_control_segment>
 800b064:	4603      	mov	r3, r0
 800b066:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b068:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	372c      	adds	r7, #44	@ 0x2c
 800b070:	46bd      	mov	sp, r7
 800b072:	bd90      	pop	{r4, r7, pc}
 800b074:	08010304 	.word	0x08010304
 800b078:	08010afc 	.word	0x08010afc
 800b07c:	08010358 	.word	0x08010358

0800b080 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b088:	f7fa ff10 	bl	8005eac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b08c:	4b0a      	ldr	r3, [pc, #40]	@ (800b0b8 <tcpip_tcp_timer+0x38>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d103      	bne.n	800b09c <tcpip_tcp_timer+0x1c>
 800b094:	4b09      	ldr	r3, [pc, #36]	@ (800b0bc <tcpip_tcp_timer+0x3c>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d005      	beq.n	800b0a8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b09c:	2200      	movs	r2, #0
 800b09e:	4908      	ldr	r1, [pc, #32]	@ (800b0c0 <tcpip_tcp_timer+0x40>)
 800b0a0:	20fa      	movs	r0, #250	@ 0xfa
 800b0a2:	f000 f8f3 	bl	800b28c <sys_timeout>
 800b0a6:	e003      	b.n	800b0b0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b0a8:	4b06      	ldr	r3, [pc, #24]	@ (800b0c4 <tcpip_tcp_timer+0x44>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
  }
}
 800b0ae:	bf00      	nop
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	24007b78 	.word	0x24007b78
 800b0bc:	24007b7c 	.word	0x24007b7c
 800b0c0:	0800b081 	.word	0x0800b081
 800b0c4:	24007bc4 	.word	0x24007bc4

0800b0c8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b0f8 <tcp_timer_needed+0x30>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10f      	bne.n	800b0f4 <tcp_timer_needed+0x2c>
 800b0d4:	4b09      	ldr	r3, [pc, #36]	@ (800b0fc <tcp_timer_needed+0x34>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d103      	bne.n	800b0e4 <tcp_timer_needed+0x1c>
 800b0dc:	4b08      	ldr	r3, [pc, #32]	@ (800b100 <tcp_timer_needed+0x38>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d007      	beq.n	800b0f4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b0e4:	4b04      	ldr	r3, [pc, #16]	@ (800b0f8 <tcp_timer_needed+0x30>)
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	4905      	ldr	r1, [pc, #20]	@ (800b104 <tcp_timer_needed+0x3c>)
 800b0ee:	20fa      	movs	r0, #250	@ 0xfa
 800b0f0:	f000 f8cc 	bl	800b28c <sys_timeout>
  }
}
 800b0f4:	bf00      	nop
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	24007bc4 	.word	0x24007bc4
 800b0fc:	24007b78 	.word	0x24007b78
 800b100:	24007b7c 	.word	0x24007b7c
 800b104:	0800b081 	.word	0x0800b081

0800b108 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b114:	2006      	movs	r0, #6
 800b116:	f7f9 fd2b 	bl	8004b70 <memp_malloc>
 800b11a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d109      	bne.n	800b136 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d151      	bne.n	800b1cc <sys_timeout_abs+0xc4>
 800b128:	4b2a      	ldr	r3, [pc, #168]	@ (800b1d4 <sys_timeout_abs+0xcc>)
 800b12a:	22be      	movs	r2, #190	@ 0xbe
 800b12c:	492a      	ldr	r1, [pc, #168]	@ (800b1d8 <sys_timeout_abs+0xd0>)
 800b12e:	482b      	ldr	r0, [pc, #172]	@ (800b1dc <sys_timeout_abs+0xd4>)
 800b130:	f002 fe78 	bl	800de24 <iprintf>
    return;
 800b134:	e04a      	b.n	800b1cc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	2200      	movs	r2, #0
 800b13a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b14e:	4b24      	ldr	r3, [pc, #144]	@ (800b1e0 <sys_timeout_abs+0xd8>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d103      	bne.n	800b15e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b156:	4a22      	ldr	r2, [pc, #136]	@ (800b1e0 <sys_timeout_abs+0xd8>)
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	6013      	str	r3, [r2, #0]
    return;
 800b15c:	e037      	b.n	800b1ce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	685a      	ldr	r2, [r3, #4]
 800b162:	4b1f      	ldr	r3, [pc, #124]	@ (800b1e0 <sys_timeout_abs+0xd8>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	0fdb      	lsrs	r3, r3, #31
 800b16c:	f003 0301 	and.w	r3, r3, #1
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d007      	beq.n	800b186 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b176:	4b1a      	ldr	r3, [pc, #104]	@ (800b1e0 <sys_timeout_abs+0xd8>)
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b17e:	4a18      	ldr	r2, [pc, #96]	@ (800b1e0 <sys_timeout_abs+0xd8>)
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	e023      	b.n	800b1ce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b186:	4b16      	ldr	r3, [pc, #88]	@ (800b1e0 <sys_timeout_abs+0xd8>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	617b      	str	r3, [r7, #20]
 800b18c:	e01a      	b.n	800b1c4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00b      	beq.n	800b1ae <sys_timeout_abs+0xa6>
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	0fdb      	lsrs	r3, r3, #31
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d007      	beq.n	800b1be <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	601a      	str	r2, [r3, #0]
        break;
 800b1bc:	e007      	b.n	800b1ce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	617b      	str	r3, [r7, #20]
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1e1      	bne.n	800b18e <sys_timeout_abs+0x86>
 800b1ca:	e000      	b.n	800b1ce <sys_timeout_abs+0xc6>
    return;
 800b1cc:	bf00      	nop
      }
    }
  }
}
 800b1ce:	3718      	adds	r7, #24
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	08010b20 	.word	0x08010b20
 800b1d8:	08010b54 	.word	0x08010b54
 800b1dc:	08010b94 	.word	0x08010b94
 800b1e0:	24007bbc 	.word	0x24007bbc

0800b1e4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	4798      	blx	r3

  now = sys_now();
 800b1f6:	f7f8 fdcd 	bl	8003d94 <sys_now>
 800b1fa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	4b0f      	ldr	r3, [pc, #60]	@ (800b240 <lwip_cyclic_timer+0x5c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4413      	add	r3, r2
 800b206:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	0fdb      	lsrs	r3, r3, #31
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d009      	beq.n	800b22e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	4413      	add	r3, r2
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	4907      	ldr	r1, [pc, #28]	@ (800b244 <lwip_cyclic_timer+0x60>)
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff ff6e 	bl	800b108 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b22c:	e004      	b.n	800b238 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	4904      	ldr	r1, [pc, #16]	@ (800b244 <lwip_cyclic_timer+0x60>)
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f7ff ff68 	bl	800b108 <sys_timeout_abs>
}
 800b238:	bf00      	nop
 800b23a:	3718      	adds	r7, #24
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	24007bc0 	.word	0x24007bc0
 800b244:	0800b1e5 	.word	0x0800b1e5

0800b248 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b24e:	2301      	movs	r3, #1
 800b250:	607b      	str	r3, [r7, #4]
 800b252:	e00e      	b.n	800b272 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b254:	4a0b      	ldr	r2, [pc, #44]	@ (800b284 <sys_timeouts_init+0x3c>)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	00db      	lsls	r3, r3, #3
 800b260:	4a08      	ldr	r2, [pc, #32]	@ (800b284 <sys_timeouts_init+0x3c>)
 800b262:	4413      	add	r3, r2
 800b264:	461a      	mov	r2, r3
 800b266:	4908      	ldr	r1, [pc, #32]	@ (800b288 <sys_timeouts_init+0x40>)
 800b268:	f000 f810 	bl	800b28c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	3301      	adds	r3, #1
 800b270:	607b      	str	r3, [r7, #4]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b02      	cmp	r3, #2
 800b276:	d9ed      	bls.n	800b254 <sys_timeouts_init+0xc>
  }
}
 800b278:	bf00      	nop
 800b27a:	bf00      	nop
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	08011704 	.word	0x08011704
 800b288:	0800b1e5 	.word	0x0800b1e5

0800b28c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b29e:	d306      	bcc.n	800b2ae <sys_timeout+0x22>
 800b2a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b2cc <sys_timeout+0x40>)
 800b2a2:	f240 1229 	movw	r2, #297	@ 0x129
 800b2a6:	490a      	ldr	r1, [pc, #40]	@ (800b2d0 <sys_timeout+0x44>)
 800b2a8:	480a      	ldr	r0, [pc, #40]	@ (800b2d4 <sys_timeout+0x48>)
 800b2aa:	f002 fdbb 	bl	800de24 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b2ae:	f7f8 fd71 	bl	8003d94 <sys_now>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	68b9      	ldr	r1, [r7, #8]
 800b2be:	6978      	ldr	r0, [r7, #20]
 800b2c0:	f7ff ff22 	bl	800b108 <sys_timeout_abs>
#endif
}
 800b2c4:	bf00      	nop
 800b2c6:	3718      	adds	r7, #24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	08010b20 	.word	0x08010b20
 800b2d0:	08010bbc 	.word	0x08010bbc
 800b2d4:	08010b94 	.word	0x08010b94

0800b2d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b2dc:	f002 fca2 	bl	800dc24 <rand>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	4b01      	ldr	r3, [pc, #4]	@ (800b2f8 <udp_init+0x20>)
 800b2f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b2f4:	bf00      	nop
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	2400002c 	.word	0x2400002c

0800b2fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	4613      	mov	r3, r2
 800b308:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d105      	bne.n	800b31c <udp_input_local_match+0x20>
 800b310:	4b27      	ldr	r3, [pc, #156]	@ (800b3b0 <udp_input_local_match+0xb4>)
 800b312:	2287      	movs	r2, #135	@ 0x87
 800b314:	4927      	ldr	r1, [pc, #156]	@ (800b3b4 <udp_input_local_match+0xb8>)
 800b316:	4828      	ldr	r0, [pc, #160]	@ (800b3b8 <udp_input_local_match+0xbc>)
 800b318:	f002 fd84 	bl	800de24 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d105      	bne.n	800b32e <udp_input_local_match+0x32>
 800b322:	4b23      	ldr	r3, [pc, #140]	@ (800b3b0 <udp_input_local_match+0xb4>)
 800b324:	2288      	movs	r2, #136	@ 0x88
 800b326:	4925      	ldr	r1, [pc, #148]	@ (800b3bc <udp_input_local_match+0xc0>)
 800b328:	4823      	ldr	r0, [pc, #140]	@ (800b3b8 <udp_input_local_match+0xbc>)
 800b32a:	f002 fd7b 	bl	800de24 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	7a1b      	ldrb	r3, [r3, #8]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00b      	beq.n	800b34e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	7a1a      	ldrb	r2, [r3, #8]
 800b33a:	4b21      	ldr	r3, [pc, #132]	@ (800b3c0 <udp_input_local_match+0xc4>)
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b342:	3301      	adds	r3, #1
 800b344:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b346:	429a      	cmp	r2, r3
 800b348:	d001      	beq.n	800b34e <udp_input_local_match+0x52>
    return 0;
 800b34a:	2300      	movs	r3, #0
 800b34c:	e02b      	b.n	800b3a6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b34e:	79fb      	ldrb	r3, [r7, #7]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d018      	beq.n	800b386 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d013      	beq.n	800b382 <udp_input_local_match+0x86>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00f      	beq.n	800b382 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b362:	4b17      	ldr	r3, [pc, #92]	@ (800b3c0 <udp_input_local_match+0xc4>)
 800b364:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36a:	d00a      	beq.n	800b382 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	4b13      	ldr	r3, [pc, #76]	@ (800b3c0 <udp_input_local_match+0xc4>)
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	405a      	eors	r2, r3
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	3308      	adds	r3, #8
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d110      	bne.n	800b3a4 <udp_input_local_match+0xa8>
          return 1;
 800b382:	2301      	movs	r3, #1
 800b384:	e00f      	b.n	800b3a6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d009      	beq.n	800b3a0 <udp_input_local_match+0xa4>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d005      	beq.n	800b3a0 <udp_input_local_match+0xa4>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	4b09      	ldr	r3, [pc, #36]	@ (800b3c0 <udp_input_local_match+0xc4>)
 800b39a:	695b      	ldr	r3, [r3, #20]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d101      	bne.n	800b3a4 <udp_input_local_match+0xa8>
        return 1;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e000      	b.n	800b3a6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	08010c08 	.word	0x08010c08
 800b3b4:	08010c38 	.word	0x08010c38
 800b3b8:	08010c5c 	.word	0x08010c5c
 800b3bc:	08010c84 	.word	0x08010c84
 800b3c0:	24004c50 	.word	0x24004c50

0800b3c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b3c4:	b590      	push	{r4, r7, lr}
 800b3c6:	b08d      	sub	sp, #52	@ 0x34
 800b3c8:	af02      	add	r7, sp, #8
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d105      	bne.n	800b3e4 <udp_input+0x20>
 800b3d8:	4b7c      	ldr	r3, [pc, #496]	@ (800b5cc <udp_input+0x208>)
 800b3da:	22cf      	movs	r2, #207	@ 0xcf
 800b3dc:	497c      	ldr	r1, [pc, #496]	@ (800b5d0 <udp_input+0x20c>)
 800b3de:	487d      	ldr	r0, [pc, #500]	@ (800b5d4 <udp_input+0x210>)
 800b3e0:	f002 fd20 	bl	800de24 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d105      	bne.n	800b3f6 <udp_input+0x32>
 800b3ea:	4b78      	ldr	r3, [pc, #480]	@ (800b5cc <udp_input+0x208>)
 800b3ec:	22d0      	movs	r2, #208	@ 0xd0
 800b3ee:	497a      	ldr	r1, [pc, #488]	@ (800b5d8 <udp_input+0x214>)
 800b3f0:	4878      	ldr	r0, [pc, #480]	@ (800b5d4 <udp_input+0x210>)
 800b3f2:	f002 fd17 	bl	800de24 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	895b      	ldrh	r3, [r3, #10]
 800b3fa:	2b07      	cmp	r3, #7
 800b3fc:	d803      	bhi.n	800b406 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7fa fa7c 	bl	80058fc <pbuf_free>
    goto end;
 800b404:	e0de      	b.n	800b5c4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b40c:	4b73      	ldr	r3, [pc, #460]	@ (800b5dc <udp_input+0x218>)
 800b40e:	695b      	ldr	r3, [r3, #20]
 800b410:	4a72      	ldr	r2, [pc, #456]	@ (800b5dc <udp_input+0x218>)
 800b412:	6812      	ldr	r2, [r2, #0]
 800b414:	4611      	mov	r1, r2
 800b416:	4618      	mov	r0, r3
 800b418:	f001 fcae 	bl	800cd78 <ip4_addr_isbroadcast_u32>
 800b41c:	4603      	mov	r3, r0
 800b41e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	b29b      	uxth	r3, r3
 800b426:	4618      	mov	r0, r3
 800b428:	f7f8 fe72 	bl	8004110 <lwip_htons>
 800b42c:	4603      	mov	r3, r0
 800b42e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	885b      	ldrh	r3, [r3, #2]
 800b434:	b29b      	uxth	r3, r3
 800b436:	4618      	mov	r0, r3
 800b438:	f7f8 fe6a 	bl	8004110 <lwip_htons>
 800b43c:	4603      	mov	r3, r0
 800b43e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b440:	2300      	movs	r3, #0
 800b442:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800b444:	2300      	movs	r3, #0
 800b446:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b448:	2300      	movs	r3, #0
 800b44a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b44c:	4b64      	ldr	r3, [pc, #400]	@ (800b5e0 <udp_input+0x21c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	627b      	str	r3, [r7, #36]	@ 0x24
 800b452:	e054      	b.n	800b4fe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b456:	8a5b      	ldrh	r3, [r3, #18]
 800b458:	89fa      	ldrh	r2, [r7, #14]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d14a      	bne.n	800b4f4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b45e:	7cfb      	ldrb	r3, [r7, #19]
 800b460:	461a      	mov	r2, r3
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b466:	f7ff ff49 	bl	800b2fc <udp_input_local_match>
 800b46a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d041      	beq.n	800b4f4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b472:	7c1b      	ldrb	r3, [r3, #16]
 800b474:	f003 0304 	and.w	r3, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d11d      	bne.n	800b4b8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d102      	bne.n	800b488 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b484:	61fb      	str	r3, [r7, #28]
 800b486:	e017      	b.n	800b4b8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b488:	7cfb      	ldrb	r3, [r7, #19]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d014      	beq.n	800b4b8 <udp_input+0xf4>
 800b48e:	4b53      	ldr	r3, [pc, #332]	@ (800b5dc <udp_input+0x218>)
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b496:	d10f      	bne.n	800b4b8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d008      	beq.n	800b4b8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	3304      	adds	r3, #4
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d101      	bne.n	800b4b8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ba:	8a9b      	ldrh	r3, [r3, #20]
 800b4bc:	8a3a      	ldrh	r2, [r7, #16]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d118      	bne.n	800b4f4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d005      	beq.n	800b4d6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	4b43      	ldr	r3, [pc, #268]	@ (800b5dc <udp_input+0x218>)
 800b4d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d10e      	bne.n	800b4f4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d014      	beq.n	800b506 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4de:	68da      	ldr	r2, [r3, #12]
 800b4e0:	6a3b      	ldr	r3, [r7, #32]
 800b4e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b4e4:	4b3e      	ldr	r3, [pc, #248]	@ (800b5e0 <udp_input+0x21c>)
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b4ec:	4a3c      	ldr	r2, [pc, #240]	@ (800b5e0 <udp_input+0x21c>)
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b4f2:	e008      	b.n	800b506 <udp_input+0x142>
      }
    }

    prev = pcb;
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1a7      	bne.n	800b454 <udp_input+0x90>
 800b504:	e000      	b.n	800b508 <udp_input+0x144>
        break;
 800b506:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d101      	bne.n	800b512 <udp_input+0x14e>
    pcb = uncon_pcb;
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <udp_input+0x15a>
    for_us = 1;
 800b518:	2301      	movs	r3, #1
 800b51a:	76fb      	strb	r3, [r7, #27]
 800b51c:	e00a      	b.n	800b534 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	3304      	adds	r3, #4
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	4b2d      	ldr	r3, [pc, #180]	@ (800b5dc <udp_input+0x218>)
 800b526:	695b      	ldr	r3, [r3, #20]
 800b528:	429a      	cmp	r2, r3
 800b52a:	bf0c      	ite	eq
 800b52c:	2301      	moveq	r3, #1
 800b52e:	2300      	movne	r3, #0
 800b530:	b2db      	uxtb	r3, r3
 800b532:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b534:	7efb      	ldrb	r3, [r7, #27]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d041      	beq.n	800b5be <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b53a:	2108      	movs	r1, #8
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7fa f957 	bl	80057f0 <pbuf_remove_header>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00a      	beq.n	800b55e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b548:	4b20      	ldr	r3, [pc, #128]	@ (800b5cc <udp_input+0x208>)
 800b54a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800b54e:	4925      	ldr	r1, [pc, #148]	@ (800b5e4 <udp_input+0x220>)
 800b550:	4820      	ldr	r0, [pc, #128]	@ (800b5d4 <udp_input+0x210>)
 800b552:	f002 fc67 	bl	800de24 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7fa f9d0 	bl	80058fc <pbuf_free>
      goto end;
 800b55c:	e032      	b.n	800b5c4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b560:	2b00      	cmp	r3, #0
 800b562:	d012      	beq.n	800b58a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b566:	699b      	ldr	r3, [r3, #24]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00a      	beq.n	800b582 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56e:	699c      	ldr	r4, [r3, #24]
 800b570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b572:	69d8      	ldr	r0, [r3, #28]
 800b574:	8a3b      	ldrh	r3, [r7, #16]
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	4b1b      	ldr	r3, [pc, #108]	@ (800b5e8 <udp_input+0x224>)
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b57e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b580:	e021      	b.n	800b5c6 <udp_input+0x202>
        pbuf_free(p);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7fa f9ba 	bl	80058fc <pbuf_free>
        goto end;
 800b588:	e01c      	b.n	800b5c4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b58a:	7cfb      	ldrb	r3, [r7, #19]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d112      	bne.n	800b5b6 <udp_input+0x1f2>
 800b590:	4b12      	ldr	r3, [pc, #72]	@ (800b5dc <udp_input+0x218>)
 800b592:	695b      	ldr	r3, [r3, #20]
 800b594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b598:	2be0      	cmp	r3, #224	@ 0xe0
 800b59a:	d00c      	beq.n	800b5b6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b59c:	4b0f      	ldr	r3, [pc, #60]	@ (800b5dc <udp_input+0x218>)
 800b59e:	899b      	ldrh	r3, [r3, #12]
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	b21b      	sxth	r3, r3
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f7fa f994 	bl	80058d6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b5ae:	2103      	movs	r1, #3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f001 f8b7 	bl	800c724 <icmp_dest_unreach>
      pbuf_free(p);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f7fa f9a0 	bl	80058fc <pbuf_free>
  return;
 800b5bc:	e003      	b.n	800b5c6 <udp_input+0x202>
    pbuf_free(p);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7fa f99c 	bl	80058fc <pbuf_free>
  return;
 800b5c4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b5c6:	372c      	adds	r7, #44	@ 0x2c
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd90      	pop	{r4, r7, pc}
 800b5cc:	08010c08 	.word	0x08010c08
 800b5d0:	08010cac 	.word	0x08010cac
 800b5d4:	08010c5c 	.word	0x08010c5c
 800b5d8:	08010cc4 	.word	0x08010cc4
 800b5dc:	24004c50 	.word	0x24004c50
 800b5e0:	24007bc8 	.word	0x24007bc8
 800b5e4:	08010ce0 	.word	0x08010ce0
 800b5e8:	24004c60 	.word	0x24004c60

0800b5ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d01e      	beq.n	800b63a <udp_netif_ip_addr_changed+0x4e>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d01a      	beq.n	800b63a <udp_netif_ip_addr_changed+0x4e>
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d017      	beq.n	800b63a <udp_netif_ip_addr_changed+0x4e>
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d013      	beq.n	800b63a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b612:	4b0d      	ldr	r3, [pc, #52]	@ (800b648 <udp_netif_ip_addr_changed+0x5c>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	e00c      	b.n	800b634 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	429a      	cmp	r2, r3
 800b624:	d103      	bne.n	800b62e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1ef      	bne.n	800b61a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b63a:	bf00      	nop
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	24007bc8 	.word	0x24007bc8

0800b64c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b654:	4915      	ldr	r1, [pc, #84]	@ (800b6ac <etharp_free_entry+0x60>)
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	4613      	mov	r3, r2
 800b65a:	005b      	lsls	r3, r3, #1
 800b65c:	4413      	add	r3, r2
 800b65e:	00db      	lsls	r3, r3, #3
 800b660:	440b      	add	r3, r1
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d013      	beq.n	800b690 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b668:	4910      	ldr	r1, [pc, #64]	@ (800b6ac <etharp_free_entry+0x60>)
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	4613      	mov	r3, r2
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	4413      	add	r3, r2
 800b672:	00db      	lsls	r3, r3, #3
 800b674:	440b      	add	r3, r1
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4618      	mov	r0, r3
 800b67a:	f7fa f93f 	bl	80058fc <pbuf_free>
    arp_table[i].q = NULL;
 800b67e:	490b      	ldr	r1, [pc, #44]	@ (800b6ac <etharp_free_entry+0x60>)
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	4613      	mov	r3, r2
 800b684:	005b      	lsls	r3, r3, #1
 800b686:	4413      	add	r3, r2
 800b688:	00db      	lsls	r3, r3, #3
 800b68a:	440b      	add	r3, r1
 800b68c:	2200      	movs	r2, #0
 800b68e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b690:	4906      	ldr	r1, [pc, #24]	@ (800b6ac <etharp_free_entry+0x60>)
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	4613      	mov	r3, r2
 800b696:	005b      	lsls	r3, r3, #1
 800b698:	4413      	add	r3, r2
 800b69a:	00db      	lsls	r3, r3, #3
 800b69c:	440b      	add	r3, r1
 800b69e:	3314      	adds	r3, #20
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b6a4:	bf00      	nop
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	24007bcc 	.word	0x24007bcc

0800b6b0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	607b      	str	r3, [r7, #4]
 800b6ba:	e096      	b.n	800b7ea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b6bc:	494f      	ldr	r1, [pc, #316]	@ (800b7fc <etharp_tmr+0x14c>)
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	005b      	lsls	r3, r3, #1
 800b6c4:	4413      	add	r3, r2
 800b6c6:	00db      	lsls	r3, r3, #3
 800b6c8:	440b      	add	r3, r1
 800b6ca:	3314      	adds	r3, #20
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 8086 	beq.w	800b7e4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800b6d8:	4948      	ldr	r1, [pc, #288]	@ (800b7fc <etharp_tmr+0x14c>)
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	4413      	add	r3, r2
 800b6e2:	00db      	lsls	r3, r3, #3
 800b6e4:	440b      	add	r3, r1
 800b6e6:	3312      	adds	r3, #18
 800b6e8:	881b      	ldrh	r3, [r3, #0]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	b298      	uxth	r0, r3
 800b6ee:	4943      	ldr	r1, [pc, #268]	@ (800b7fc <etharp_tmr+0x14c>)
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	005b      	lsls	r3, r3, #1
 800b6f6:	4413      	add	r3, r2
 800b6f8:	00db      	lsls	r3, r3, #3
 800b6fa:	440b      	add	r3, r1
 800b6fc:	3312      	adds	r3, #18
 800b6fe:	4602      	mov	r2, r0
 800b700:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b702:	493e      	ldr	r1, [pc, #248]	@ (800b7fc <etharp_tmr+0x14c>)
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	4613      	mov	r3, r2
 800b708:	005b      	lsls	r3, r3, #1
 800b70a:	4413      	add	r3, r2
 800b70c:	00db      	lsls	r3, r3, #3
 800b70e:	440b      	add	r3, r1
 800b710:	3312      	adds	r3, #18
 800b712:	881b      	ldrh	r3, [r3, #0]
 800b714:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800b718:	d215      	bcs.n	800b746 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b71a:	4938      	ldr	r1, [pc, #224]	@ (800b7fc <etharp_tmr+0x14c>)
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	4613      	mov	r3, r2
 800b720:	005b      	lsls	r3, r3, #1
 800b722:	4413      	add	r3, r2
 800b724:	00db      	lsls	r3, r3, #3
 800b726:	440b      	add	r3, r1
 800b728:	3314      	adds	r3, #20
 800b72a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d10e      	bne.n	800b74e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b730:	4932      	ldr	r1, [pc, #200]	@ (800b7fc <etharp_tmr+0x14c>)
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	4613      	mov	r3, r2
 800b736:	005b      	lsls	r3, r3, #1
 800b738:	4413      	add	r3, r2
 800b73a:	00db      	lsls	r3, r3, #3
 800b73c:	440b      	add	r3, r1
 800b73e:	3312      	adds	r3, #18
 800b740:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b742:	2b04      	cmp	r3, #4
 800b744:	d903      	bls.n	800b74e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7ff ff80 	bl	800b64c <etharp_free_entry>
 800b74c:	e04a      	b.n	800b7e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b74e:	492b      	ldr	r1, [pc, #172]	@ (800b7fc <etharp_tmr+0x14c>)
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	4613      	mov	r3, r2
 800b754:	005b      	lsls	r3, r3, #1
 800b756:	4413      	add	r3, r2
 800b758:	00db      	lsls	r3, r3, #3
 800b75a:	440b      	add	r3, r1
 800b75c:	3314      	adds	r3, #20
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	2b03      	cmp	r3, #3
 800b762:	d10a      	bne.n	800b77a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b764:	4925      	ldr	r1, [pc, #148]	@ (800b7fc <etharp_tmr+0x14c>)
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	4613      	mov	r3, r2
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	4413      	add	r3, r2
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	440b      	add	r3, r1
 800b772:	3314      	adds	r3, #20
 800b774:	2204      	movs	r2, #4
 800b776:	701a      	strb	r2, [r3, #0]
 800b778:	e034      	b.n	800b7e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b77a:	4920      	ldr	r1, [pc, #128]	@ (800b7fc <etharp_tmr+0x14c>)
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	4613      	mov	r3, r2
 800b780:	005b      	lsls	r3, r3, #1
 800b782:	4413      	add	r3, r2
 800b784:	00db      	lsls	r3, r3, #3
 800b786:	440b      	add	r3, r1
 800b788:	3314      	adds	r3, #20
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	2b04      	cmp	r3, #4
 800b78e:	d10a      	bne.n	800b7a6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b790:	491a      	ldr	r1, [pc, #104]	@ (800b7fc <etharp_tmr+0x14c>)
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	4613      	mov	r3, r2
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	4413      	add	r3, r2
 800b79a:	00db      	lsls	r3, r3, #3
 800b79c:	440b      	add	r3, r1
 800b79e:	3314      	adds	r3, #20
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	701a      	strb	r2, [r3, #0]
 800b7a4:	e01e      	b.n	800b7e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b7a6:	4915      	ldr	r1, [pc, #84]	@ (800b7fc <etharp_tmr+0x14c>)
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	005b      	lsls	r3, r3, #1
 800b7ae:	4413      	add	r3, r2
 800b7b0:	00db      	lsls	r3, r3, #3
 800b7b2:	440b      	add	r3, r1
 800b7b4:	3314      	adds	r3, #20
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d113      	bne.n	800b7e4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b7bc:	490f      	ldr	r1, [pc, #60]	@ (800b7fc <etharp_tmr+0x14c>)
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	4413      	add	r3, r2
 800b7c6:	00db      	lsls	r3, r3, #3
 800b7c8:	440b      	add	r3, r1
 800b7ca:	3308      	adds	r3, #8
 800b7cc:	6818      	ldr	r0, [r3, #0]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	4413      	add	r3, r2
 800b7d6:	00db      	lsls	r3, r3, #3
 800b7d8:	4a08      	ldr	r2, [pc, #32]	@ (800b7fc <etharp_tmr+0x14c>)
 800b7da:	4413      	add	r3, r2
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4619      	mov	r1, r3
 800b7e0:	f000 fe6e 	bl	800c4c0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	607b      	str	r3, [r7, #4]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b09      	cmp	r3, #9
 800b7ee:	f77f af65 	ble.w	800b6bc <etharp_tmr+0xc>
      }
    }
  }
}
 800b7f2:	bf00      	nop
 800b7f4:	bf00      	nop
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	24007bcc 	.word	0x24007bcc

0800b800 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b08a      	sub	sp, #40	@ 0x28
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	460b      	mov	r3, r1
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b80e:	230a      	movs	r3, #10
 800b810:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b812:	230a      	movs	r3, #10
 800b814:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800b816:	230a      	movs	r3, #10
 800b818:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800b81e:	230a      	movs	r3, #10
 800b820:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b822:	2300      	movs	r3, #0
 800b824:	83bb      	strh	r3, [r7, #28]
 800b826:	2300      	movs	r3, #0
 800b828:	837b      	strh	r3, [r7, #26]
 800b82a:	2300      	movs	r3, #0
 800b82c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b82e:	2300      	movs	r3, #0
 800b830:	843b      	strh	r3, [r7, #32]
 800b832:	e0ae      	b.n	800b992 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800b834:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b838:	49a6      	ldr	r1, [pc, #664]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800b83a:	4613      	mov	r3, r2
 800b83c:	005b      	lsls	r3, r3, #1
 800b83e:	4413      	add	r3, r2
 800b840:	00db      	lsls	r3, r3, #3
 800b842:	440b      	add	r3, r1
 800b844:	3314      	adds	r3, #20
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b84a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b84e:	2b0a      	cmp	r3, #10
 800b850:	d105      	bne.n	800b85e <etharp_find_entry+0x5e>
 800b852:	7dfb      	ldrb	r3, [r7, #23]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d102      	bne.n	800b85e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800b858:	8c3b      	ldrh	r3, [r7, #32]
 800b85a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b85c:	e095      	b.n	800b98a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
 800b860:	2b00      	cmp	r3, #0
 800b862:	f000 8092 	beq.w	800b98a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d009      	beq.n	800b880 <etharp_find_entry+0x80>
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d806      	bhi.n	800b880 <etharp_find_entry+0x80>
 800b872:	4b99      	ldr	r3, [pc, #612]	@ (800bad8 <etharp_find_entry+0x2d8>)
 800b874:	f240 1223 	movw	r2, #291	@ 0x123
 800b878:	4998      	ldr	r1, [pc, #608]	@ (800badc <etharp_find_entry+0x2dc>)
 800b87a:	4899      	ldr	r0, [pc, #612]	@ (800bae0 <etharp_find_entry+0x2e0>)
 800b87c:	f002 fad2 	bl	800de24 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d020      	beq.n	800b8c8 <etharp_find_entry+0xc8>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6819      	ldr	r1, [r3, #0]
 800b88a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b88e:	4891      	ldr	r0, [pc, #580]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800b890:	4613      	mov	r3, r2
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	4413      	add	r3, r2
 800b896:	00db      	lsls	r3, r3, #3
 800b898:	4403      	add	r3, r0
 800b89a:	3304      	adds	r3, #4
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4299      	cmp	r1, r3
 800b8a0:	d112      	bne.n	800b8c8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00c      	beq.n	800b8c2 <etharp_find_entry+0xc2>
 800b8a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b8ac:	4989      	ldr	r1, [pc, #548]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	4413      	add	r3, r2
 800b8b4:	00db      	lsls	r3, r3, #3
 800b8b6:	440b      	add	r3, r1
 800b8b8:	3308      	adds	r3, #8
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d102      	bne.n	800b8c8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b8c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b8c6:	e100      	b.n	800baca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b8c8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d140      	bne.n	800b950 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b8ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b8d2:	4980      	ldr	r1, [pc, #512]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	005b      	lsls	r3, r3, #1
 800b8d8:	4413      	add	r3, r2
 800b8da:	00db      	lsls	r3, r3, #3
 800b8dc:	440b      	add	r3, r1
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d01a      	beq.n	800b91a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800b8e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b8e8:	497a      	ldr	r1, [pc, #488]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	005b      	lsls	r3, r3, #1
 800b8ee:	4413      	add	r3, r2
 800b8f0:	00db      	lsls	r3, r3, #3
 800b8f2:	440b      	add	r3, r1
 800b8f4:	3312      	adds	r3, #18
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	8bba      	ldrh	r2, [r7, #28]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d845      	bhi.n	800b98a <etharp_find_entry+0x18a>
            old_queue = i;
 800b8fe:	8c3b      	ldrh	r3, [r7, #32]
 800b900:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800b902:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b906:	4973      	ldr	r1, [pc, #460]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800b908:	4613      	mov	r3, r2
 800b90a:	005b      	lsls	r3, r3, #1
 800b90c:	4413      	add	r3, r2
 800b90e:	00db      	lsls	r3, r3, #3
 800b910:	440b      	add	r3, r1
 800b912:	3312      	adds	r3, #18
 800b914:	881b      	ldrh	r3, [r3, #0]
 800b916:	83bb      	strh	r3, [r7, #28]
 800b918:	e037      	b.n	800b98a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b91a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b91e:	496d      	ldr	r1, [pc, #436]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800b920:	4613      	mov	r3, r2
 800b922:	005b      	lsls	r3, r3, #1
 800b924:	4413      	add	r3, r2
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	440b      	add	r3, r1
 800b92a:	3312      	adds	r3, #18
 800b92c:	881b      	ldrh	r3, [r3, #0]
 800b92e:	8b7a      	ldrh	r2, [r7, #26]
 800b930:	429a      	cmp	r2, r3
 800b932:	d82a      	bhi.n	800b98a <etharp_find_entry+0x18a>
            old_pending = i;
 800b934:	8c3b      	ldrh	r3, [r7, #32]
 800b936:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800b938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b93c:	4965      	ldr	r1, [pc, #404]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800b93e:	4613      	mov	r3, r2
 800b940:	005b      	lsls	r3, r3, #1
 800b942:	4413      	add	r3, r2
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	440b      	add	r3, r1
 800b948:	3312      	adds	r3, #18
 800b94a:	881b      	ldrh	r3, [r3, #0]
 800b94c:	837b      	strh	r3, [r7, #26]
 800b94e:	e01c      	b.n	800b98a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b950:	7dfb      	ldrb	r3, [r7, #23]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d919      	bls.n	800b98a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b956:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b95a:	495e      	ldr	r1, [pc, #376]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800b95c:	4613      	mov	r3, r2
 800b95e:	005b      	lsls	r3, r3, #1
 800b960:	4413      	add	r3, r2
 800b962:	00db      	lsls	r3, r3, #3
 800b964:	440b      	add	r3, r1
 800b966:	3312      	adds	r3, #18
 800b968:	881b      	ldrh	r3, [r3, #0]
 800b96a:	8b3a      	ldrh	r2, [r7, #24]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d80c      	bhi.n	800b98a <etharp_find_entry+0x18a>
            old_stable = i;
 800b970:	8c3b      	ldrh	r3, [r7, #32]
 800b972:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800b974:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b978:	4956      	ldr	r1, [pc, #344]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800b97a:	4613      	mov	r3, r2
 800b97c:	005b      	lsls	r3, r3, #1
 800b97e:	4413      	add	r3, r2
 800b980:	00db      	lsls	r3, r3, #3
 800b982:	440b      	add	r3, r1
 800b984:	3312      	adds	r3, #18
 800b986:	881b      	ldrh	r3, [r3, #0]
 800b988:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b98a:	8c3b      	ldrh	r3, [r7, #32]
 800b98c:	3301      	adds	r3, #1
 800b98e:	b29b      	uxth	r3, r3
 800b990:	843b      	strh	r3, [r7, #32]
 800b992:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b996:	2b09      	cmp	r3, #9
 800b998:	f77f af4c 	ble.w	800b834 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b99c:	7afb      	ldrb	r3, [r7, #11]
 800b99e:	f003 0302 	and.w	r3, r3, #2
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d108      	bne.n	800b9b8 <etharp_find_entry+0x1b8>
 800b9a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b9aa:	2b0a      	cmp	r3, #10
 800b9ac:	d107      	bne.n	800b9be <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b9ae:	7afb      	ldrb	r3, [r7, #11]
 800b9b0:	f003 0301 	and.w	r3, r3, #1
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d102      	bne.n	800b9be <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800b9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9bc:	e085      	b.n	800baca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b9be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b9c2:	2b09      	cmp	r3, #9
 800b9c4:	dc02      	bgt.n	800b9cc <etharp_find_entry+0x1cc>
    i = empty;
 800b9c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b9c8:	843b      	strh	r3, [r7, #32]
 800b9ca:	e039      	b.n	800ba40 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b9cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800b9d0:	2b09      	cmp	r3, #9
 800b9d2:	dc14      	bgt.n	800b9fe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800b9d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9d6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b9d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b9dc:	493d      	ldr	r1, [pc, #244]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800b9de:	4613      	mov	r3, r2
 800b9e0:	005b      	lsls	r3, r3, #1
 800b9e2:	4413      	add	r3, r2
 800b9e4:	00db      	lsls	r3, r3, #3
 800b9e6:	440b      	add	r3, r1
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d018      	beq.n	800ba20 <etharp_find_entry+0x220>
 800b9ee:	4b3a      	ldr	r3, [pc, #232]	@ (800bad8 <etharp_find_entry+0x2d8>)
 800b9f0:	f240 126d 	movw	r2, #365	@ 0x16d
 800b9f4:	493b      	ldr	r1, [pc, #236]	@ (800bae4 <etharp_find_entry+0x2e4>)
 800b9f6:	483a      	ldr	r0, [pc, #232]	@ (800bae0 <etharp_find_entry+0x2e0>)
 800b9f8:	f002 fa14 	bl	800de24 <iprintf>
 800b9fc:	e010      	b.n	800ba20 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b9fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800ba02:	2b09      	cmp	r3, #9
 800ba04:	dc02      	bgt.n	800ba0c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ba06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ba08:	843b      	strh	r3, [r7, #32]
 800ba0a:	e009      	b.n	800ba20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ba0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ba10:	2b09      	cmp	r3, #9
 800ba12:	dc02      	bgt.n	800ba1a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ba14:	8bfb      	ldrh	r3, [r7, #30]
 800ba16:	843b      	strh	r3, [r7, #32]
 800ba18:	e002      	b.n	800ba20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ba1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba1e:	e054      	b.n	800baca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ba20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ba24:	2b09      	cmp	r3, #9
 800ba26:	dd06      	ble.n	800ba36 <etharp_find_entry+0x236>
 800ba28:	4b2b      	ldr	r3, [pc, #172]	@ (800bad8 <etharp_find_entry+0x2d8>)
 800ba2a:	f240 127f 	movw	r2, #383	@ 0x17f
 800ba2e:	492e      	ldr	r1, [pc, #184]	@ (800bae8 <etharp_find_entry+0x2e8>)
 800ba30:	482b      	ldr	r0, [pc, #172]	@ (800bae0 <etharp_find_entry+0x2e0>)
 800ba32:	f002 f9f7 	bl	800de24 <iprintf>
    etharp_free_entry(i);
 800ba36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff fe06 	bl	800b64c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ba40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ba44:	2b09      	cmp	r3, #9
 800ba46:	dd06      	ble.n	800ba56 <etharp_find_entry+0x256>
 800ba48:	4b23      	ldr	r3, [pc, #140]	@ (800bad8 <etharp_find_entry+0x2d8>)
 800ba4a:	f240 1283 	movw	r2, #387	@ 0x183
 800ba4e:	4926      	ldr	r1, [pc, #152]	@ (800bae8 <etharp_find_entry+0x2e8>)
 800ba50:	4823      	ldr	r0, [pc, #140]	@ (800bae0 <etharp_find_entry+0x2e0>)
 800ba52:	f002 f9e7 	bl	800de24 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ba56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ba5a:	491e      	ldr	r1, [pc, #120]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	005b      	lsls	r3, r3, #1
 800ba60:	4413      	add	r3, r2
 800ba62:	00db      	lsls	r3, r3, #3
 800ba64:	440b      	add	r3, r1
 800ba66:	3314      	adds	r3, #20
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d006      	beq.n	800ba7c <etharp_find_entry+0x27c>
 800ba6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bad8 <etharp_find_entry+0x2d8>)
 800ba70:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800ba74:	491d      	ldr	r1, [pc, #116]	@ (800baec <etharp_find_entry+0x2ec>)
 800ba76:	481a      	ldr	r0, [pc, #104]	@ (800bae0 <etharp_find_entry+0x2e0>)
 800ba78:	f002 f9d4 	bl	800de24 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00b      	beq.n	800ba9a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ba82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6819      	ldr	r1, [r3, #0]
 800ba8a:	4812      	ldr	r0, [pc, #72]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	005b      	lsls	r3, r3, #1
 800ba90:	4413      	add	r3, r2
 800ba92:	00db      	lsls	r3, r3, #3
 800ba94:	4403      	add	r3, r0
 800ba96:	3304      	adds	r3, #4
 800ba98:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ba9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ba9e:	490d      	ldr	r1, [pc, #52]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800baa0:	4613      	mov	r3, r2
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	4413      	add	r3, r2
 800baa6:	00db      	lsls	r3, r3, #3
 800baa8:	440b      	add	r3, r1
 800baaa:	3312      	adds	r3, #18
 800baac:	2200      	movs	r2, #0
 800baae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800bab0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bab4:	4907      	ldr	r1, [pc, #28]	@ (800bad4 <etharp_find_entry+0x2d4>)
 800bab6:	4613      	mov	r3, r2
 800bab8:	005b      	lsls	r3, r3, #1
 800baba:	4413      	add	r3, r2
 800babc:	00db      	lsls	r3, r3, #3
 800babe:	440b      	add	r3, r1
 800bac0:	3308      	adds	r3, #8
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800bac6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3728      	adds	r7, #40	@ 0x28
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	24007bcc 	.word	0x24007bcc
 800bad8:	08010f6c 	.word	0x08010f6c
 800badc:	08010fa4 	.word	0x08010fa4
 800bae0:	08010fe4 	.word	0x08010fe4
 800bae4:	0801100c 	.word	0x0801100c
 800bae8:	08011024 	.word	0x08011024
 800baec:	08011038 	.word	0x08011038

0800baf0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af02      	add	r7, sp, #8
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
 800bafc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bb04:	2b06      	cmp	r3, #6
 800bb06:	d006      	beq.n	800bb16 <etharp_update_arp_entry+0x26>
 800bb08:	4b48      	ldr	r3, [pc, #288]	@ (800bc2c <etharp_update_arp_entry+0x13c>)
 800bb0a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800bb0e:	4948      	ldr	r1, [pc, #288]	@ (800bc30 <etharp_update_arp_entry+0x140>)
 800bb10:	4848      	ldr	r0, [pc, #288]	@ (800bc34 <etharp_update_arp_entry+0x144>)
 800bb12:	f002 f987 	bl	800de24 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d012      	beq.n	800bb42 <etharp_update_arp_entry+0x52>
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00e      	beq.n	800bb42 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68f9      	ldr	r1, [r7, #12]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f001 f924 	bl	800cd78 <ip4_addr_isbroadcast_u32>
 800bb30:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d105      	bne.n	800bb42 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bb3e:	2be0      	cmp	r3, #224	@ 0xe0
 800bb40:	d102      	bne.n	800bb48 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bb42:	f06f 030f 	mvn.w	r3, #15
 800bb46:	e06c      	b.n	800bc22 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bb48:	78fb      	ldrb	r3, [r7, #3]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	68b8      	ldr	r0, [r7, #8]
 800bb50:	f7ff fe56 	bl	800b800 <etharp_find_entry>
 800bb54:	4603      	mov	r3, r0
 800bb56:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bb58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	da02      	bge.n	800bb66 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bb60:	8afb      	ldrh	r3, [r7, #22]
 800bb62:	b25b      	sxtb	r3, r3
 800bb64:	e05d      	b.n	800bc22 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bb66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bb6a:	4933      	ldr	r1, [pc, #204]	@ (800bc38 <etharp_update_arp_entry+0x148>)
 800bb6c:	4613      	mov	r3, r2
 800bb6e:	005b      	lsls	r3, r3, #1
 800bb70:	4413      	add	r3, r2
 800bb72:	00db      	lsls	r3, r3, #3
 800bb74:	440b      	add	r3, r1
 800bb76:	3314      	adds	r3, #20
 800bb78:	2202      	movs	r2, #2
 800bb7a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bb7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bb80:	492d      	ldr	r1, [pc, #180]	@ (800bc38 <etharp_update_arp_entry+0x148>)
 800bb82:	4613      	mov	r3, r2
 800bb84:	005b      	lsls	r3, r3, #1
 800bb86:	4413      	add	r3, r2
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	440b      	add	r3, r1
 800bb8c:	3308      	adds	r3, #8
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800bb92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bb96:	4613      	mov	r3, r2
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	4413      	add	r3, r2
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	3308      	adds	r3, #8
 800bba0:	4a25      	ldr	r2, [pc, #148]	@ (800bc38 <etharp_update_arp_entry+0x148>)
 800bba2:	4413      	add	r3, r2
 800bba4:	3304      	adds	r3, #4
 800bba6:	2206      	movs	r2, #6
 800bba8:	6879      	ldr	r1, [r7, #4]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f002 fa15 	bl	800dfda <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bbb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bbb4:	4920      	ldr	r1, [pc, #128]	@ (800bc38 <etharp_update_arp_entry+0x148>)
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	005b      	lsls	r3, r3, #1
 800bbba:	4413      	add	r3, r2
 800bbbc:	00db      	lsls	r3, r3, #3
 800bbbe:	440b      	add	r3, r1
 800bbc0:	3312      	adds	r3, #18
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bbc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bbca:	491b      	ldr	r1, [pc, #108]	@ (800bc38 <etharp_update_arp_entry+0x148>)
 800bbcc:	4613      	mov	r3, r2
 800bbce:	005b      	lsls	r3, r3, #1
 800bbd0:	4413      	add	r3, r2
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	440b      	add	r3, r1
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d021      	beq.n	800bc20 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bbdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bbe0:	4915      	ldr	r1, [pc, #84]	@ (800bc38 <etharp_update_arp_entry+0x148>)
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	005b      	lsls	r3, r3, #1
 800bbe6:	4413      	add	r3, r2
 800bbe8:	00db      	lsls	r3, r3, #3
 800bbea:	440b      	add	r3, r1
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bbf0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bbf4:	4910      	ldr	r1, [pc, #64]	@ (800bc38 <etharp_update_arp_entry+0x148>)
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	005b      	lsls	r3, r3, #1
 800bbfa:	4413      	add	r3, r2
 800bbfc:	00db      	lsls	r3, r3, #3
 800bbfe:	440b      	add	r3, r1
 800bc00:	2200      	movs	r2, #0
 800bc02:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800bc0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6939      	ldr	r1, [r7, #16]
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f001 ffbd 	bl	800db94 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800bc1a:	6938      	ldr	r0, [r7, #16]
 800bc1c:	f7f9 fe6e 	bl	80058fc <pbuf_free>
  }
  return ERR_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3718      	adds	r7, #24
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	08010f6c 	.word	0x08010f6c
 800bc30:	08011064 	.word	0x08011064
 800bc34:	08010fe4 	.word	0x08010fe4
 800bc38:	24007bcc 	.word	0x24007bcc

0800bc3c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc44:	2300      	movs	r3, #0
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	e01e      	b.n	800bc88 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800bc4a:	4913      	ldr	r1, [pc, #76]	@ (800bc98 <etharp_cleanup_netif+0x5c>)
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	005b      	lsls	r3, r3, #1
 800bc52:	4413      	add	r3, r2
 800bc54:	00db      	lsls	r3, r3, #3
 800bc56:	440b      	add	r3, r1
 800bc58:	3314      	adds	r3, #20
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800bc5e:	7afb      	ldrb	r3, [r7, #11]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00e      	beq.n	800bc82 <etharp_cleanup_netif+0x46>
 800bc64:	490c      	ldr	r1, [pc, #48]	@ (800bc98 <etharp_cleanup_netif+0x5c>)
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	005b      	lsls	r3, r3, #1
 800bc6c:	4413      	add	r3, r2
 800bc6e:	00db      	lsls	r3, r3, #3
 800bc70:	440b      	add	r3, r1
 800bc72:	3308      	adds	r3, #8
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d102      	bne.n	800bc82 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f7ff fce5 	bl	800b64c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	3301      	adds	r3, #1
 800bc86:	60fb      	str	r3, [r7, #12]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2b09      	cmp	r3, #9
 800bc8c:	dddd      	ble.n	800bc4a <etharp_cleanup_netif+0xe>
    }
  }
}
 800bc8e:	bf00      	nop
 800bc90:	bf00      	nop
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	24007bcc 	.word	0x24007bcc

0800bc9c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800bc9c:	b5b0      	push	{r4, r5, r7, lr}
 800bc9e:	b08a      	sub	sp, #40	@ 0x28
 800bca0:	af04      	add	r7, sp, #16
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d107      	bne.n	800bcbc <etharp_input+0x20>
 800bcac:	4b3d      	ldr	r3, [pc, #244]	@ (800bda4 <etharp_input+0x108>)
 800bcae:	f240 228a 	movw	r2, #650	@ 0x28a
 800bcb2:	493d      	ldr	r1, [pc, #244]	@ (800bda8 <etharp_input+0x10c>)
 800bcb4:	483d      	ldr	r0, [pc, #244]	@ (800bdac <etharp_input+0x110>)
 800bcb6:	f002 f8b5 	bl	800de24 <iprintf>
 800bcba:	e06f      	b.n	800bd9c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bccc:	d10c      	bne.n	800bce8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800bcd2:	2b06      	cmp	r3, #6
 800bcd4:	d108      	bne.n	800bce8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bcda:	2b04      	cmp	r3, #4
 800bcdc:	d104      	bne.n	800bce8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	885b      	ldrh	r3, [r3, #2]
 800bce2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bce4:	2b08      	cmp	r3, #8
 800bce6:	d003      	beq.n	800bcf0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7f9 fe07 	bl	80058fc <pbuf_free>
    return;
 800bcee:	e055      	b.n	800bd9c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	330e      	adds	r3, #14
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	3318      	adds	r3, #24
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	3304      	adds	r3, #4
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d102      	bne.n	800bd10 <etharp_input+0x74>
    for_us = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	75fb      	strb	r3, [r7, #23]
 800bd0e:	e009      	b.n	800bd24 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	3304      	adds	r3, #4
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	bf0c      	ite	eq
 800bd1c:	2301      	moveq	r3, #1
 800bd1e:	2300      	movne	r3, #0
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	f103 0208 	add.w	r2, r3, #8
 800bd2a:	7dfb      	ldrb	r3, [r7, #23]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <etharp_input+0x98>
 800bd30:	2301      	movs	r3, #1
 800bd32:	e000      	b.n	800bd36 <etharp_input+0x9a>
 800bd34:	2302      	movs	r3, #2
 800bd36:	f107 010c 	add.w	r1, r7, #12
 800bd3a:	6838      	ldr	r0, [r7, #0]
 800bd3c:	f7ff fed8 	bl	800baf0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	88db      	ldrh	r3, [r3, #6]
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd4a:	d003      	beq.n	800bd54 <etharp_input+0xb8>
 800bd4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd50:	d01e      	beq.n	800bd90 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800bd52:	e020      	b.n	800bd96 <etharp_input+0xfa>
      if (for_us) {
 800bd54:	7dfb      	ldrb	r3, [r7, #23]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d01c      	beq.n	800bd94 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800bd70:	693a      	ldr	r2, [r7, #16]
 800bd72:	3208      	adds	r2, #8
        etharp_raw(netif,
 800bd74:	2102      	movs	r1, #2
 800bd76:	9103      	str	r1, [sp, #12]
 800bd78:	f107 010c 	add.w	r1, r7, #12
 800bd7c:	9102      	str	r1, [sp, #8]
 800bd7e:	9201      	str	r2, [sp, #4]
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	462b      	mov	r3, r5
 800bd84:	4622      	mov	r2, r4
 800bd86:	4601      	mov	r1, r0
 800bd88:	6838      	ldr	r0, [r7, #0]
 800bd8a:	f000 faeb 	bl	800c364 <etharp_raw>
      break;
 800bd8e:	e001      	b.n	800bd94 <etharp_input+0xf8>
      break;
 800bd90:	bf00      	nop
 800bd92:	e000      	b.n	800bd96 <etharp_input+0xfa>
      break;
 800bd94:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7f9 fdb0 	bl	80058fc <pbuf_free>
}
 800bd9c:	3718      	adds	r7, #24
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bdb0      	pop	{r4, r5, r7, pc}
 800bda2:	bf00      	nop
 800bda4:	08010f6c 	.word	0x08010f6c
 800bda8:	080110bc 	.word	0x080110bc
 800bdac:	08010fe4 	.word	0x08010fe4

0800bdb0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af02      	add	r7, sp, #8
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800bdbe:	79fa      	ldrb	r2, [r7, #7]
 800bdc0:	4944      	ldr	r1, [pc, #272]	@ (800bed4 <etharp_output_to_arp_index+0x124>)
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	4413      	add	r3, r2
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	440b      	add	r3, r1
 800bdcc:	3314      	adds	r3, #20
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d806      	bhi.n	800bde2 <etharp_output_to_arp_index+0x32>
 800bdd4:	4b40      	ldr	r3, [pc, #256]	@ (800bed8 <etharp_output_to_arp_index+0x128>)
 800bdd6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800bdda:	4940      	ldr	r1, [pc, #256]	@ (800bedc <etharp_output_to_arp_index+0x12c>)
 800bddc:	4840      	ldr	r0, [pc, #256]	@ (800bee0 <etharp_output_to_arp_index+0x130>)
 800bdde:	f002 f821 	bl	800de24 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800bde2:	79fa      	ldrb	r2, [r7, #7]
 800bde4:	493b      	ldr	r1, [pc, #236]	@ (800bed4 <etharp_output_to_arp_index+0x124>)
 800bde6:	4613      	mov	r3, r2
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	4413      	add	r3, r2
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	440b      	add	r3, r1
 800bdf0:	3314      	adds	r3, #20
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	d153      	bne.n	800bea0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800bdf8:	79fa      	ldrb	r2, [r7, #7]
 800bdfa:	4936      	ldr	r1, [pc, #216]	@ (800bed4 <etharp_output_to_arp_index+0x124>)
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	005b      	lsls	r3, r3, #1
 800be00:	4413      	add	r3, r2
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	440b      	add	r3, r1
 800be06:	3312      	adds	r3, #18
 800be08:	881b      	ldrh	r3, [r3, #0]
 800be0a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800be0e:	d919      	bls.n	800be44 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800be10:	79fa      	ldrb	r2, [r7, #7]
 800be12:	4613      	mov	r3, r2
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	4413      	add	r3, r2
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	4a2e      	ldr	r2, [pc, #184]	@ (800bed4 <etharp_output_to_arp_index+0x124>)
 800be1c:	4413      	add	r3, r2
 800be1e:	3304      	adds	r3, #4
 800be20:	4619      	mov	r1, r3
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f000 fb4c 	bl	800c4c0 <etharp_request>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d138      	bne.n	800bea0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800be2e:	79fa      	ldrb	r2, [r7, #7]
 800be30:	4928      	ldr	r1, [pc, #160]	@ (800bed4 <etharp_output_to_arp_index+0x124>)
 800be32:	4613      	mov	r3, r2
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	4413      	add	r3, r2
 800be38:	00db      	lsls	r3, r3, #3
 800be3a:	440b      	add	r3, r1
 800be3c:	3314      	adds	r3, #20
 800be3e:	2203      	movs	r2, #3
 800be40:	701a      	strb	r2, [r3, #0]
 800be42:	e02d      	b.n	800bea0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800be44:	79fa      	ldrb	r2, [r7, #7]
 800be46:	4923      	ldr	r1, [pc, #140]	@ (800bed4 <etharp_output_to_arp_index+0x124>)
 800be48:	4613      	mov	r3, r2
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	4413      	add	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	440b      	add	r3, r1
 800be52:	3312      	adds	r3, #18
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800be5a:	d321      	bcc.n	800bea0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800be5c:	79fa      	ldrb	r2, [r7, #7]
 800be5e:	4613      	mov	r3, r2
 800be60:	005b      	lsls	r3, r3, #1
 800be62:	4413      	add	r3, r2
 800be64:	00db      	lsls	r3, r3, #3
 800be66:	4a1b      	ldr	r2, [pc, #108]	@ (800bed4 <etharp_output_to_arp_index+0x124>)
 800be68:	4413      	add	r3, r2
 800be6a:	1d19      	adds	r1, r3, #4
 800be6c:	79fa      	ldrb	r2, [r7, #7]
 800be6e:	4613      	mov	r3, r2
 800be70:	005b      	lsls	r3, r3, #1
 800be72:	4413      	add	r3, r2
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	3308      	adds	r3, #8
 800be78:	4a16      	ldr	r2, [pc, #88]	@ (800bed4 <etharp_output_to_arp_index+0x124>)
 800be7a:	4413      	add	r3, r2
 800be7c:	3304      	adds	r3, #4
 800be7e:	461a      	mov	r2, r3
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f000 fafb 	bl	800c47c <etharp_request_dst>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d109      	bne.n	800bea0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800be8c:	79fa      	ldrb	r2, [r7, #7]
 800be8e:	4911      	ldr	r1, [pc, #68]	@ (800bed4 <etharp_output_to_arp_index+0x124>)
 800be90:	4613      	mov	r3, r2
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	4413      	add	r3, r2
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	440b      	add	r3, r1
 800be9a:	3314      	adds	r3, #20
 800be9c:	2203      	movs	r2, #3
 800be9e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800bea6:	79fa      	ldrb	r2, [r7, #7]
 800bea8:	4613      	mov	r3, r2
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	4413      	add	r3, r2
 800beae:	00db      	lsls	r3, r3, #3
 800beb0:	3308      	adds	r3, #8
 800beb2:	4a08      	ldr	r2, [pc, #32]	@ (800bed4 <etharp_output_to_arp_index+0x124>)
 800beb4:	4413      	add	r3, r2
 800beb6:	3304      	adds	r3, #4
 800beb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bebc:	9200      	str	r2, [sp, #0]
 800bebe:	460a      	mov	r2, r1
 800bec0:	68b9      	ldr	r1, [r7, #8]
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f001 fe66 	bl	800db94 <ethernet_output>
 800bec8:	4603      	mov	r3, r0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	24007bcc 	.word	0x24007bcc
 800bed8:	08010f6c 	.word	0x08010f6c
 800bedc:	080110dc 	.word	0x080110dc
 800bee0:	08010fe4 	.word	0x08010fe4

0800bee4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b08a      	sub	sp, #40	@ 0x28
 800bee8:	af02      	add	r7, sp, #8
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d106      	bne.n	800bf08 <etharp_output+0x24>
 800befa:	4b73      	ldr	r3, [pc, #460]	@ (800c0c8 <etharp_output+0x1e4>)
 800befc:	f240 321e 	movw	r2, #798	@ 0x31e
 800bf00:	4972      	ldr	r1, [pc, #456]	@ (800c0cc <etharp_output+0x1e8>)
 800bf02:	4873      	ldr	r0, [pc, #460]	@ (800c0d0 <etharp_output+0x1ec>)
 800bf04:	f001 ff8e 	bl	800de24 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d106      	bne.n	800bf1c <etharp_output+0x38>
 800bf0e:	4b6e      	ldr	r3, [pc, #440]	@ (800c0c8 <etharp_output+0x1e4>)
 800bf10:	f240 321f 	movw	r2, #799	@ 0x31f
 800bf14:	496f      	ldr	r1, [pc, #444]	@ (800c0d4 <etharp_output+0x1f0>)
 800bf16:	486e      	ldr	r0, [pc, #440]	@ (800c0d0 <etharp_output+0x1ec>)
 800bf18:	f001 ff84 	bl	800de24 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d106      	bne.n	800bf30 <etharp_output+0x4c>
 800bf22:	4b69      	ldr	r3, [pc, #420]	@ (800c0c8 <etharp_output+0x1e4>)
 800bf24:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800bf28:	496b      	ldr	r1, [pc, #428]	@ (800c0d8 <etharp_output+0x1f4>)
 800bf2a:	4869      	ldr	r0, [pc, #420]	@ (800c0d0 <etharp_output+0x1ec>)
 800bf2c:	f001 ff7a 	bl	800de24 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	68f9      	ldr	r1, [r7, #12]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 ff1e 	bl	800cd78 <ip4_addr_isbroadcast_u32>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d002      	beq.n	800bf48 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800bf42:	4b66      	ldr	r3, [pc, #408]	@ (800c0dc <etharp_output+0x1f8>)
 800bf44:	61fb      	str	r3, [r7, #28]
 800bf46:	e0af      	b.n	800c0a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf50:	2be0      	cmp	r3, #224	@ 0xe0
 800bf52:	d118      	bne.n	800bf86 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800bf54:	2301      	movs	r3, #1
 800bf56:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800bf5c:	235e      	movs	r3, #94	@ 0x5e
 800bf5e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	3301      	adds	r3, #1
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	3302      	adds	r3, #2
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3303      	adds	r3, #3
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800bf7e:	f107 0310 	add.w	r3, r7, #16
 800bf82:	61fb      	str	r3, [r7, #28]
 800bf84:	e090      	b.n	800c0a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	405a      	eors	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	3308      	adds	r3, #8
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4013      	ands	r3, r2
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d012      	beq.n	800bfc4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bfa4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d00b      	beq.n	800bfc4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	330c      	adds	r3, #12
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d003      	beq.n	800bfbe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	330c      	adds	r3, #12
 800bfba:	61bb      	str	r3, [r7, #24]
 800bfbc:	e002      	b.n	800bfc4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800bfbe:	f06f 0303 	mvn.w	r3, #3
 800bfc2:	e07d      	b.n	800c0c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bfc4:	4b46      	ldr	r3, [pc, #280]	@ (800c0e0 <etharp_output+0x1fc>)
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	4619      	mov	r1, r3
 800bfca:	4a46      	ldr	r2, [pc, #280]	@ (800c0e4 <etharp_output+0x200>)
 800bfcc:	460b      	mov	r3, r1
 800bfce:	005b      	lsls	r3, r3, #1
 800bfd0:	440b      	add	r3, r1
 800bfd2:	00db      	lsls	r3, r3, #3
 800bfd4:	4413      	add	r3, r2
 800bfd6:	3314      	adds	r3, #20
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d925      	bls.n	800c02a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bfde:	4b40      	ldr	r3, [pc, #256]	@ (800c0e0 <etharp_output+0x1fc>)
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	4a3f      	ldr	r2, [pc, #252]	@ (800c0e4 <etharp_output+0x200>)
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	005b      	lsls	r3, r3, #1
 800bfea:	440b      	add	r3, r1
 800bfec:	00db      	lsls	r3, r3, #3
 800bfee:	4413      	add	r3, r2
 800bff0:	3308      	adds	r3, #8
 800bff2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d117      	bne.n	800c02a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	4b38      	ldr	r3, [pc, #224]	@ (800c0e0 <etharp_output+0x1fc>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	4618      	mov	r0, r3
 800c004:	4937      	ldr	r1, [pc, #220]	@ (800c0e4 <etharp_output+0x200>)
 800c006:	4603      	mov	r3, r0
 800c008:	005b      	lsls	r3, r3, #1
 800c00a:	4403      	add	r3, r0
 800c00c:	00db      	lsls	r3, r3, #3
 800c00e:	440b      	add	r3, r1
 800c010:	3304      	adds	r3, #4
 800c012:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c014:	429a      	cmp	r2, r3
 800c016:	d108      	bne.n	800c02a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c018:	4b31      	ldr	r3, [pc, #196]	@ (800c0e0 <etharp_output+0x1fc>)
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	461a      	mov	r2, r3
 800c01e:	68b9      	ldr	r1, [r7, #8]
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f7ff fec5 	bl	800bdb0 <etharp_output_to_arp_index>
 800c026:	4603      	mov	r3, r0
 800c028:	e04a      	b.n	800c0c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c02a:	2300      	movs	r3, #0
 800c02c:	75fb      	strb	r3, [r7, #23]
 800c02e:	e031      	b.n	800c094 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c030:	7dfa      	ldrb	r2, [r7, #23]
 800c032:	492c      	ldr	r1, [pc, #176]	@ (800c0e4 <etharp_output+0x200>)
 800c034:	4613      	mov	r3, r2
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	4413      	add	r3, r2
 800c03a:	00db      	lsls	r3, r3, #3
 800c03c:	440b      	add	r3, r1
 800c03e:	3314      	adds	r3, #20
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d923      	bls.n	800c08e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c046:	7dfa      	ldrb	r2, [r7, #23]
 800c048:	4926      	ldr	r1, [pc, #152]	@ (800c0e4 <etharp_output+0x200>)
 800c04a:	4613      	mov	r3, r2
 800c04c:	005b      	lsls	r3, r3, #1
 800c04e:	4413      	add	r3, r2
 800c050:	00db      	lsls	r3, r3, #3
 800c052:	440b      	add	r3, r1
 800c054:	3308      	adds	r3, #8
 800c056:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d117      	bne.n	800c08e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	6819      	ldr	r1, [r3, #0]
 800c062:	7dfa      	ldrb	r2, [r7, #23]
 800c064:	481f      	ldr	r0, [pc, #124]	@ (800c0e4 <etharp_output+0x200>)
 800c066:	4613      	mov	r3, r2
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	4413      	add	r3, r2
 800c06c:	00db      	lsls	r3, r3, #3
 800c06e:	4403      	add	r3, r0
 800c070:	3304      	adds	r3, #4
 800c072:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c074:	4299      	cmp	r1, r3
 800c076:	d10a      	bne.n	800c08e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c078:	4a19      	ldr	r2, [pc, #100]	@ (800c0e0 <etharp_output+0x1fc>)
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c07e:	7dfb      	ldrb	r3, [r7, #23]
 800c080:	461a      	mov	r2, r3
 800c082:	68b9      	ldr	r1, [r7, #8]
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f7ff fe93 	bl	800bdb0 <etharp_output_to_arp_index>
 800c08a:	4603      	mov	r3, r0
 800c08c:	e018      	b.n	800c0c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	3301      	adds	r3, #1
 800c092:	75fb      	strb	r3, [r7, #23]
 800c094:	7dfb      	ldrb	r3, [r7, #23]
 800c096:	2b09      	cmp	r3, #9
 800c098:	d9ca      	bls.n	800c030 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	69b9      	ldr	r1, [r7, #24]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 f822 	bl	800c0e8 <etharp_query>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	e00b      	b.n	800c0c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800c0ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	68b9      	ldr	r1, [r7, #8]
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f001 fd6b 	bl	800db94 <ethernet_output>
 800c0be:	4603      	mov	r3, r0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3720      	adds	r7, #32
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	08010f6c 	.word	0x08010f6c
 800c0cc:	080110bc 	.word	0x080110bc
 800c0d0:	08010fe4 	.word	0x08010fe4
 800c0d4:	0801110c 	.word	0x0801110c
 800c0d8:	080110ac 	.word	0x080110ac
 800c0dc:	08011720 	.word	0x08011720
 800c0e0:	24007cbc 	.word	0x24007cbc
 800c0e4:	24007bcc 	.word	0x24007bcc

0800c0e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b08c      	sub	sp, #48	@ 0x30
 800c0ec:	af02      	add	r7, sp, #8
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	3326      	adds	r3, #38	@ 0x26
 800c0f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c0fa:	23ff      	movs	r3, #255	@ 0xff
 800c0fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800c100:	2300      	movs	r3, #0
 800c102:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68f9      	ldr	r1, [r7, #12]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f000 fe34 	bl	800cd78 <ip4_addr_isbroadcast_u32>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10c      	bne.n	800c130 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c11e:	2be0      	cmp	r3, #224	@ 0xe0
 800c120:	d006      	beq.n	800c130 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d003      	beq.n	800c130 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d102      	bne.n	800c136 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c130:	f06f 030f 	mvn.w	r3, #15
 800c134:	e101      	b.n	800c33a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	2101      	movs	r1, #1
 800c13a:	68b8      	ldr	r0, [r7, #8]
 800c13c:	f7ff fb60 	bl	800b800 <etharp_find_entry>
 800c140:	4603      	mov	r3, r0
 800c142:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c144:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	da02      	bge.n	800c152 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c14c:	8a7b      	ldrh	r3, [r7, #18]
 800c14e:	b25b      	sxtb	r3, r3
 800c150:	e0f3      	b.n	800c33a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c152:	8a7b      	ldrh	r3, [r7, #18]
 800c154:	2b7e      	cmp	r3, #126	@ 0x7e
 800c156:	d906      	bls.n	800c166 <etharp_query+0x7e>
 800c158:	4b7a      	ldr	r3, [pc, #488]	@ (800c344 <etharp_query+0x25c>)
 800c15a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800c15e:	497a      	ldr	r1, [pc, #488]	@ (800c348 <etharp_query+0x260>)
 800c160:	487a      	ldr	r0, [pc, #488]	@ (800c34c <etharp_query+0x264>)
 800c162:	f001 fe5f 	bl	800de24 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c166:	8a7b      	ldrh	r3, [r7, #18]
 800c168:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c16a:	7c7a      	ldrb	r2, [r7, #17]
 800c16c:	4978      	ldr	r1, [pc, #480]	@ (800c350 <etharp_query+0x268>)
 800c16e:	4613      	mov	r3, r2
 800c170:	005b      	lsls	r3, r3, #1
 800c172:	4413      	add	r3, r2
 800c174:	00db      	lsls	r3, r3, #3
 800c176:	440b      	add	r3, r1
 800c178:	3314      	adds	r3, #20
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d115      	bne.n	800c1ac <etharp_query+0xc4>
    is_new_entry = 1;
 800c180:	2301      	movs	r3, #1
 800c182:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c184:	7c7a      	ldrb	r2, [r7, #17]
 800c186:	4972      	ldr	r1, [pc, #456]	@ (800c350 <etharp_query+0x268>)
 800c188:	4613      	mov	r3, r2
 800c18a:	005b      	lsls	r3, r3, #1
 800c18c:	4413      	add	r3, r2
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	440b      	add	r3, r1
 800c192:	3314      	adds	r3, #20
 800c194:	2201      	movs	r2, #1
 800c196:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c198:	7c7a      	ldrb	r2, [r7, #17]
 800c19a:	496d      	ldr	r1, [pc, #436]	@ (800c350 <etharp_query+0x268>)
 800c19c:	4613      	mov	r3, r2
 800c19e:	005b      	lsls	r3, r3, #1
 800c1a0:	4413      	add	r3, r2
 800c1a2:	00db      	lsls	r3, r3, #3
 800c1a4:	440b      	add	r3, r1
 800c1a6:	3308      	adds	r3, #8
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c1ac:	7c7a      	ldrb	r2, [r7, #17]
 800c1ae:	4968      	ldr	r1, [pc, #416]	@ (800c350 <etharp_query+0x268>)
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	005b      	lsls	r3, r3, #1
 800c1b4:	4413      	add	r3, r2
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	440b      	add	r3, r1
 800c1ba:	3314      	adds	r3, #20
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d011      	beq.n	800c1e6 <etharp_query+0xfe>
 800c1c2:	7c7a      	ldrb	r2, [r7, #17]
 800c1c4:	4962      	ldr	r1, [pc, #392]	@ (800c350 <etharp_query+0x268>)
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	005b      	lsls	r3, r3, #1
 800c1ca:	4413      	add	r3, r2
 800c1cc:	00db      	lsls	r3, r3, #3
 800c1ce:	440b      	add	r3, r1
 800c1d0:	3314      	adds	r3, #20
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d806      	bhi.n	800c1e6 <etharp_query+0xfe>
 800c1d8:	4b5a      	ldr	r3, [pc, #360]	@ (800c344 <etharp_query+0x25c>)
 800c1da:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800c1de:	495d      	ldr	r1, [pc, #372]	@ (800c354 <etharp_query+0x26c>)
 800c1e0:	485a      	ldr	r0, [pc, #360]	@ (800c34c <etharp_query+0x264>)
 800c1e2:	f001 fe1f 	bl	800de24 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c1e6:	6a3b      	ldr	r3, [r7, #32]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d102      	bne.n	800c1f2 <etharp_query+0x10a>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10c      	bne.n	800c20c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c1f2:	68b9      	ldr	r1, [r7, #8]
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f000 f963 	bl	800c4c0 <etharp_request>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d102      	bne.n	800c20c <etharp_query+0x124>
      return result;
 800c206:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c20a:	e096      	b.n	800c33a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d106      	bne.n	800c220 <etharp_query+0x138>
 800c212:	4b4c      	ldr	r3, [pc, #304]	@ (800c344 <etharp_query+0x25c>)
 800c214:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800c218:	494f      	ldr	r1, [pc, #316]	@ (800c358 <etharp_query+0x270>)
 800c21a:	484c      	ldr	r0, [pc, #304]	@ (800c34c <etharp_query+0x264>)
 800c21c:	f001 fe02 	bl	800de24 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c220:	7c7a      	ldrb	r2, [r7, #17]
 800c222:	494b      	ldr	r1, [pc, #300]	@ (800c350 <etharp_query+0x268>)
 800c224:	4613      	mov	r3, r2
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	4413      	add	r3, r2
 800c22a:	00db      	lsls	r3, r3, #3
 800c22c:	440b      	add	r3, r1
 800c22e:	3314      	adds	r3, #20
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	2b01      	cmp	r3, #1
 800c234:	d917      	bls.n	800c266 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c236:	4a49      	ldr	r2, [pc, #292]	@ (800c35c <etharp_query+0x274>)
 800c238:	7c7b      	ldrb	r3, [r7, #17]
 800c23a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c23c:	7c7a      	ldrb	r2, [r7, #17]
 800c23e:	4613      	mov	r3, r2
 800c240:	005b      	lsls	r3, r3, #1
 800c242:	4413      	add	r3, r2
 800c244:	00db      	lsls	r3, r3, #3
 800c246:	3308      	adds	r3, #8
 800c248:	4a41      	ldr	r2, [pc, #260]	@ (800c350 <etharp_query+0x268>)
 800c24a:	4413      	add	r3, r2
 800c24c:	3304      	adds	r3, #4
 800c24e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c252:	9200      	str	r2, [sp, #0]
 800c254:	697a      	ldr	r2, [r7, #20]
 800c256:	6879      	ldr	r1, [r7, #4]
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	f001 fc9b 	bl	800db94 <ethernet_output>
 800c25e:	4603      	mov	r3, r0
 800c260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c264:	e067      	b.n	800c336 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c266:	7c7a      	ldrb	r2, [r7, #17]
 800c268:	4939      	ldr	r1, [pc, #228]	@ (800c350 <etharp_query+0x268>)
 800c26a:	4613      	mov	r3, r2
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	4413      	add	r3, r2
 800c270:	00db      	lsls	r3, r3, #3
 800c272:	440b      	add	r3, r1
 800c274:	3314      	adds	r3, #20
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d15c      	bne.n	800c336 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c284:	e01c      	b.n	800c2c0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	895a      	ldrh	r2, [r3, #10]
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	891b      	ldrh	r3, [r3, #8]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d10a      	bne.n	800c2a8 <etharp_query+0x1c0>
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d006      	beq.n	800c2a8 <etharp_query+0x1c0>
 800c29a:	4b2a      	ldr	r3, [pc, #168]	@ (800c344 <etharp_query+0x25c>)
 800c29c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800c2a0:	492f      	ldr	r1, [pc, #188]	@ (800c360 <etharp_query+0x278>)
 800c2a2:	482a      	ldr	r0, [pc, #168]	@ (800c34c <etharp_query+0x264>)
 800c2a4:	f001 fdbe 	bl	800de24 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	7b1b      	ldrb	r3, [r3, #12]
 800c2ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <etharp_query+0x1d2>
        copy_needed = 1;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	61bb      	str	r3, [r7, #24]
        break;
 800c2b8:	e005      	b.n	800c2c6 <etharp_query+0x1de>
      }
      p = p->next;
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1df      	bne.n	800c286 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d007      	beq.n	800c2dc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800c2d2:	200e      	movs	r0, #14
 800c2d4:	f7f9 fd6e 	bl	8005db4 <pbuf_clone>
 800c2d8:	61f8      	str	r0, [r7, #28]
 800c2da:	e004      	b.n	800c2e6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c2e0:	69f8      	ldr	r0, [r7, #28]
 800c2e2:	f7f9 fbab 	bl	8005a3c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d021      	beq.n	800c330 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c2ec:	7c7a      	ldrb	r2, [r7, #17]
 800c2ee:	4918      	ldr	r1, [pc, #96]	@ (800c350 <etharp_query+0x268>)
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	4413      	add	r3, r2
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	440b      	add	r3, r1
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00a      	beq.n	800c316 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c300:	7c7a      	ldrb	r2, [r7, #17]
 800c302:	4913      	ldr	r1, [pc, #76]	@ (800c350 <etharp_query+0x268>)
 800c304:	4613      	mov	r3, r2
 800c306:	005b      	lsls	r3, r3, #1
 800c308:	4413      	add	r3, r2
 800c30a:	00db      	lsls	r3, r3, #3
 800c30c:	440b      	add	r3, r1
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4618      	mov	r0, r3
 800c312:	f7f9 faf3 	bl	80058fc <pbuf_free>
      }
      arp_table[i].q = p;
 800c316:	7c7a      	ldrb	r2, [r7, #17]
 800c318:	490d      	ldr	r1, [pc, #52]	@ (800c350 <etharp_query+0x268>)
 800c31a:	4613      	mov	r3, r2
 800c31c:	005b      	lsls	r3, r3, #1
 800c31e:	4413      	add	r3, r2
 800c320:	00db      	lsls	r3, r3, #3
 800c322:	440b      	add	r3, r1
 800c324:	69fa      	ldr	r2, [r7, #28]
 800c326:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c328:	2300      	movs	r3, #0
 800c32a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c32e:	e002      	b.n	800c336 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c330:	23ff      	movs	r3, #255	@ 0xff
 800c332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800c336:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3728      	adds	r7, #40	@ 0x28
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	08010f6c 	.word	0x08010f6c
 800c348:	08011118 	.word	0x08011118
 800c34c:	08010fe4 	.word	0x08010fe4
 800c350:	24007bcc 	.word	0x24007bcc
 800c354:	08011128 	.word	0x08011128
 800c358:	0801110c 	.word	0x0801110c
 800c35c:	24007cbc 	.word	0x24007cbc
 800c360:	08011150 	.word	0x08011150

0800c364 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b08a      	sub	sp, #40	@ 0x28
 800c368:	af02      	add	r7, sp, #8
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d106      	bne.n	800c38a <etharp_raw+0x26>
 800c37c:	4b3a      	ldr	r3, [pc, #232]	@ (800c468 <etharp_raw+0x104>)
 800c37e:	f240 4257 	movw	r2, #1111	@ 0x457
 800c382:	493a      	ldr	r1, [pc, #232]	@ (800c46c <etharp_raw+0x108>)
 800c384:	483a      	ldr	r0, [pc, #232]	@ (800c470 <etharp_raw+0x10c>)
 800c386:	f001 fd4d 	bl	800de24 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c38a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c38e:	211c      	movs	r1, #28
 800c390:	200e      	movs	r0, #14
 800c392:	f7f8 ffcf 	bl	8005334 <pbuf_alloc>
 800c396:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d102      	bne.n	800c3a4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c39e:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a2:	e05d      	b.n	800c460 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	895b      	ldrh	r3, [r3, #10]
 800c3a8:	2b1b      	cmp	r3, #27
 800c3aa:	d806      	bhi.n	800c3ba <etharp_raw+0x56>
 800c3ac:	4b2e      	ldr	r3, [pc, #184]	@ (800c468 <etharp_raw+0x104>)
 800c3ae:	f240 4262 	movw	r2, #1122	@ 0x462
 800c3b2:	4930      	ldr	r1, [pc, #192]	@ (800c474 <etharp_raw+0x110>)
 800c3b4:	482e      	ldr	r0, [pc, #184]	@ (800c470 <etharp_raw+0x10c>)
 800c3b6:	f001 fd35 	bl	800de24 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c3c0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7f7 fea4 	bl	8004110 <lwip_htons>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c3d6:	2b06      	cmp	r3, #6
 800c3d8:	d006      	beq.n	800c3e8 <etharp_raw+0x84>
 800c3da:	4b23      	ldr	r3, [pc, #140]	@ (800c468 <etharp_raw+0x104>)
 800c3dc:	f240 4269 	movw	r2, #1129	@ 0x469
 800c3e0:	4925      	ldr	r1, [pc, #148]	@ (800c478 <etharp_raw+0x114>)
 800c3e2:	4823      	ldr	r0, [pc, #140]	@ (800c470 <etharp_raw+0x10c>)
 800c3e4:	f001 fd1e 	bl	800de24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	2206      	movs	r2, #6
 800c3ee:	6839      	ldr	r1, [r7, #0]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f001 fdf2 	bl	800dfda <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	3312      	adds	r3, #18
 800c3fa:	2206      	movs	r2, #6
 800c3fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c3fe:	4618      	mov	r0, r3
 800c400:	f001 fdeb 	bl	800dfda <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	330e      	adds	r3, #14
 800c408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c40a:	6812      	ldr	r2, [r2, #0]
 800c40c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	3318      	adds	r3, #24
 800c412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c414:	6812      	ldr	r2, [r2, #0]
 800c416:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	2200      	movs	r2, #0
 800c41c:	701a      	strb	r2, [r3, #0]
 800c41e:	2200      	movs	r2, #0
 800c420:	f042 0201 	orr.w	r2, r2, #1
 800c424:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	2200      	movs	r2, #0
 800c42a:	f042 0208 	orr.w	r2, r2, #8
 800c42e:	709a      	strb	r2, [r3, #2]
 800c430:	2200      	movs	r2, #0
 800c432:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	2206      	movs	r2, #6
 800c438:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	2204      	movs	r2, #4
 800c43e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c440:	f640 0306 	movw	r3, #2054	@ 0x806
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	69b9      	ldr	r1, [r7, #24]
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f001 fba1 	bl	800db94 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c452:	69b8      	ldr	r0, [r7, #24]
 800c454:	f7f9 fa52 	bl	80058fc <pbuf_free>
  p = NULL;
 800c458:	2300      	movs	r3, #0
 800c45a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c45c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3720      	adds	r7, #32
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	08010f6c 	.word	0x08010f6c
 800c46c:	080110bc 	.word	0x080110bc
 800c470:	08010fe4 	.word	0x08010fe4
 800c474:	0801116c 	.word	0x0801116c
 800c478:	080111a0 	.word	0x080111a0

0800c47c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b088      	sub	sp, #32
 800c480:	af04      	add	r7, sp, #16
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c498:	2201      	movs	r2, #1
 800c49a:	9203      	str	r2, [sp, #12]
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	9202      	str	r2, [sp, #8]
 800c4a0:	4a06      	ldr	r2, [pc, #24]	@ (800c4bc <etharp_request_dst+0x40>)
 800c4a2:	9201      	str	r2, [sp, #4]
 800c4a4:	9300      	str	r3, [sp, #0]
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f7ff ff5a 	bl	800c364 <etharp_raw>
 800c4b0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	08011728 	.word	0x08011728

0800c4c0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c4ca:	4a05      	ldr	r2, [pc, #20]	@ (800c4e0 <etharp_request+0x20>)
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7ff ffd4 	bl	800c47c <etharp_request_dst>
 800c4d4:	4603      	mov	r3, r0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	08011720 	.word	0x08011720

0800c4e4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b08e      	sub	sp, #56	@ 0x38
 800c4e8:	af04      	add	r7, sp, #16
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c4ee:	4b87      	ldr	r3, [pc, #540]	@ (800c70c <icmp_input+0x228>)
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	f003 030f 	and.w	r3, r3, #15
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	b2db      	uxtb	r3, r3
 800c502:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800c504:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c506:	2b13      	cmp	r3, #19
 800c508:	f240 80e8 	bls.w	800c6dc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	895b      	ldrh	r3, [r3, #10]
 800c510:	2b03      	cmp	r3, #3
 800c512:	f240 80e5 	bls.w	800c6e0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c520:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c524:	2b00      	cmp	r3, #0
 800c526:	f000 80d2 	beq.w	800c6ce <icmp_input+0x1ea>
 800c52a:	2b08      	cmp	r3, #8
 800c52c:	f040 80d2 	bne.w	800c6d4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c530:	4b77      	ldr	r3, [pc, #476]	@ (800c710 <icmp_input+0x22c>)
 800c532:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c534:	4b75      	ldr	r3, [pc, #468]	@ (800c70c <icmp_input+0x228>)
 800c536:	695b      	ldr	r3, [r3, #20]
 800c538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c53c:	2be0      	cmp	r3, #224	@ 0xe0
 800c53e:	f000 80d6 	beq.w	800c6ee <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c542:	4b72      	ldr	r3, [pc, #456]	@ (800c70c <icmp_input+0x228>)
 800c544:	695b      	ldr	r3, [r3, #20]
 800c546:	4a71      	ldr	r2, [pc, #452]	@ (800c70c <icmp_input+0x228>)
 800c548:	6812      	ldr	r2, [r2, #0]
 800c54a:	4611      	mov	r1, r2
 800c54c:	4618      	mov	r0, r3
 800c54e:	f000 fc13 	bl	800cd78 <ip4_addr_isbroadcast_u32>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	f040 80cc 	bne.w	800c6f2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	891b      	ldrh	r3, [r3, #8]
 800c55e:	2b07      	cmp	r3, #7
 800c560:	f240 80c0 	bls.w	800c6e4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7f7 fe70 	bl	800424a <inet_chksum_pbuf>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d003      	beq.n	800c578 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7f9 f9c3 	bl	80058fc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800c576:	e0c5      	b.n	800c704 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c578:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c57a:	330e      	adds	r3, #14
 800c57c:	4619      	mov	r1, r3
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7f9 f926 	bl	80057d0 <pbuf_add_header>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d04b      	beq.n	800c622 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	891a      	ldrh	r2, [r3, #8]
 800c58e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c590:	4413      	add	r3, r2
 800c592:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	891b      	ldrh	r3, [r3, #8]
 800c598:	8b7a      	ldrh	r2, [r7, #26]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	f0c0 80ab 	bcc.w	800c6f6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c5a0:	8b7b      	ldrh	r3, [r7, #26]
 800c5a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	200e      	movs	r0, #14
 800c5aa:	f7f8 fec3 	bl	8005334 <pbuf_alloc>
 800c5ae:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 80a1 	beq.w	800c6fa <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	895b      	ldrh	r3, [r3, #10]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5c0:	3308      	adds	r3, #8
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d203      	bcs.n	800c5ce <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c5c6:	6978      	ldr	r0, [r7, #20]
 800c5c8:	f7f9 f998 	bl	80058fc <pbuf_free>
          goto icmperr;
 800c5cc:	e096      	b.n	800c6fc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c5d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f001 fcff 	bl	800dfda <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c5dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5de:	4619      	mov	r1, r3
 800c5e0:	6978      	ldr	r0, [r7, #20]
 800c5e2:	f7f9 f905 	bl	80057f0 <pbuf_remove_header>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d009      	beq.n	800c600 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c5ec:	4b49      	ldr	r3, [pc, #292]	@ (800c714 <icmp_input+0x230>)
 800c5ee:	22b6      	movs	r2, #182	@ 0xb6
 800c5f0:	4949      	ldr	r1, [pc, #292]	@ (800c718 <icmp_input+0x234>)
 800c5f2:	484a      	ldr	r0, [pc, #296]	@ (800c71c <icmp_input+0x238>)
 800c5f4:	f001 fc16 	bl	800de24 <iprintf>
          pbuf_free(r);
 800c5f8:	6978      	ldr	r0, [r7, #20]
 800c5fa:	f7f9 f97f 	bl	80058fc <pbuf_free>
          goto icmperr;
 800c5fe:	e07d      	b.n	800c6fc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c600:	6879      	ldr	r1, [r7, #4]
 800c602:	6978      	ldr	r0, [r7, #20]
 800c604:	f7f9 fa92 	bl	8005b2c <pbuf_copy>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d003      	beq.n	800c616 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c60e:	6978      	ldr	r0, [r7, #20]
 800c610:	f7f9 f974 	bl	80058fc <pbuf_free>
          goto icmperr;
 800c614:	e072      	b.n	800c6fc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7f9 f970 	bl	80058fc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	607b      	str	r3, [r7, #4]
 800c620:	e00f      	b.n	800c642 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c622:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c624:	330e      	adds	r3, #14
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7f9 f8e1 	bl	80057f0 <pbuf_remove_header>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d006      	beq.n	800c642 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c634:	4b37      	ldr	r3, [pc, #220]	@ (800c714 <icmp_input+0x230>)
 800c636:	22c7      	movs	r2, #199	@ 0xc7
 800c638:	4939      	ldr	r1, [pc, #228]	@ (800c720 <icmp_input+0x23c>)
 800c63a:	4838      	ldr	r0, [pc, #224]	@ (800c71c <icmp_input+0x238>)
 800c63c:	f001 fbf2 	bl	800de24 <iprintf>
          goto icmperr;
 800c640:	e05c      	b.n	800c6fc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c648:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c64a:	4619      	mov	r1, r3
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7f9 f8bf 	bl	80057d0 <pbuf_add_header>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d13c      	bne.n	800c6d2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c666:	4b29      	ldr	r3, [pc, #164]	@ (800c70c <icmp_input+0x228>)
 800c668:	691a      	ldr	r2, [r3, #16]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	2200      	movs	r2, #0
 800c672:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	885b      	ldrh	r3, [r3, #2]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800c67e:	4293      	cmp	r3, r2
 800c680:	d907      	bls.n	800c692 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	885b      	ldrh	r3, [r3, #2]
 800c686:	b29b      	uxth	r3, r3
 800c688:	3309      	adds	r3, #9
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	805a      	strh	r2, [r3, #2]
 800c690:	e006      	b.n	800c6a0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	885b      	ldrh	r3, [r3, #2]
 800c696:	b29b      	uxth	r3, r3
 800c698:	3308      	adds	r3, #8
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	22ff      	movs	r2, #255	@ 0xff
 800c6a4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	729a      	strb	r2, [r3, #10]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	9302      	str	r3, [sp, #8]
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	9301      	str	r3, [sp, #4]
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	23ff      	movs	r3, #255	@ 0xff
 800c6be:	2200      	movs	r2, #0
 800c6c0:	69f9      	ldr	r1, [r7, #28]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 fa80 	bl	800cbc8 <ip4_output_if>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c6cc:	e001      	b.n	800c6d2 <icmp_input+0x1ee>
      break;
 800c6ce:	bf00      	nop
 800c6d0:	e000      	b.n	800c6d4 <icmp_input+0x1f0>
      break;
 800c6d2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f7f9 f911 	bl	80058fc <pbuf_free>
  return;
 800c6da:	e013      	b.n	800c704 <icmp_input+0x220>
    goto lenerr;
 800c6dc:	bf00      	nop
 800c6de:	e002      	b.n	800c6e6 <icmp_input+0x202>
    goto lenerr;
 800c6e0:	bf00      	nop
 800c6e2:	e000      	b.n	800c6e6 <icmp_input+0x202>
        goto lenerr;
 800c6e4:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f7f9 f908 	bl	80058fc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c6ec:	e00a      	b.n	800c704 <icmp_input+0x220>
        goto icmperr;
 800c6ee:	bf00      	nop
 800c6f0:	e004      	b.n	800c6fc <icmp_input+0x218>
        goto icmperr;
 800c6f2:	bf00      	nop
 800c6f4:	e002      	b.n	800c6fc <icmp_input+0x218>
          goto icmperr;
 800c6f6:	bf00      	nop
 800c6f8:	e000      	b.n	800c6fc <icmp_input+0x218>
          goto icmperr;
 800c6fa:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f7f9 f8fd 	bl	80058fc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c702:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c704:	3728      	adds	r7, #40	@ 0x28
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	24004c50 	.word	0x24004c50
 800c710:	24004c64 	.word	0x24004c64
 800c714:	080111e4 	.word	0x080111e4
 800c718:	0801121c 	.word	0x0801121c
 800c71c:	08011254 	.word	0x08011254
 800c720:	0801127c 	.word	0x0801127c

0800c724 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	460b      	mov	r3, r1
 800c72e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c730:	78fb      	ldrb	r3, [r7, #3]
 800c732:	461a      	mov	r2, r3
 800c734:	2103      	movs	r1, #3
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f814 	bl	800c764 <icmp_send_response>
}
 800c73c:	bf00      	nop
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	460b      	mov	r3, r1
 800c74e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c750:	78fb      	ldrb	r3, [r7, #3]
 800c752:	461a      	mov	r2, r3
 800c754:	210b      	movs	r1, #11
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f804 	bl	800c764 <icmp_send_response>
}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b08c      	sub	sp, #48	@ 0x30
 800c768:	af04      	add	r7, sp, #16
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	460b      	mov	r3, r1
 800c76e:	70fb      	strb	r3, [r7, #3]
 800c770:	4613      	mov	r3, r2
 800c772:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c774:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c778:	2124      	movs	r1, #36	@ 0x24
 800c77a:	2022      	movs	r0, #34	@ 0x22
 800c77c:	f7f8 fdda 	bl	8005334 <pbuf_alloc>
 800c780:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d056      	beq.n	800c836 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	895b      	ldrh	r3, [r3, #10]
 800c78c:	2b23      	cmp	r3, #35	@ 0x23
 800c78e:	d806      	bhi.n	800c79e <icmp_send_response+0x3a>
 800c790:	4b2b      	ldr	r3, [pc, #172]	@ (800c840 <icmp_send_response+0xdc>)
 800c792:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800c796:	492b      	ldr	r1, [pc, #172]	@ (800c844 <icmp_send_response+0xe0>)
 800c798:	482b      	ldr	r0, [pc, #172]	@ (800c848 <icmp_send_response+0xe4>)
 800c79a:	f001 fb43 	bl	800de24 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	78fa      	ldrb	r2, [r7, #3]
 800c7ae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	78ba      	ldrb	r2, [r7, #2]
 800c7b4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	711a      	strb	r2, [r3, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	719a      	strb	r2, [r3, #6]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	f103 0008 	add.w	r0, r3, #8
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	221c      	movs	r2, #28
 800c7d8:	4619      	mov	r1, r3
 800c7da:	f001 fbfe 	bl	800dfda <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c7e4:	f107 030c 	add.w	r3, r7, #12
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f000 f82f 	bl	800c84c <ip4_route>
 800c7ee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d01b      	beq.n	800c82e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	709a      	strb	r2, [r3, #2]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	895b      	ldrh	r3, [r3, #10]
 800c804:	4619      	mov	r1, r3
 800c806:	6978      	ldr	r0, [r7, #20]
 800c808:	f7f7 fd0d 	bl	8004226 <inet_chksum>
 800c80c:	4603      	mov	r3, r0
 800c80e:	461a      	mov	r2, r3
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c814:	f107 020c 	add.w	r2, r7, #12
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	9302      	str	r3, [sp, #8]
 800c81c:	2301      	movs	r3, #1
 800c81e:	9301      	str	r3, [sp, #4]
 800c820:	2300      	movs	r3, #0
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	23ff      	movs	r3, #255	@ 0xff
 800c826:	2100      	movs	r1, #0
 800c828:	69f8      	ldr	r0, [r7, #28]
 800c82a:	f000 f9cd 	bl	800cbc8 <ip4_output_if>
  }
  pbuf_free(q);
 800c82e:	69f8      	ldr	r0, [r7, #28]
 800c830:	f7f9 f864 	bl	80058fc <pbuf_free>
 800c834:	e000      	b.n	800c838 <icmp_send_response+0xd4>
    return;
 800c836:	bf00      	nop
}
 800c838:	3720      	adds	r7, #32
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	080111e4 	.word	0x080111e4
 800c844:	080112b0 	.word	0x080112b0
 800c848:	08011254 	.word	0x08011254

0800c84c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800c854:	4b33      	ldr	r3, [pc, #204]	@ (800c924 <ip4_route+0xd8>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	60fb      	str	r3, [r7, #12]
 800c85a:	e036      	b.n	800c8ca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	b2db      	uxtb	r3, r3
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d02b      	beq.n	800c8c4 <ip4_route+0x78>
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c872:	089b      	lsrs	r3, r3, #2
 800c874:	f003 0301 	and.w	r3, r3, #1
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d022      	beq.n	800c8c4 <ip4_route+0x78>
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	3304      	adds	r3, #4
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d01d      	beq.n	800c8c4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	3304      	adds	r3, #4
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	405a      	eors	r2, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	3308      	adds	r3, #8
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4013      	ands	r3, r2
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	e038      	b.n	800c916 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8aa:	f003 0302 	and.w	r3, r3, #2
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d108      	bne.n	800c8c4 <ip4_route+0x78>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	330c      	adds	r3, #12
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d101      	bne.n	800c8c4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	e028      	b.n	800c916 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	60fb      	str	r3, [r7, #12]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1c5      	bne.n	800c85c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c8d0:	4b15      	ldr	r3, [pc, #84]	@ (800c928 <ip4_route+0xdc>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d01a      	beq.n	800c90e <ip4_route+0xc2>
 800c8d8:	4b13      	ldr	r3, [pc, #76]	@ (800c928 <ip4_route+0xdc>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8e0:	f003 0301 	and.w	r3, r3, #1
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d012      	beq.n	800c90e <ip4_route+0xc2>
 800c8e8:	4b0f      	ldr	r3, [pc, #60]	@ (800c928 <ip4_route+0xdc>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8f0:	f003 0304 	and.w	r3, r3, #4
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00a      	beq.n	800c90e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c8f8:	4b0b      	ldr	r3, [pc, #44]	@ (800c928 <ip4_route+0xdc>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c900:	2b00      	cmp	r3, #0
 800c902:	d004      	beq.n	800c90e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c90c:	d101      	bne.n	800c912 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c90e:	2300      	movs	r3, #0
 800c910:	e001      	b.n	800c916 <ip4_route+0xca>
  }

  return netif_default;
 800c912:	4b05      	ldr	r3, [pc, #20]	@ (800c928 <ip4_route+0xdc>)
 800c914:	681b      	ldr	r3, [r3, #0]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3714      	adds	r7, #20
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	24007b60 	.word	0x24007b60
 800c928:	24007b64 	.word	0x24007b64

0800c92c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c93a:	f003 0301 	and.w	r3, r3, #1
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b00      	cmp	r3, #0
 800c942:	d016      	beq.n	800c972 <ip4_input_accept+0x46>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	3304      	adds	r3, #4
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d011      	beq.n	800c972 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c94e:	4b0b      	ldr	r3, [pc, #44]	@ (800c97c <ip4_input_accept+0x50>)
 800c950:	695a      	ldr	r2, [r3, #20]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	3304      	adds	r3, #4
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	429a      	cmp	r2, r3
 800c95a:	d008      	beq.n	800c96e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c95c:	4b07      	ldr	r3, [pc, #28]	@ (800c97c <ip4_input_accept+0x50>)
 800c95e:	695b      	ldr	r3, [r3, #20]
 800c960:	6879      	ldr	r1, [r7, #4]
 800c962:	4618      	mov	r0, r3
 800c964:	f000 fa08 	bl	800cd78 <ip4_addr_isbroadcast_u32>
 800c968:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d001      	beq.n	800c972 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800c96e:	2301      	movs	r3, #1
 800c970:	e000      	b.n	800c974 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	24004c50 	.word	0x24004c50

0800c980 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b086      	sub	sp, #24
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	091b      	lsrs	r3, r3, #4
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2b04      	cmp	r3, #4
 800c99a:	d004      	beq.n	800c9a6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7f8 ffad 	bl	80058fc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	e107      	b.n	800cbb6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	f003 030f 	and.w	r3, r3, #15
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	885b      	ldrh	r3, [r3, #2]
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7f7 fba7 	bl	8004110 <lwip_htons>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	891b      	ldrh	r3, [r3, #8]
 800c9ca:	89ba      	ldrh	r2, [r7, #12]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d204      	bcs.n	800c9da <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c9d0:	89bb      	ldrh	r3, [r7, #12]
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7f8 fe0b 	bl	80055f0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	895b      	ldrh	r3, [r3, #10]
 800c9de:	89fa      	ldrh	r2, [r7, #14]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d807      	bhi.n	800c9f4 <ip4_input+0x74>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	891b      	ldrh	r3, [r3, #8]
 800c9e8:	89ba      	ldrh	r2, [r7, #12]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d802      	bhi.n	800c9f4 <ip4_input+0x74>
 800c9ee:	89fb      	ldrh	r3, [r7, #14]
 800c9f0:	2b13      	cmp	r3, #19
 800c9f2:	d804      	bhi.n	800c9fe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7f8 ff81 	bl	80058fc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	e0db      	b.n	800cbb6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	4a6f      	ldr	r2, [pc, #444]	@ (800cbc0 <ip4_input+0x240>)
 800ca04:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	4a6d      	ldr	r2, [pc, #436]	@ (800cbc0 <ip4_input+0x240>)
 800ca0c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ca0e:	4b6c      	ldr	r3, [pc, #432]	@ (800cbc0 <ip4_input+0x240>)
 800ca10:	695b      	ldr	r3, [r3, #20]
 800ca12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca16:	2be0      	cmp	r3, #224	@ 0xe0
 800ca18:	d112      	bne.n	800ca40 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca20:	f003 0301 	and.w	r3, r3, #1
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d007      	beq.n	800ca3a <ip4_input+0xba>
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d002      	beq.n	800ca3a <ip4_input+0xba>
      netif = inp;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	613b      	str	r3, [r7, #16]
 800ca38:	e02a      	b.n	800ca90 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	613b      	str	r3, [r7, #16]
 800ca3e:	e027      	b.n	800ca90 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ca40:	6838      	ldr	r0, [r7, #0]
 800ca42:	f7ff ff73 	bl	800c92c <ip4_input_accept>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <ip4_input+0xd2>
      netif = inp;
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	613b      	str	r3, [r7, #16]
 800ca50:	e01e      	b.n	800ca90 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ca52:	2300      	movs	r3, #0
 800ca54:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ca56:	4b5a      	ldr	r3, [pc, #360]	@ (800cbc0 <ip4_input+0x240>)
 800ca58:	695b      	ldr	r3, [r3, #20]
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca5e:	d017      	beq.n	800ca90 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ca60:	4b58      	ldr	r3, [pc, #352]	@ (800cbc4 <ip4_input+0x244>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	613b      	str	r3, [r7, #16]
 800ca66:	e00e      	b.n	800ca86 <ip4_input+0x106>
          if (netif == inp) {
 800ca68:	693a      	ldr	r2, [r7, #16]
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d006      	beq.n	800ca7e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ca70:	6938      	ldr	r0, [r7, #16]
 800ca72:	f7ff ff5b 	bl	800c92c <ip4_input_accept>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d108      	bne.n	800ca8e <ip4_input+0x10e>
 800ca7c:	e000      	b.n	800ca80 <ip4_input+0x100>
            continue;
 800ca7e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	613b      	str	r3, [r7, #16]
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1ed      	bne.n	800ca68 <ip4_input+0xe8>
 800ca8c:	e000      	b.n	800ca90 <ip4_input+0x110>
            break;
 800ca8e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ca90:	4b4b      	ldr	r3, [pc, #300]	@ (800cbc0 <ip4_input+0x240>)
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	6839      	ldr	r1, [r7, #0]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 f96e 	bl	800cd78 <ip4_addr_isbroadcast_u32>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d105      	bne.n	800caae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800caa2:	4b47      	ldr	r3, [pc, #284]	@ (800cbc0 <ip4_input+0x240>)
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800caaa:	2be0      	cmp	r3, #224	@ 0xe0
 800caac:	d104      	bne.n	800cab8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7f8 ff24 	bl	80058fc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cab4:	2300      	movs	r3, #0
 800cab6:	e07e      	b.n	800cbb6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d104      	bne.n	800cac8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7f8 ff1c 	bl	80058fc <pbuf_free>
    return ERR_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	e076      	b.n	800cbb6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	88db      	ldrh	r3, [r3, #6]
 800cacc:	b29b      	uxth	r3, r3
 800cace:	461a      	mov	r2, r3
 800cad0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800cad4:	4013      	ands	r3, r2
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00b      	beq.n	800caf2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 fc92 	bl	800d404 <ip4_reass>
 800cae0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d101      	bne.n	800caec <ip4_input+0x16c>
      return ERR_OK;
 800cae8:	2300      	movs	r3, #0
 800caea:	e064      	b.n	800cbb6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800caf2:	4a33      	ldr	r2, [pc, #204]	@ (800cbc0 <ip4_input+0x240>)
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800caf8:	4a31      	ldr	r2, [pc, #196]	@ (800cbc0 <ip4_input+0x240>)
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800cafe:	4a30      	ldr	r2, [pc, #192]	@ (800cbc0 <ip4_input+0x240>)
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	f003 030f 	and.w	r3, r3, #15
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	461a      	mov	r2, r3
 800cb14:	4b2a      	ldr	r3, [pc, #168]	@ (800cbc0 <ip4_input+0x240>)
 800cb16:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800cb18:	89fb      	ldrh	r3, [r7, #14]
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7f8 fe67 	bl	80057f0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	7a5b      	ldrb	r3, [r3, #9]
 800cb26:	2b11      	cmp	r3, #17
 800cb28:	d006      	beq.n	800cb38 <ip4_input+0x1b8>
 800cb2a:	2b11      	cmp	r3, #17
 800cb2c:	dc13      	bgt.n	800cb56 <ip4_input+0x1d6>
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d00c      	beq.n	800cb4c <ip4_input+0x1cc>
 800cb32:	2b06      	cmp	r3, #6
 800cb34:	d005      	beq.n	800cb42 <ip4_input+0x1c2>
 800cb36:	e00e      	b.n	800cb56 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800cb38:	6839      	ldr	r1, [r7, #0]
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f7fe fc42 	bl	800b3c4 <udp_input>
        break;
 800cb40:	e026      	b.n	800cb90 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800cb42:	6839      	ldr	r1, [r7, #0]
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7fa fd03 	bl	8007550 <tcp_input>
        break;
 800cb4a:	e021      	b.n	800cb90 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800cb4c:	6839      	ldr	r1, [r7, #0]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7ff fcc8 	bl	800c4e4 <icmp_input>
        break;
 800cb54:	e01c      	b.n	800cb90 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cb56:	4b1a      	ldr	r3, [pc, #104]	@ (800cbc0 <ip4_input+0x240>)
 800cb58:	695b      	ldr	r3, [r3, #20]
 800cb5a:	6939      	ldr	r1, [r7, #16]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f000 f90b 	bl	800cd78 <ip4_addr_isbroadcast_u32>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10f      	bne.n	800cb88 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cb68:	4b15      	ldr	r3, [pc, #84]	@ (800cbc0 <ip4_input+0x240>)
 800cb6a:	695b      	ldr	r3, [r3, #20]
 800cb6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cb70:	2be0      	cmp	r3, #224	@ 0xe0
 800cb72:	d009      	beq.n	800cb88 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800cb74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7f8 feab 	bl	80058d6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800cb80:	2102      	movs	r1, #2
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7ff fdce 	bl	800c724 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7f8 feb7 	bl	80058fc <pbuf_free>
        break;
 800cb8e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800cb90:	4b0b      	ldr	r3, [pc, #44]	@ (800cbc0 <ip4_input+0x240>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800cb96:	4b0a      	ldr	r3, [pc, #40]	@ (800cbc0 <ip4_input+0x240>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800cb9c:	4b08      	ldr	r3, [pc, #32]	@ (800cbc0 <ip4_input+0x240>)
 800cb9e:	2200      	movs	r2, #0
 800cba0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800cba2:	4b07      	ldr	r3, [pc, #28]	@ (800cbc0 <ip4_input+0x240>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800cba8:	4b05      	ldr	r3, [pc, #20]	@ (800cbc0 <ip4_input+0x240>)
 800cbaa:	2200      	movs	r2, #0
 800cbac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cbae:	4b04      	ldr	r3, [pc, #16]	@ (800cbc0 <ip4_input+0x240>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3718      	adds	r7, #24
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	24004c50 	.word	0x24004c50
 800cbc4:	24007b60 	.word	0x24007b60

0800cbc8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b08a      	sub	sp, #40	@ 0x28
 800cbcc:	af04      	add	r7, sp, #16
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
 800cbd4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d009      	beq.n	800cbf4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d003      	beq.n	800cbee <ip4_output_if+0x26>
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d102      	bne.n	800cbf4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800cbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf0:	3304      	adds	r3, #4
 800cbf2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cbf4:	78fa      	ldrb	r2, [r7, #3]
 800cbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf8:	9302      	str	r3, [sp, #8]
 800cbfa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	4613      	mov	r3, r2
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	6979      	ldr	r1, [r7, #20]
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f000 f805 	bl	800cc1c <ip4_output_if_src>
 800cc12:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3718      	adds	r7, #24
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b088      	sub	sp, #32
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	607a      	str	r2, [r7, #4]
 800cc28:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	7b9b      	ldrb	r3, [r3, #14]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d006      	beq.n	800cc40 <ip4_output_if_src+0x24>
 800cc32:	4b4b      	ldr	r3, [pc, #300]	@ (800cd60 <ip4_output_if_src+0x144>)
 800cc34:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800cc38:	494a      	ldr	r1, [pc, #296]	@ (800cd64 <ip4_output_if_src+0x148>)
 800cc3a:	484b      	ldr	r0, [pc, #300]	@ (800cd68 <ip4_output_if_src+0x14c>)
 800cc3c:	f001 f8f2 	bl	800de24 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d060      	beq.n	800cd08 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cc46:	2314      	movs	r3, #20
 800cc48:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800cc4a:	2114      	movs	r1, #20
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f7f8 fdbf 	bl	80057d0 <pbuf_add_header>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cc58:	f06f 0301 	mvn.w	r3, #1
 800cc5c:	e07c      	b.n	800cd58 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	895b      	ldrh	r3, [r3, #10]
 800cc68:	2b13      	cmp	r3, #19
 800cc6a:	d806      	bhi.n	800cc7a <ip4_output_if_src+0x5e>
 800cc6c:	4b3c      	ldr	r3, [pc, #240]	@ (800cd60 <ip4_output_if_src+0x144>)
 800cc6e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800cc72:	493e      	ldr	r1, [pc, #248]	@ (800cd6c <ip4_output_if_src+0x150>)
 800cc74:	483c      	ldr	r0, [pc, #240]	@ (800cd68 <ip4_output_if_src+0x14c>)
 800cc76:	f001 f8d5 	bl	800de24 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	78fa      	ldrb	r2, [r7, #3]
 800cc7e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800cc86:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cc90:	8b7b      	ldrh	r3, [r7, #26]
 800cc92:	089b      	lsrs	r3, r3, #2
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cca8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	891b      	ldrh	r3, [r3, #8]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7f7 fa2e 	bl	8004110 <lwip_htons>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	719a      	strb	r2, [r3, #6]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ccc6:	4b2a      	ldr	r3, [pc, #168]	@ (800cd70 <ip4_output_if_src+0x154>)
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7f7 fa20 	bl	8004110 <lwip_htons>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ccd8:	4b25      	ldr	r3, [pc, #148]	@ (800cd70 <ip4_output_if_src+0x154>)
 800ccda:	881b      	ldrh	r3, [r3, #0]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	b29a      	uxth	r2, r3
 800cce0:	4b23      	ldr	r3, [pc, #140]	@ (800cd70 <ip4_output_if_src+0x154>)
 800cce2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d104      	bne.n	800ccf4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ccea:	4b22      	ldr	r3, [pc, #136]	@ (800cd74 <ip4_output_if_src+0x158>)
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	69fb      	ldr	r3, [r7, #28]
 800ccf0:	60da      	str	r2, [r3, #12]
 800ccf2:	e003      	b.n	800ccfc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	729a      	strb	r2, [r3, #10]
 800cd02:	2200      	movs	r2, #0
 800cd04:	72da      	strb	r2, [r3, #11]
 800cd06:	e00f      	b.n	800cd28 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	895b      	ldrh	r3, [r3, #10]
 800cd0c:	2b13      	cmp	r3, #19
 800cd0e:	d802      	bhi.n	800cd16 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cd10:	f06f 0301 	mvn.w	r3, #1
 800cd14:	e020      	b.n	800cd58 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	691b      	ldr	r3, [r3, #16]
 800cd20:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800cd22:	f107 0314 	add.w	r3, r7, #20
 800cd26:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00c      	beq.n	800cd4a <ip4_output_if_src+0x12e>
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	891a      	ldrh	r2, [r3, #8]
 800cd34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d906      	bls.n	800cd4a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f000 fd53 	bl	800d7ec <ip4_frag>
 800cd46:	4603      	mov	r3, r0
 800cd48:	e006      	b.n	800cd58 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800cd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4c:	695b      	ldr	r3, [r3, #20]
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	68f9      	ldr	r1, [r7, #12]
 800cd52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd54:	4798      	blx	r3
 800cd56:	4603      	mov	r3, r0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3720      	adds	r7, #32
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	080112dc 	.word	0x080112dc
 800cd64:	08011310 	.word	0x08011310
 800cd68:	0801131c 	.word	0x0801131c
 800cd6c:	08011344 	.word	0x08011344
 800cd70:	24007cbe 	.word	0x24007cbe
 800cd74:	0801171c 	.word	0x0801171c

0800cd78 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd8c:	d002      	beq.n	800cd94 <ip4_addr_isbroadcast_u32+0x1c>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800cd94:	2301      	movs	r3, #1
 800cd96:	e02a      	b.n	800cdee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd9e:	f003 0302 	and.w	r3, r3, #2
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d101      	bne.n	800cdaa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	e021      	b.n	800cdee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	3304      	adds	r3, #4
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d101      	bne.n	800cdba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	e019      	b.n	800cdee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cdba:	68fa      	ldr	r2, [r7, #12]
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	405a      	eors	r2, r3
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	3308      	adds	r3, #8
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4013      	ands	r3, r2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10d      	bne.n	800cdec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	3308      	adds	r3, #8
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	43da      	mvns	r2, r3
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	3308      	adds	r3, #8
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d101      	bne.n	800cdec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cde8:	2301      	movs	r3, #1
 800cdea:	e000      	b.n	800cdee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800cdec:	2300      	movs	r3, #0
  }
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
	...

0800cdfc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ce06:	4b12      	ldr	r3, [pc, #72]	@ (800ce50 <ip_reass_tmr+0x54>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ce0c:	e018      	b.n	800ce40 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	7fdb      	ldrb	r3, [r3, #31]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00b      	beq.n	800ce2e <ip_reass_tmr+0x32>
      r->timer--;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	7fdb      	ldrb	r3, [r3, #31]
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	60fb      	str	r3, [r7, #12]
 800ce2c:	e008      	b.n	800ce40 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ce38:	68b9      	ldr	r1, [r7, #8]
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 f80a 	bl	800ce54 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d1e3      	bne.n	800ce0e <ip_reass_tmr+0x12>
    }
  }
}
 800ce46:	bf00      	nop
 800ce48:	bf00      	nop
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	24007cc0 	.word	0x24007cc0

0800ce54 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b088      	sub	sp, #32
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d105      	bne.n	800ce76 <ip_reass_free_complete_datagram+0x22>
 800ce6a:	4b45      	ldr	r3, [pc, #276]	@ (800cf80 <ip_reass_free_complete_datagram+0x12c>)
 800ce6c:	22ab      	movs	r2, #171	@ 0xab
 800ce6e:	4945      	ldr	r1, [pc, #276]	@ (800cf84 <ip_reass_free_complete_datagram+0x130>)
 800ce70:	4845      	ldr	r0, [pc, #276]	@ (800cf88 <ip_reass_free_complete_datagram+0x134>)
 800ce72:	f000 ffd7 	bl	800de24 <iprintf>
  if (prev != NULL) {
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00a      	beq.n	800ce92 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d005      	beq.n	800ce92 <ip_reass_free_complete_datagram+0x3e>
 800ce86:	4b3e      	ldr	r3, [pc, #248]	@ (800cf80 <ip_reass_free_complete_datagram+0x12c>)
 800ce88:	22ad      	movs	r2, #173	@ 0xad
 800ce8a:	4940      	ldr	r1, [pc, #256]	@ (800cf8c <ip_reass_free_complete_datagram+0x138>)
 800ce8c:	483e      	ldr	r0, [pc, #248]	@ (800cf88 <ip_reass_free_complete_datagram+0x134>)
 800ce8e:	f000 ffc9 	bl	800de24 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	889b      	ldrh	r3, [r3, #4]
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d12a      	bne.n	800cefa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	6858      	ldr	r0, [r3, #4]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	3308      	adds	r3, #8
 800ceba:	2214      	movs	r2, #20
 800cebc:	4619      	mov	r1, r3
 800cebe:	f001 f88c 	bl	800dfda <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800cec2:	2101      	movs	r1, #1
 800cec4:	69b8      	ldr	r0, [r7, #24]
 800cec6:	f7ff fc3d 	bl	800c744 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ceca:	69b8      	ldr	r0, [r7, #24]
 800cecc:	f7f8 fd9e 	bl	8005a0c <pbuf_clen>
 800ced0:	4603      	mov	r3, r0
 800ced2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ced4:	8bfa      	ldrh	r2, [r7, #30]
 800ced6:	8a7b      	ldrh	r3, [r7, #18]
 800ced8:	4413      	add	r3, r2
 800ceda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cede:	db05      	blt.n	800ceec <ip_reass_free_complete_datagram+0x98>
 800cee0:	4b27      	ldr	r3, [pc, #156]	@ (800cf80 <ip_reass_free_complete_datagram+0x12c>)
 800cee2:	22bc      	movs	r2, #188	@ 0xbc
 800cee4:	492a      	ldr	r1, [pc, #168]	@ (800cf90 <ip_reass_free_complete_datagram+0x13c>)
 800cee6:	4828      	ldr	r0, [pc, #160]	@ (800cf88 <ip_reass_free_complete_datagram+0x134>)
 800cee8:	f000 ff9c 	bl	800de24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ceec:	8bfa      	ldrh	r2, [r7, #30]
 800ceee:	8a7b      	ldrh	r3, [r7, #18]
 800cef0:	4413      	add	r3, r2
 800cef2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800cef4:	69b8      	ldr	r0, [r7, #24]
 800cef6:	f7f8 fd01 	bl	80058fc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800cf00:	e01f      	b.n	800cf42 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	617b      	str	r3, [r7, #20]
    pcur = p;
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f7f8 fd7a 	bl	8005a0c <pbuf_clen>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cf1c:	8bfa      	ldrh	r2, [r7, #30]
 800cf1e:	8a7b      	ldrh	r3, [r7, #18]
 800cf20:	4413      	add	r3, r2
 800cf22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf26:	db05      	blt.n	800cf34 <ip_reass_free_complete_datagram+0xe0>
 800cf28:	4b15      	ldr	r3, [pc, #84]	@ (800cf80 <ip_reass_free_complete_datagram+0x12c>)
 800cf2a:	22cc      	movs	r2, #204	@ 0xcc
 800cf2c:	4918      	ldr	r1, [pc, #96]	@ (800cf90 <ip_reass_free_complete_datagram+0x13c>)
 800cf2e:	4816      	ldr	r0, [pc, #88]	@ (800cf88 <ip_reass_free_complete_datagram+0x134>)
 800cf30:	f000 ff78 	bl	800de24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800cf34:	8bfa      	ldrh	r2, [r7, #30]
 800cf36:	8a7b      	ldrh	r3, [r7, #18]
 800cf38:	4413      	add	r3, r2
 800cf3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f7f8 fcdd 	bl	80058fc <pbuf_free>
  while (p != NULL) {
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d1dc      	bne.n	800cf02 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800cf48:	6839      	ldr	r1, [r7, #0]
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f8c2 	bl	800d0d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800cf50:	4b10      	ldr	r3, [pc, #64]	@ (800cf94 <ip_reass_free_complete_datagram+0x140>)
 800cf52:	881b      	ldrh	r3, [r3, #0]
 800cf54:	8bfa      	ldrh	r2, [r7, #30]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d905      	bls.n	800cf66 <ip_reass_free_complete_datagram+0x112>
 800cf5a:	4b09      	ldr	r3, [pc, #36]	@ (800cf80 <ip_reass_free_complete_datagram+0x12c>)
 800cf5c:	22d2      	movs	r2, #210	@ 0xd2
 800cf5e:	490e      	ldr	r1, [pc, #56]	@ (800cf98 <ip_reass_free_complete_datagram+0x144>)
 800cf60:	4809      	ldr	r0, [pc, #36]	@ (800cf88 <ip_reass_free_complete_datagram+0x134>)
 800cf62:	f000 ff5f 	bl	800de24 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800cf66:	4b0b      	ldr	r3, [pc, #44]	@ (800cf94 <ip_reass_free_complete_datagram+0x140>)
 800cf68:	881a      	ldrh	r2, [r3, #0]
 800cf6a:	8bfb      	ldrh	r3, [r7, #30]
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	4b08      	ldr	r3, [pc, #32]	@ (800cf94 <ip_reass_free_complete_datagram+0x140>)
 800cf72:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800cf74:	8bfb      	ldrh	r3, [r7, #30]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3720      	adds	r7, #32
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	08011374 	.word	0x08011374
 800cf84:	080113b0 	.word	0x080113b0
 800cf88:	080113bc 	.word	0x080113bc
 800cf8c:	080113e4 	.word	0x080113e4
 800cf90:	080113f8 	.word	0x080113f8
 800cf94:	24007cc4 	.word	0x24007cc4
 800cf98:	08011418 	.word	0x08011418

0800cf9c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b08a      	sub	sp, #40	@ 0x28
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800cfba:	4b28      	ldr	r3, [pc, #160]	@ (800d05c <ip_reass_remove_oldest_datagram+0xc0>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800cfc0:	e030      	b.n	800d024 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800cfc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc4:	695a      	ldr	r2, [r3, #20]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d10c      	bne.n	800cfe8 <ip_reass_remove_oldest_datagram+0x4c>
 800cfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd0:	699a      	ldr	r2, [r3, #24]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	691b      	ldr	r3, [r3, #16]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d106      	bne.n	800cfe8 <ip_reass_remove_oldest_datagram+0x4c>
 800cfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfdc:	899a      	ldrh	r2, [r3, #12]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	889b      	ldrh	r3, [r3, #4]
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d014      	beq.n	800d012 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	3301      	adds	r3, #1
 800cfec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800cfee:	6a3b      	ldr	r3, [r7, #32]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d104      	bne.n	800cffe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800cff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	61bb      	str	r3, [r7, #24]
 800cffc:	e009      	b.n	800d012 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800cffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d000:	7fda      	ldrb	r2, [r3, #31]
 800d002:	6a3b      	ldr	r3, [r7, #32]
 800d004:	7fdb      	ldrb	r3, [r3, #31]
 800d006:	429a      	cmp	r2, r3
 800d008:	d803      	bhi.n	800d012 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800d024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1cb      	bne.n	800cfc2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d008      	beq.n	800d042 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d030:	69b9      	ldr	r1, [r7, #24]
 800d032:	6a38      	ldr	r0, [r7, #32]
 800d034:	f7ff ff0e 	bl	800ce54 <ip_reass_free_complete_datagram>
 800d038:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d03a:	697a      	ldr	r2, [r7, #20]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	4413      	add	r3, r2
 800d040:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	429a      	cmp	r2, r3
 800d048:	da02      	bge.n	800d050 <ip_reass_remove_oldest_datagram+0xb4>
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	dcac      	bgt.n	800cfaa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d050:	697b      	ldr	r3, [r7, #20]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3728      	adds	r7, #40	@ 0x28
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	24007cc0 	.word	0x24007cc0

0800d060 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d06a:	2004      	movs	r0, #4
 800d06c:	f7f7 fd80 	bl	8004b70 <memp_malloc>
 800d070:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d110      	bne.n	800d09a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d078:	6839      	ldr	r1, [r7, #0]
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7ff ff8e 	bl	800cf9c <ip_reass_remove_oldest_datagram>
 800d080:	4602      	mov	r2, r0
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	4293      	cmp	r3, r2
 800d086:	dc03      	bgt.n	800d090 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d088:	2004      	movs	r0, #4
 800d08a:	f7f7 fd71 	bl	8004b70 <memp_malloc>
 800d08e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d101      	bne.n	800d09a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d096:	2300      	movs	r3, #0
 800d098:	e016      	b.n	800d0c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d09a:	2220      	movs	r2, #32
 800d09c:	2100      	movs	r1, #0
 800d09e:	68f8      	ldr	r0, [r7, #12]
 800d0a0:	f000 ff25 	bl	800deee <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	220f      	movs	r2, #15
 800d0a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d0aa:	4b09      	ldr	r3, [pc, #36]	@ (800d0d0 <ip_reass_enqueue_new_datagram+0x70>)
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d0b2:	4a07      	ldr	r2, [pc, #28]	@ (800d0d0 <ip_reass_enqueue_new_datagram+0x70>)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	3308      	adds	r3, #8
 800d0bc:	2214      	movs	r2, #20
 800d0be:	6879      	ldr	r1, [r7, #4]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f000 ff8a 	bl	800dfda <memcpy>
  return ipr;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	24007cc0 	.word	0x24007cc0

0800d0d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d0de:	4b10      	ldr	r3, [pc, #64]	@ (800d120 <ip_reass_dequeue_datagram+0x4c>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d104      	bne.n	800d0f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a0c      	ldr	r2, [pc, #48]	@ (800d120 <ip_reass_dequeue_datagram+0x4c>)
 800d0ee:	6013      	str	r3, [r2, #0]
 800d0f0:	e00d      	b.n	800d10e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d106      	bne.n	800d106 <ip_reass_dequeue_datagram+0x32>
 800d0f8:	4b0a      	ldr	r3, [pc, #40]	@ (800d124 <ip_reass_dequeue_datagram+0x50>)
 800d0fa:	f240 1245 	movw	r2, #325	@ 0x145
 800d0fe:	490a      	ldr	r1, [pc, #40]	@ (800d128 <ip_reass_dequeue_datagram+0x54>)
 800d100:	480a      	ldr	r0, [pc, #40]	@ (800d12c <ip_reass_dequeue_datagram+0x58>)
 800d102:	f000 fe8f 	bl	800de24 <iprintf>
    prev->next = ipr->next;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d10e:	6879      	ldr	r1, [r7, #4]
 800d110:	2004      	movs	r0, #4
 800d112:	f7f7 fd9d 	bl	8004c50 <memp_free>
}
 800d116:	bf00      	nop
 800d118:	3708      	adds	r7, #8
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	24007cc0 	.word	0x24007cc0
 800d124:	08011374 	.word	0x08011374
 800d128:	0801143c 	.word	0x0801143c
 800d12c:	080113bc 	.word	0x080113bc

0800d130 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b08c      	sub	sp, #48	@ 0x30
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d13c:	2300      	movs	r3, #0
 800d13e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d140:	2301      	movs	r3, #1
 800d142:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	885b      	ldrh	r3, [r3, #2]
 800d14e:	b29b      	uxth	r3, r3
 800d150:	4618      	mov	r0, r3
 800d152:	f7f6 ffdd 	bl	8004110 <lwip_htons>
 800d156:	4603      	mov	r3, r0
 800d158:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	f003 030f 	and.w	r3, r3, #15
 800d162:	b2db      	uxtb	r3, r3
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d168:	7e7b      	ldrb	r3, [r7, #25]
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	8b7a      	ldrh	r2, [r7, #26]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d202      	bcs.n	800d178 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d172:	f04f 33ff 	mov.w	r3, #4294967295
 800d176:	e135      	b.n	800d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d178:	7e7b      	ldrb	r3, [r7, #25]
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	8b7a      	ldrh	r2, [r7, #26]
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	88db      	ldrh	r3, [r3, #6]
 800d186:	b29b      	uxth	r3, r3
 800d188:	4618      	mov	r0, r3
 800d18a:	f7f6 ffc1 	bl	8004110 <lwip_htons>
 800d18e:	4603      	mov	r3, r0
 800d190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d194:	b29b      	uxth	r3, r3
 800d196:	00db      	lsls	r3, r3, #3
 800d198:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800d1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	701a      	strb	r2, [r3, #0]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	705a      	strb	r2, [r3, #1]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	709a      	strb	r2, [r3, #2]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b4:	8afa      	ldrh	r2, [r7, #22]
 800d1b6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d1b8:	8afa      	ldrh	r2, [r7, #22]
 800d1ba:	8b7b      	ldrh	r3, [r7, #26]
 800d1bc:	4413      	add	r3, r2
 800d1be:	b29a      	uxth	r2, r3
 800d1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c6:	88db      	ldrh	r3, [r3, #6]
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	8afa      	ldrh	r2, [r7, #22]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d902      	bls.n	800d1d6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d4:	e106      	b.n	800d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1dc:	e068      	b.n	800d2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e6:	889b      	ldrh	r3, [r3, #4]
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	889b      	ldrh	r3, [r3, #4]
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d235      	bcs.n	800d260 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d020      	beq.n	800d242 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d202:	889b      	ldrh	r3, [r3, #4]
 800d204:	b29a      	uxth	r2, r3
 800d206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d208:	88db      	ldrh	r3, [r3, #6]
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d307      	bcc.n	800d220 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d212:	88db      	ldrh	r3, [r3, #6]
 800d214:	b29a      	uxth	r2, r3
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	889b      	ldrh	r3, [r3, #4]
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d902      	bls.n	800d226 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d220:	f04f 33ff 	mov.w	r3, #4294967295
 800d224:	e0de      	b.n	800d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d22e:	88db      	ldrh	r3, [r3, #6]
 800d230:	b29a      	uxth	r2, r3
 800d232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d234:	889b      	ldrh	r3, [r3, #4]
 800d236:	b29b      	uxth	r3, r3
 800d238:	429a      	cmp	r2, r3
 800d23a:	d03d      	beq.n	800d2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d240:	e03a      	b.n	800d2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d244:	88db      	ldrh	r3, [r3, #6]
 800d246:	b29a      	uxth	r2, r3
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	889b      	ldrh	r3, [r3, #4]
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	429a      	cmp	r2, r3
 800d250:	d902      	bls.n	800d258 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d252:	f04f 33ff 	mov.w	r3, #4294967295
 800d256:	e0c5      	b.n	800d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	605a      	str	r2, [r3, #4]
      break;
 800d25e:	e02b      	b.n	800d2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d262:	889b      	ldrh	r3, [r3, #4]
 800d264:	b29a      	uxth	r2, r3
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	889b      	ldrh	r3, [r3, #4]
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d102      	bne.n	800d276 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d270:	f04f 33ff 	mov.w	r3, #4294967295
 800d274:	e0b6      	b.n	800d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d278:	889b      	ldrh	r3, [r3, #4]
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	88db      	ldrh	r3, [r3, #6]
 800d280:	b29b      	uxth	r3, r3
 800d282:	429a      	cmp	r2, r3
 800d284:	d202      	bcs.n	800d28c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d286:	f04f 33ff 	mov.w	r3, #4294967295
 800d28a:	e0ab      	b.n	800d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d009      	beq.n	800d2a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d294:	88db      	ldrh	r3, [r3, #6]
 800d296:	b29a      	uxth	r2, r3
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	889b      	ldrh	r3, [r3, #4]
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d001      	beq.n	800d2a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d193      	bne.n	800d1de <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d2b6:	e000      	b.n	800d2ba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d2b8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d12d      	bne.n	800d31c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d01c      	beq.n	800d300 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c8:	88db      	ldrh	r3, [r3, #6]
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ce:	889b      	ldrh	r3, [r3, #4]
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d906      	bls.n	800d2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d2d6:	4b45      	ldr	r3, [pc, #276]	@ (800d3ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d2d8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800d2dc:	4944      	ldr	r1, [pc, #272]	@ (800d3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d2de:	4845      	ldr	r0, [pc, #276]	@ (800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d2e0:	f000 fda0 	bl	800de24 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ec:	88db      	ldrh	r3, [r3, #6]
 800d2ee:	b29a      	uxth	r2, r3
 800d2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f2:	889b      	ldrh	r3, [r3, #4]
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d010      	beq.n	800d31c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	623b      	str	r3, [r7, #32]
 800d2fe:	e00d      	b.n	800d31c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d006      	beq.n	800d316 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d308:	4b38      	ldr	r3, [pc, #224]	@ (800d3ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d30a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800d30e:	493a      	ldr	r1, [pc, #232]	@ (800d3f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d310:	4838      	ldr	r0, [pc, #224]	@ (800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d312:	f000 fd87 	bl	800de24 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	68ba      	ldr	r2, [r7, #8]
 800d31a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d105      	bne.n	800d32e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	7f9b      	ldrb	r3, [r3, #30]
 800d326:	f003 0301 	and.w	r3, r3, #1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d059      	beq.n	800d3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d32e:	6a3b      	ldr	r3, [r7, #32]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d04f      	beq.n	800d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d006      	beq.n	800d34a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	889b      	ldrh	r3, [r3, #4]
 800d344:	b29b      	uxth	r3, r3
 800d346:	2b00      	cmp	r3, #0
 800d348:	d002      	beq.n	800d350 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	623b      	str	r3, [r7, #32]
 800d34e:	e041      	b.n	800d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d352:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800d354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d35a:	e012      	b.n	800d382 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800d362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d364:	88db      	ldrh	r3, [r3, #6]
 800d366:	b29a      	uxth	r2, r3
 800d368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d36a:	889b      	ldrh	r3, [r3, #4]
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	429a      	cmp	r2, r3
 800d370:	d002      	beq.n	800d378 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d372:	2300      	movs	r3, #0
 800d374:	623b      	str	r3, [r7, #32]
            break;
 800d376:	e007      	b.n	800d388 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d37a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800d37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d384:	2b00      	cmp	r3, #0
 800d386:	d1e9      	bne.n	800d35c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d388:	6a3b      	ldr	r3, [r7, #32]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d022      	beq.n	800d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d106      	bne.n	800d3a4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d396:	4b15      	ldr	r3, [pc, #84]	@ (800d3ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d398:	f240 12df 	movw	r2, #479	@ 0x1df
 800d39c:	4917      	ldr	r1, [pc, #92]	@ (800d3fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d39e:	4815      	ldr	r0, [pc, #84]	@ (800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d3a0:	f000 fd40 	bl	800de24 <iprintf>
          LWIP_ASSERT("sanity check",
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d106      	bne.n	800d3be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d3b0:	4b0e      	ldr	r3, [pc, #56]	@ (800d3ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d3b2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d3b6:	4911      	ldr	r1, [pc, #68]	@ (800d3fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d3b8:	480e      	ldr	r0, [pc, #56]	@ (800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d3ba:	f000 fd33 	bl	800de24 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d006      	beq.n	800d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d3c6:	4b09      	ldr	r3, [pc, #36]	@ (800d3ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d3c8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800d3cc:	490c      	ldr	r1, [pc, #48]	@ (800d400 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d3ce:	4809      	ldr	r0, [pc, #36]	@ (800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d3d0:	f000 fd28 	bl	800de24 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	bf14      	ite	ne
 800d3da:	2301      	movne	r3, #1
 800d3dc:	2300      	moveq	r3, #0
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	e000      	b.n	800d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3730      	adds	r7, #48	@ 0x30
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	08011374 	.word	0x08011374
 800d3f0:	08011458 	.word	0x08011458
 800d3f4:	080113bc 	.word	0x080113bc
 800d3f8:	08011478 	.word	0x08011478
 800d3fc:	080114b0 	.word	0x080114b0
 800d400:	080114c0 	.word	0x080114c0

0800d404 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b08e      	sub	sp, #56	@ 0x38
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	f003 030f 	and.w	r3, r3, #15
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	2b14      	cmp	r3, #20
 800d422:	f040 8171 	bne.w	800d708 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d428:	88db      	ldrh	r3, [r3, #6]
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7f6 fe6f 	bl	8004110 <lwip_htons>
 800d432:	4603      	mov	r3, r0
 800d434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d438:	b29b      	uxth	r3, r3
 800d43a:	00db      	lsls	r3, r3, #3
 800d43c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d440:	885b      	ldrh	r3, [r3, #2]
 800d442:	b29b      	uxth	r3, r3
 800d444:	4618      	mov	r0, r3
 800d446:	f7f6 fe63 	bl	8004110 <lwip_htons>
 800d44a:	4603      	mov	r3, r0
 800d44c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	f003 030f 	and.w	r3, r3, #15
 800d456:	b2db      	uxtb	r3, r3
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800d45e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d462:	b29b      	uxth	r3, r3
 800d464:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d466:	429a      	cmp	r2, r3
 800d468:	f0c0 8150 	bcc.w	800d70c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d46c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d470:	b29b      	uxth	r3, r3
 800d472:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d474:	1ad3      	subs	r3, r2, r3
 800d476:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f7f8 fac7 	bl	8005a0c <pbuf_clen>
 800d47e:	4603      	mov	r3, r0
 800d480:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d482:	4b8c      	ldr	r3, [pc, #560]	@ (800d6b4 <ip4_reass+0x2b0>)
 800d484:	881b      	ldrh	r3, [r3, #0]
 800d486:	461a      	mov	r2, r3
 800d488:	8c3b      	ldrh	r3, [r7, #32]
 800d48a:	4413      	add	r3, r2
 800d48c:	2b0a      	cmp	r3, #10
 800d48e:	dd10      	ble.n	800d4b2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d490:	8c3b      	ldrh	r3, [r7, #32]
 800d492:	4619      	mov	r1, r3
 800d494:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d496:	f7ff fd81 	bl	800cf9c <ip_reass_remove_oldest_datagram>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f000 8137 	beq.w	800d710 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d4a2:	4b84      	ldr	r3, [pc, #528]	@ (800d6b4 <ip4_reass+0x2b0>)
 800d4a4:	881b      	ldrh	r3, [r3, #0]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	8c3b      	ldrh	r3, [r7, #32]
 800d4aa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d4ac:	2b0a      	cmp	r3, #10
 800d4ae:	f300 812f 	bgt.w	800d710 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d4b2:	4b81      	ldr	r3, [pc, #516]	@ (800d6b8 <ip4_reass+0x2b4>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4b8:	e015      	b.n	800d4e6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4bc:	695a      	ldr	r2, [r3, #20]
 800d4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d10c      	bne.n	800d4e0 <ip4_reass+0xdc>
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c8:	699a      	ldr	r2, [r3, #24]
 800d4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d106      	bne.n	800d4e0 <ip4_reass+0xdc>
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d4:	899a      	ldrh	r2, [r3, #12]
 800d4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d8:	889b      	ldrh	r3, [r3, #4]
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d006      	beq.n	800d4ee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1e6      	bne.n	800d4ba <ip4_reass+0xb6>
 800d4ec:	e000      	b.n	800d4f0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d4ee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d109      	bne.n	800d50a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d4f6:	8c3b      	ldrh	r3, [r7, #32]
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4fc:	f7ff fdb0 	bl	800d060 <ip_reass_enqueue_new_datagram>
 800d500:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d504:	2b00      	cmp	r3, #0
 800d506:	d11c      	bne.n	800d542 <ip4_reass+0x13e>
      goto nullreturn;
 800d508:	e105      	b.n	800d716 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50c:	88db      	ldrh	r3, [r3, #6]
 800d50e:	b29b      	uxth	r3, r3
 800d510:	4618      	mov	r0, r3
 800d512:	f7f6 fdfd 	bl	8004110 <lwip_htons>
 800d516:	4603      	mov	r3, r0
 800d518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d110      	bne.n	800d542 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d522:	89db      	ldrh	r3, [r3, #14]
 800d524:	4618      	mov	r0, r3
 800d526:	f7f6 fdf3 	bl	8004110 <lwip_htons>
 800d52a:	4603      	mov	r3, r0
 800d52c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d530:	2b00      	cmp	r3, #0
 800d532:	d006      	beq.n	800d542 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d536:	3308      	adds	r3, #8
 800d538:	2214      	movs	r2, #20
 800d53a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d53c:	4618      	mov	r0, r3
 800d53e:	f000 fd4c 	bl	800dfda <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d544:	88db      	ldrh	r3, [r3, #6]
 800d546:	b29b      	uxth	r3, r3
 800d548:	f003 0320 	and.w	r3, r3, #32
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	bf0c      	ite	eq
 800d550:	2301      	moveq	r3, #1
 800d552:	2300      	movne	r3, #0
 800d554:	b2db      	uxtb	r3, r3
 800d556:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00e      	beq.n	800d57c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d55e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d560:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d562:	4413      	add	r3, r2
 800d564:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d566:	8b7a      	ldrh	r2, [r7, #26]
 800d568:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d56a:	429a      	cmp	r2, r3
 800d56c:	f0c0 80a0 	bcc.w	800d6b0 <ip4_reass+0x2ac>
 800d570:	8b7b      	ldrh	r3, [r7, #26]
 800d572:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d576:	4293      	cmp	r3, r2
 800d578:	f200 809a 	bhi.w	800d6b0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d57c:	69fa      	ldr	r2, [r7, #28]
 800d57e:	6879      	ldr	r1, [r7, #4]
 800d580:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d582:	f7ff fdd5 	bl	800d130 <ip_reass_chain_frag_into_datagram_and_validate>
 800d586:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58e:	f000 809b 	beq.w	800d6c8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d592:	4b48      	ldr	r3, [pc, #288]	@ (800d6b4 <ip4_reass+0x2b0>)
 800d594:	881a      	ldrh	r2, [r3, #0]
 800d596:	8c3b      	ldrh	r3, [r7, #32]
 800d598:	4413      	add	r3, r2
 800d59a:	b29a      	uxth	r2, r3
 800d59c:	4b45      	ldr	r3, [pc, #276]	@ (800d6b4 <ip4_reass+0x2b0>)
 800d59e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00d      	beq.n	800d5c2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d5a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d5a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5aa:	4413      	add	r3, r2
 800d5ac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b0:	8a7a      	ldrh	r2, [r7, #18]
 800d5b2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b6:	7f9b      	ldrb	r3, [r3, #30]
 800d5b8:	f043 0301 	orr.w	r3, r3, #1
 800d5bc:	b2da      	uxtb	r2, r3
 800d5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d171      	bne.n	800d6ac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ca:	8b9b      	ldrh	r3, [r3, #28]
 800d5cc:	3314      	adds	r3, #20
 800d5ce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e4:	3308      	adds	r3, #8
 800d5e6:	2214      	movs	r2, #20
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5ec:	f000 fcf5 	bl	800dfda <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d5f0:	8a3b      	ldrh	r3, [r7, #16]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7f6 fd8c 	bl	8004110 <lwip_htons>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5fe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d602:	2200      	movs	r2, #0
 800d604:	719a      	strb	r2, [r3, #6]
 800d606:	2200      	movs	r2, #0
 800d608:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d60c:	2200      	movs	r2, #0
 800d60e:	729a      	strb	r2, [r3, #10]
 800d610:	2200      	movs	r2, #0
 800d612:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d61a:	e00d      	b.n	800d638 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d622:	2114      	movs	r1, #20
 800d624:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d626:	f7f8 f8e3 	bl	80057f0 <pbuf_remove_header>
      pbuf_cat(p, r);
 800d62a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f7f8 fa27 	bl	8005a80 <pbuf_cat>
      r = iprh->next_pbuf;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800d638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1ee      	bne.n	800d61c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d63e:	4b1e      	ldr	r3, [pc, #120]	@ (800d6b8 <ip4_reass+0x2b4>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d644:	429a      	cmp	r2, r3
 800d646:	d102      	bne.n	800d64e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d648:	2300      	movs	r3, #0
 800d64a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d64c:	e010      	b.n	800d670 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d64e:	4b1a      	ldr	r3, [pc, #104]	@ (800d6b8 <ip4_reass+0x2b4>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d654:	e007      	b.n	800d666 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d006      	beq.n	800d66e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d1f4      	bne.n	800d656 <ip4_reass+0x252>
 800d66c:	e000      	b.n	800d670 <ip4_reass+0x26c>
          break;
 800d66e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d670:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d672:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d674:	f7ff fd2e 	bl	800d0d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7f8 f9c7 	bl	8005a0c <pbuf_clen>
 800d67e:	4603      	mov	r3, r0
 800d680:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d682:	4b0c      	ldr	r3, [pc, #48]	@ (800d6b4 <ip4_reass+0x2b0>)
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	8c3a      	ldrh	r2, [r7, #32]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d906      	bls.n	800d69a <ip4_reass+0x296>
 800d68c:	4b0b      	ldr	r3, [pc, #44]	@ (800d6bc <ip4_reass+0x2b8>)
 800d68e:	f240 229b 	movw	r2, #667	@ 0x29b
 800d692:	490b      	ldr	r1, [pc, #44]	@ (800d6c0 <ip4_reass+0x2bc>)
 800d694:	480b      	ldr	r0, [pc, #44]	@ (800d6c4 <ip4_reass+0x2c0>)
 800d696:	f000 fbc5 	bl	800de24 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d69a:	4b06      	ldr	r3, [pc, #24]	@ (800d6b4 <ip4_reass+0x2b0>)
 800d69c:	881a      	ldrh	r2, [r3, #0]
 800d69e:	8c3b      	ldrh	r3, [r7, #32]
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	4b03      	ldr	r3, [pc, #12]	@ (800d6b4 <ip4_reass+0x2b0>)
 800d6a6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	e038      	b.n	800d71e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	e036      	b.n	800d71e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800d6b0:	bf00      	nop
 800d6b2:	e00a      	b.n	800d6ca <ip4_reass+0x2c6>
 800d6b4:	24007cc4 	.word	0x24007cc4
 800d6b8:	24007cc0 	.word	0x24007cc0
 800d6bc:	08011374 	.word	0x08011374
 800d6c0:	080114e4 	.word	0x080114e4
 800d6c4:	080113bc 	.word	0x080113bc
    goto nullreturn_ipr;
 800d6c8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d106      	bne.n	800d6de <ip4_reass+0x2da>
 800d6d0:	4b15      	ldr	r3, [pc, #84]	@ (800d728 <ip4_reass+0x324>)
 800d6d2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800d6d6:	4915      	ldr	r1, [pc, #84]	@ (800d72c <ip4_reass+0x328>)
 800d6d8:	4815      	ldr	r0, [pc, #84]	@ (800d730 <ip4_reass+0x32c>)
 800d6da:	f000 fba3 	bl	800de24 <iprintf>
  if (ipr->p == NULL) {
 800d6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d116      	bne.n	800d714 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d6e6:	4b13      	ldr	r3, [pc, #76]	@ (800d734 <ip4_reass+0x330>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d006      	beq.n	800d6fe <ip4_reass+0x2fa>
 800d6f0:	4b0d      	ldr	r3, [pc, #52]	@ (800d728 <ip4_reass+0x324>)
 800d6f2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d6f6:	4910      	ldr	r1, [pc, #64]	@ (800d738 <ip4_reass+0x334>)
 800d6f8:	480d      	ldr	r0, [pc, #52]	@ (800d730 <ip4_reass+0x32c>)
 800d6fa:	f000 fb93 	bl	800de24 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d6fe:	2100      	movs	r1, #0
 800d700:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d702:	f7ff fce7 	bl	800d0d4 <ip_reass_dequeue_datagram>
 800d706:	e006      	b.n	800d716 <ip4_reass+0x312>
    goto nullreturn;
 800d708:	bf00      	nop
 800d70a:	e004      	b.n	800d716 <ip4_reass+0x312>
    goto nullreturn;
 800d70c:	bf00      	nop
 800d70e:	e002      	b.n	800d716 <ip4_reass+0x312>
      goto nullreturn;
 800d710:	bf00      	nop
 800d712:	e000      	b.n	800d716 <ip4_reass+0x312>
  }

nullreturn:
 800d714:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7f8 f8f0 	bl	80058fc <pbuf_free>
  return NULL;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3738      	adds	r7, #56	@ 0x38
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	08011374 	.word	0x08011374
 800d72c:	08011500 	.word	0x08011500
 800d730:	080113bc 	.word	0x080113bc
 800d734:	24007cc0 	.word	0x24007cc0
 800d738:	0801150c 	.word	0x0801150c

0800d73c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d740:	2005      	movs	r0, #5
 800d742:	f7f7 fa15 	bl	8004b70 <memp_malloc>
 800d746:	4603      	mov	r3, r0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d106      	bne.n	800d768 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d75a:	4b07      	ldr	r3, [pc, #28]	@ (800d778 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d75c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800d760:	4906      	ldr	r1, [pc, #24]	@ (800d77c <ip_frag_free_pbuf_custom_ref+0x30>)
 800d762:	4807      	ldr	r0, [pc, #28]	@ (800d780 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d764:	f000 fb5e 	bl	800de24 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d768:	6879      	ldr	r1, [r7, #4]
 800d76a:	2005      	movs	r0, #5
 800d76c:	f7f7 fa70 	bl	8004c50 <memp_free>
}
 800d770:	bf00      	nop
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	08011374 	.word	0x08011374
 800d77c:	0801152c 	.word	0x0801152c
 800d780:	080113bc 	.word	0x080113bc

0800d784 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d106      	bne.n	800d7a4 <ipfrag_free_pbuf_custom+0x20>
 800d796:	4b11      	ldr	r3, [pc, #68]	@ (800d7dc <ipfrag_free_pbuf_custom+0x58>)
 800d798:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800d79c:	4910      	ldr	r1, [pc, #64]	@ (800d7e0 <ipfrag_free_pbuf_custom+0x5c>)
 800d79e:	4811      	ldr	r0, [pc, #68]	@ (800d7e4 <ipfrag_free_pbuf_custom+0x60>)
 800d7a0:	f000 fb40 	bl	800de24 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800d7a4:	68fa      	ldr	r2, [r7, #12]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d006      	beq.n	800d7ba <ipfrag_free_pbuf_custom+0x36>
 800d7ac:	4b0b      	ldr	r3, [pc, #44]	@ (800d7dc <ipfrag_free_pbuf_custom+0x58>)
 800d7ae:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800d7b2:	490d      	ldr	r1, [pc, #52]	@ (800d7e8 <ipfrag_free_pbuf_custom+0x64>)
 800d7b4:	480b      	ldr	r0, [pc, #44]	@ (800d7e4 <ipfrag_free_pbuf_custom+0x60>)
 800d7b6:	f000 fb35 	bl	800de24 <iprintf>
  if (pcr->original != NULL) {
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d004      	beq.n	800d7cc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	695b      	ldr	r3, [r3, #20]
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7f8 f898 	bl	80058fc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f7ff ffbd 	bl	800d74c <ip_frag_free_pbuf_custom_ref>
}
 800d7d2:	bf00      	nop
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	08011374 	.word	0x08011374
 800d7e0:	08011538 	.word	0x08011538
 800d7e4:	080113bc 	.word	0x080113bc
 800d7e8:	08011544 	.word	0x08011544

0800d7ec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b094      	sub	sp, #80	@ 0x50
 800d7f0:	af02      	add	r7, sp, #8
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d802:	3b14      	subs	r3, #20
 800d804:	2b00      	cmp	r3, #0
 800d806:	da00      	bge.n	800d80a <ip4_frag+0x1e>
 800d808:	3307      	adds	r3, #7
 800d80a:	10db      	asrs	r3, r3, #3
 800d80c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d80e:	2314      	movs	r3, #20
 800d810:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800d818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d81a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	f003 030f 	and.w	r3, r3, #15
 800d824:	b2db      	uxtb	r3, r3
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	2b14      	cmp	r3, #20
 800d82c:	d002      	beq.n	800d834 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800d82e:	f06f 0305 	mvn.w	r3, #5
 800d832:	e110      	b.n	800da56 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	895b      	ldrh	r3, [r3, #10]
 800d838:	2b13      	cmp	r3, #19
 800d83a:	d809      	bhi.n	800d850 <ip4_frag+0x64>
 800d83c:	4b88      	ldr	r3, [pc, #544]	@ (800da60 <ip4_frag+0x274>)
 800d83e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800d842:	4988      	ldr	r1, [pc, #544]	@ (800da64 <ip4_frag+0x278>)
 800d844:	4888      	ldr	r0, [pc, #544]	@ (800da68 <ip4_frag+0x27c>)
 800d846:	f000 faed 	bl	800de24 <iprintf>
 800d84a:	f06f 0305 	mvn.w	r3, #5
 800d84e:	e102      	b.n	800da56 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d852:	88db      	ldrh	r3, [r3, #6]
 800d854:	b29b      	uxth	r3, r3
 800d856:	4618      	mov	r0, r3
 800d858:	f7f6 fc5a 	bl	8004110 <lwip_htons>
 800d85c:	4603      	mov	r3, r0
 800d85e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800d860:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d862:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d866:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800d86a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d86c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d870:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	891b      	ldrh	r3, [r3, #8]
 800d876:	3b14      	subs	r3, #20
 800d878:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800d87c:	e0e1      	b.n	800da42 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d87e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d880:	00db      	lsls	r3, r3, #3
 800d882:	b29b      	uxth	r3, r3
 800d884:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d888:	4293      	cmp	r3, r2
 800d88a:	bf28      	it	cs
 800d88c:	4613      	movcs	r3, r2
 800d88e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d890:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d894:	2114      	movs	r1, #20
 800d896:	200e      	movs	r0, #14
 800d898:	f7f7 fd4c 	bl	8005334 <pbuf_alloc>
 800d89c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800d89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f000 80d5 	beq.w	800da50 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a8:	895b      	ldrh	r3, [r3, #10]
 800d8aa:	2b13      	cmp	r3, #19
 800d8ac:	d806      	bhi.n	800d8bc <ip4_frag+0xd0>
 800d8ae:	4b6c      	ldr	r3, [pc, #432]	@ (800da60 <ip4_frag+0x274>)
 800d8b0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800d8b4:	496d      	ldr	r1, [pc, #436]	@ (800da6c <ip4_frag+0x280>)
 800d8b6:	486c      	ldr	r0, [pc, #432]	@ (800da68 <ip4_frag+0x27c>)
 800d8b8:	f000 fab4 	bl	800de24 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	2214      	movs	r2, #20
 800d8c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f000 fb88 	bl	800dfda <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800d8d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d8d2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800d8d6:	e064      	b.n	800d9a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	895a      	ldrh	r2, [r3, #10]
 800d8dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d8de:	1ad3      	subs	r3, r2, r3
 800d8e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	895b      	ldrh	r3, [r3, #10]
 800d8e6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d906      	bls.n	800d8fa <ip4_frag+0x10e>
 800d8ec:	4b5c      	ldr	r3, [pc, #368]	@ (800da60 <ip4_frag+0x274>)
 800d8ee:	f240 322d 	movw	r2, #813	@ 0x32d
 800d8f2:	495f      	ldr	r1, [pc, #380]	@ (800da70 <ip4_frag+0x284>)
 800d8f4:	485c      	ldr	r0, [pc, #368]	@ (800da68 <ip4_frag+0x27c>)
 800d8f6:	f000 fa95 	bl	800de24 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d8fa:	8bfa      	ldrh	r2, [r7, #30]
 800d8fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d900:	4293      	cmp	r3, r2
 800d902:	bf28      	it	cs
 800d904:	4613      	movcs	r3, r2
 800d906:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d90a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d105      	bne.n	800d91e <ip4_frag+0x132>
        poff = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	60fb      	str	r3, [r7, #12]
        continue;
 800d91c:	e041      	b.n	800d9a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d91e:	f7ff ff0d 	bl	800d73c <ip_frag_alloc_pbuf_custom_ref>
 800d922:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d103      	bne.n	800d932 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800d92a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d92c:	f7f7 ffe6 	bl	80058fc <pbuf_free>
        goto memerr;
 800d930:	e08f      	b.n	800da52 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d932:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d938:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d93a:	4413      	add	r3, r2
 800d93c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800d940:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d944:	9201      	str	r2, [sp, #4]
 800d946:	9300      	str	r3, [sp, #0]
 800d948:	4603      	mov	r3, r0
 800d94a:	2241      	movs	r2, #65	@ 0x41
 800d94c:	2000      	movs	r0, #0
 800d94e:	f7f7 fe1b 	bl	8005588 <pbuf_alloced_custom>
 800d952:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d106      	bne.n	800d968 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d95a:	69b8      	ldr	r0, [r7, #24]
 800d95c:	f7ff fef6 	bl	800d74c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d960:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d962:	f7f7 ffcb 	bl	80058fc <pbuf_free>
        goto memerr;
 800d966:	e074      	b.n	800da52 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f7f8 f867 	bl	8005a3c <pbuf_ref>
      pcr->original = p;
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	68fa      	ldr	r2, [r7, #12]
 800d972:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d974:	69bb      	ldr	r3, [r7, #24]
 800d976:	4a3f      	ldr	r2, [pc, #252]	@ (800da74 <ip4_frag+0x288>)
 800d978:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d97a:	6979      	ldr	r1, [r7, #20]
 800d97c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d97e:	f7f8 f87f 	bl	8005a80 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d982:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800d986:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d98a:	1ad3      	subs	r3, r2, r3
 800d98c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800d990:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d994:	2b00      	cmp	r3, #0
 800d996:	d004      	beq.n	800d9a2 <ip4_frag+0x1b6>
        poff = 0;
 800d998:	2300      	movs	r3, #0
 800d99a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d9a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d196      	bne.n	800d8d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800d9aa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d9ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d9b0:	4413      	add	r3, r2
 800d9b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d9b8:	f1a3 0213 	sub.w	r2, r3, #19
 800d9bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	bfcc      	ite	gt
 800d9c4:	2301      	movgt	r3, #1
 800d9c6:	2300      	movle	r3, #0
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d9cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d9d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800d9d6:	6a3b      	ldr	r3, [r7, #32]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <ip4_frag+0x1f6>
 800d9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d003      	beq.n	800d9ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d9e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d9e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d9e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d9ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7f6 fb8f 	bl	8004110 <lwip_htons>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d9fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d9fc:	3314      	adds	r3, #20
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	4618      	mov	r0, r3
 800da02:	f7f6 fb85 	bl	8004110 <lwip_htons>
 800da06:	4603      	mov	r3, r0
 800da08:	461a      	mov	r2, r3
 800da0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da0c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800da0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da10:	2200      	movs	r2, #0
 800da12:	729a      	strb	r2, [r3, #10]
 800da14:	2200      	movs	r2, #0
 800da16:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	695b      	ldr	r3, [r3, #20]
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da20:	68b8      	ldr	r0, [r7, #8]
 800da22:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800da24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800da26:	f7f7 ff69 	bl	80058fc <pbuf_free>
    left = (u16_t)(left - fragsize);
 800da2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800da2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800da36:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800da3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800da3c:	4413      	add	r3, r2
 800da3e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800da42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800da46:	2b00      	cmp	r3, #0
 800da48:	f47f af19 	bne.w	800d87e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800da4c:	2300      	movs	r3, #0
 800da4e:	e002      	b.n	800da56 <ip4_frag+0x26a>
      goto memerr;
 800da50:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800da52:	f04f 33ff 	mov.w	r3, #4294967295
}
 800da56:	4618      	mov	r0, r3
 800da58:	3748      	adds	r7, #72	@ 0x48
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	08011374 	.word	0x08011374
 800da64:	08011550 	.word	0x08011550
 800da68:	080113bc 	.word	0x080113bc
 800da6c:	0801156c 	.word	0x0801156c
 800da70:	0801158c 	.word	0x0801158c
 800da74:	0800d785 	.word	0x0800d785

0800da78 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b086      	sub	sp, #24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800da82:	230e      	movs	r3, #14
 800da84:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	895b      	ldrh	r3, [r3, #10]
 800da8a:	2b0e      	cmp	r3, #14
 800da8c:	d96e      	bls.n	800db6c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	7bdb      	ldrb	r3, [r3, #15]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d106      	bne.n	800daa4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da9c:	3301      	adds	r3, #1
 800da9e:	b2da      	uxtb	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	7b1a      	ldrb	r2, [r3, #12]
 800daae:	7b5b      	ldrb	r3, [r3, #13]
 800dab0:	021b      	lsls	r3, r3, #8
 800dab2:	4313      	orrs	r3, r2
 800dab4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	f003 0301 	and.w	r3, r3, #1
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d023      	beq.n	800db0a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d10f      	bne.n	800daea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	785b      	ldrb	r3, [r3, #1]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d11b      	bne.n	800db0a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dad6:	2b5e      	cmp	r3, #94	@ 0x5e
 800dad8:	d117      	bne.n	800db0a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	7b5b      	ldrb	r3, [r3, #13]
 800dade:	f043 0310 	orr.w	r3, r3, #16
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	735a      	strb	r2, [r3, #13]
 800dae8:	e00f      	b.n	800db0a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	2206      	movs	r2, #6
 800daee:	4928      	ldr	r1, [pc, #160]	@ (800db90 <ethernet_input+0x118>)
 800daf0:	4618      	mov	r0, r3
 800daf2:	f000 f9ec 	bl	800dece <memcmp>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d106      	bne.n	800db0a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	7b5b      	ldrb	r3, [r3, #13]
 800db00:	f043 0308 	orr.w	r3, r3, #8
 800db04:	b2da      	uxtb	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800db0a:	89fb      	ldrh	r3, [r7, #14]
 800db0c:	2b08      	cmp	r3, #8
 800db0e:	d003      	beq.n	800db18 <ethernet_input+0xa0>
 800db10:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800db14:	d014      	beq.n	800db40 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800db16:	e032      	b.n	800db7e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db1e:	f003 0308 	and.w	r3, r3, #8
 800db22:	2b00      	cmp	r3, #0
 800db24:	d024      	beq.n	800db70 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800db26:	8afb      	ldrh	r3, [r7, #22]
 800db28:	4619      	mov	r1, r3
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f7f7 fe60 	bl	80057f0 <pbuf_remove_header>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d11e      	bne.n	800db74 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800db36:	6839      	ldr	r1, [r7, #0]
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f7fe ff21 	bl	800c980 <ip4_input>
      break;
 800db3e:	e013      	b.n	800db68 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db46:	f003 0308 	and.w	r3, r3, #8
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d014      	beq.n	800db78 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800db4e:	8afb      	ldrh	r3, [r7, #22]
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7f7 fe4c 	bl	80057f0 <pbuf_remove_header>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10e      	bne.n	800db7c <ethernet_input+0x104>
        etharp_input(p, netif);
 800db5e:	6839      	ldr	r1, [r7, #0]
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7fe f89b 	bl	800bc9c <etharp_input>
      break;
 800db66:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800db68:	2300      	movs	r3, #0
 800db6a:	e00c      	b.n	800db86 <ethernet_input+0x10e>
    goto free_and_return;
 800db6c:	bf00      	nop
 800db6e:	e006      	b.n	800db7e <ethernet_input+0x106>
        goto free_and_return;
 800db70:	bf00      	nop
 800db72:	e004      	b.n	800db7e <ethernet_input+0x106>
        goto free_and_return;
 800db74:	bf00      	nop
 800db76:	e002      	b.n	800db7e <ethernet_input+0x106>
        goto free_and_return;
 800db78:	bf00      	nop
 800db7a:	e000      	b.n	800db7e <ethernet_input+0x106>
        goto free_and_return;
 800db7c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7f7 febc 	bl	80058fc <pbuf_free>
  return ERR_OK;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3718      	adds	r7, #24
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	08011720 	.word	0x08011720

0800db94 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800db94:	b580      	push	{r7, lr}
 800db96:	b086      	sub	sp, #24
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
 800dba0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800dba2:	8c3b      	ldrh	r3, [r7, #32]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7f6 fab3 	bl	8004110 <lwip_htons>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800dbae:	210e      	movs	r1, #14
 800dbb0:	68b8      	ldr	r0, [r7, #8]
 800dbb2:	f7f7 fe0d 	bl	80057d0 <pbuf_add_header>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d125      	bne.n	800dc08 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	8afa      	ldrh	r2, [r7, #22]
 800dbc6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	2206      	movs	r2, #6
 800dbcc:	6839      	ldr	r1, [r7, #0]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f000 fa03 	bl	800dfda <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	3306      	adds	r3, #6
 800dbd8:	2206      	movs	r2, #6
 800dbda:	6879      	ldr	r1, [r7, #4]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f000 f9fc 	bl	800dfda <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dbe8:	2b06      	cmp	r3, #6
 800dbea:	d006      	beq.n	800dbfa <ethernet_output+0x66>
 800dbec:	4b0a      	ldr	r3, [pc, #40]	@ (800dc18 <ethernet_output+0x84>)
 800dbee:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800dbf2:	490a      	ldr	r1, [pc, #40]	@ (800dc1c <ethernet_output+0x88>)
 800dbf4:	480a      	ldr	r0, [pc, #40]	@ (800dc20 <ethernet_output+0x8c>)
 800dbf6:	f000 f915 	bl	800de24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	68b9      	ldr	r1, [r7, #8]
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	4798      	blx	r3
 800dc04:	4603      	mov	r3, r0
 800dc06:	e002      	b.n	800dc0e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800dc08:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800dc0a:	f06f 0301 	mvn.w	r3, #1
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3718      	adds	r7, #24
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	0801159c 	.word	0x0801159c
 800dc1c:	080115d4 	.word	0x080115d4
 800dc20:	08011608 	.word	0x08011608

0800dc24 <rand>:
 800dc24:	4b16      	ldr	r3, [pc, #88]	@ (800dc80 <rand+0x5c>)
 800dc26:	b510      	push	{r4, lr}
 800dc28:	681c      	ldr	r4, [r3, #0]
 800dc2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dc2c:	b9b3      	cbnz	r3, 800dc5c <rand+0x38>
 800dc2e:	2018      	movs	r0, #24
 800dc30:	f000 fa4a 	bl	800e0c8 <malloc>
 800dc34:	4602      	mov	r2, r0
 800dc36:	6320      	str	r0, [r4, #48]	@ 0x30
 800dc38:	b920      	cbnz	r0, 800dc44 <rand+0x20>
 800dc3a:	4b12      	ldr	r3, [pc, #72]	@ (800dc84 <rand+0x60>)
 800dc3c:	4812      	ldr	r0, [pc, #72]	@ (800dc88 <rand+0x64>)
 800dc3e:	2152      	movs	r1, #82	@ 0x52
 800dc40:	f000 f9da 	bl	800dff8 <__assert_func>
 800dc44:	4911      	ldr	r1, [pc, #68]	@ (800dc8c <rand+0x68>)
 800dc46:	4b12      	ldr	r3, [pc, #72]	@ (800dc90 <rand+0x6c>)
 800dc48:	e9c0 1300 	strd	r1, r3, [r0]
 800dc4c:	4b11      	ldr	r3, [pc, #68]	@ (800dc94 <rand+0x70>)
 800dc4e:	6083      	str	r3, [r0, #8]
 800dc50:	230b      	movs	r3, #11
 800dc52:	8183      	strh	r3, [r0, #12]
 800dc54:	2100      	movs	r1, #0
 800dc56:	2001      	movs	r0, #1
 800dc58:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dc5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dc5e:	480e      	ldr	r0, [pc, #56]	@ (800dc98 <rand+0x74>)
 800dc60:	690b      	ldr	r3, [r1, #16]
 800dc62:	694c      	ldr	r4, [r1, #20]
 800dc64:	4a0d      	ldr	r2, [pc, #52]	@ (800dc9c <rand+0x78>)
 800dc66:	4358      	muls	r0, r3
 800dc68:	fb02 0004 	mla	r0, r2, r4, r0
 800dc6c:	fba3 3202 	umull	r3, r2, r3, r2
 800dc70:	3301      	adds	r3, #1
 800dc72:	eb40 0002 	adc.w	r0, r0, r2
 800dc76:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800dc7a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800dc7e:	bd10      	pop	{r4, pc}
 800dc80:	2400003c 	.word	0x2400003c
 800dc84:	0801172e 	.word	0x0801172e
 800dc88:	08011745 	.word	0x08011745
 800dc8c:	abcd330e 	.word	0xabcd330e
 800dc90:	e66d1234 	.word	0xe66d1234
 800dc94:	0005deec 	.word	0x0005deec
 800dc98:	5851f42d 	.word	0x5851f42d
 800dc9c:	4c957f2d 	.word	0x4c957f2d

0800dca0 <std>:
 800dca0:	2300      	movs	r3, #0
 800dca2:	b510      	push	{r4, lr}
 800dca4:	4604      	mov	r4, r0
 800dca6:	e9c0 3300 	strd	r3, r3, [r0]
 800dcaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcae:	6083      	str	r3, [r0, #8]
 800dcb0:	8181      	strh	r1, [r0, #12]
 800dcb2:	6643      	str	r3, [r0, #100]	@ 0x64
 800dcb4:	81c2      	strh	r2, [r0, #14]
 800dcb6:	6183      	str	r3, [r0, #24]
 800dcb8:	4619      	mov	r1, r3
 800dcba:	2208      	movs	r2, #8
 800dcbc:	305c      	adds	r0, #92	@ 0x5c
 800dcbe:	f000 f916 	bl	800deee <memset>
 800dcc2:	4b0d      	ldr	r3, [pc, #52]	@ (800dcf8 <std+0x58>)
 800dcc4:	6263      	str	r3, [r4, #36]	@ 0x24
 800dcc6:	4b0d      	ldr	r3, [pc, #52]	@ (800dcfc <std+0x5c>)
 800dcc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dcca:	4b0d      	ldr	r3, [pc, #52]	@ (800dd00 <std+0x60>)
 800dccc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dcce:	4b0d      	ldr	r3, [pc, #52]	@ (800dd04 <std+0x64>)
 800dcd0:	6323      	str	r3, [r4, #48]	@ 0x30
 800dcd2:	4b0d      	ldr	r3, [pc, #52]	@ (800dd08 <std+0x68>)
 800dcd4:	6224      	str	r4, [r4, #32]
 800dcd6:	429c      	cmp	r4, r3
 800dcd8:	d006      	beq.n	800dce8 <std+0x48>
 800dcda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dcde:	4294      	cmp	r4, r2
 800dce0:	d002      	beq.n	800dce8 <std+0x48>
 800dce2:	33d0      	adds	r3, #208	@ 0xd0
 800dce4:	429c      	cmp	r4, r3
 800dce6:	d105      	bne.n	800dcf4 <std+0x54>
 800dce8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dcec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcf0:	f000 b970 	b.w	800dfd4 <__retarget_lock_init_recursive>
 800dcf4:	bd10      	pop	{r4, pc}
 800dcf6:	bf00      	nop
 800dcf8:	0800de49 	.word	0x0800de49
 800dcfc:	0800de6b 	.word	0x0800de6b
 800dd00:	0800dea3 	.word	0x0800dea3
 800dd04:	0800dec7 	.word	0x0800dec7
 800dd08:	24007cc8 	.word	0x24007cc8

0800dd0c <stdio_exit_handler>:
 800dd0c:	4a02      	ldr	r2, [pc, #8]	@ (800dd18 <stdio_exit_handler+0xc>)
 800dd0e:	4903      	ldr	r1, [pc, #12]	@ (800dd1c <stdio_exit_handler+0x10>)
 800dd10:	4803      	ldr	r0, [pc, #12]	@ (800dd20 <stdio_exit_handler+0x14>)
 800dd12:	f000 b869 	b.w	800dde8 <_fwalk_sglue>
 800dd16:	bf00      	nop
 800dd18:	24000030 	.word	0x24000030
 800dd1c:	0800e8dd 	.word	0x0800e8dd
 800dd20:	24000040 	.word	0x24000040

0800dd24 <cleanup_stdio>:
 800dd24:	6841      	ldr	r1, [r0, #4]
 800dd26:	4b0c      	ldr	r3, [pc, #48]	@ (800dd58 <cleanup_stdio+0x34>)
 800dd28:	4299      	cmp	r1, r3
 800dd2a:	b510      	push	{r4, lr}
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	d001      	beq.n	800dd34 <cleanup_stdio+0x10>
 800dd30:	f000 fdd4 	bl	800e8dc <_fflush_r>
 800dd34:	68a1      	ldr	r1, [r4, #8]
 800dd36:	4b09      	ldr	r3, [pc, #36]	@ (800dd5c <cleanup_stdio+0x38>)
 800dd38:	4299      	cmp	r1, r3
 800dd3a:	d002      	beq.n	800dd42 <cleanup_stdio+0x1e>
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f000 fdcd 	bl	800e8dc <_fflush_r>
 800dd42:	68e1      	ldr	r1, [r4, #12]
 800dd44:	4b06      	ldr	r3, [pc, #24]	@ (800dd60 <cleanup_stdio+0x3c>)
 800dd46:	4299      	cmp	r1, r3
 800dd48:	d004      	beq.n	800dd54 <cleanup_stdio+0x30>
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd50:	f000 bdc4 	b.w	800e8dc <_fflush_r>
 800dd54:	bd10      	pop	{r4, pc}
 800dd56:	bf00      	nop
 800dd58:	24007cc8 	.word	0x24007cc8
 800dd5c:	24007d30 	.word	0x24007d30
 800dd60:	24007d98 	.word	0x24007d98

0800dd64 <global_stdio_init.part.0>:
 800dd64:	b510      	push	{r4, lr}
 800dd66:	4b0b      	ldr	r3, [pc, #44]	@ (800dd94 <global_stdio_init.part.0+0x30>)
 800dd68:	4c0b      	ldr	r4, [pc, #44]	@ (800dd98 <global_stdio_init.part.0+0x34>)
 800dd6a:	4a0c      	ldr	r2, [pc, #48]	@ (800dd9c <global_stdio_init.part.0+0x38>)
 800dd6c:	601a      	str	r2, [r3, #0]
 800dd6e:	4620      	mov	r0, r4
 800dd70:	2200      	movs	r2, #0
 800dd72:	2104      	movs	r1, #4
 800dd74:	f7ff ff94 	bl	800dca0 <std>
 800dd78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	2109      	movs	r1, #9
 800dd80:	f7ff ff8e 	bl	800dca0 <std>
 800dd84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dd88:	2202      	movs	r2, #2
 800dd8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd8e:	2112      	movs	r1, #18
 800dd90:	f7ff bf86 	b.w	800dca0 <std>
 800dd94:	24007e00 	.word	0x24007e00
 800dd98:	24007cc8 	.word	0x24007cc8
 800dd9c:	0800dd0d 	.word	0x0800dd0d

0800dda0 <__sfp_lock_acquire>:
 800dda0:	4801      	ldr	r0, [pc, #4]	@ (800dda8 <__sfp_lock_acquire+0x8>)
 800dda2:	f000 b918 	b.w	800dfd6 <__retarget_lock_acquire_recursive>
 800dda6:	bf00      	nop
 800dda8:	24007e09 	.word	0x24007e09

0800ddac <__sfp_lock_release>:
 800ddac:	4801      	ldr	r0, [pc, #4]	@ (800ddb4 <__sfp_lock_release+0x8>)
 800ddae:	f000 b913 	b.w	800dfd8 <__retarget_lock_release_recursive>
 800ddb2:	bf00      	nop
 800ddb4:	24007e09 	.word	0x24007e09

0800ddb8 <__sinit>:
 800ddb8:	b510      	push	{r4, lr}
 800ddba:	4604      	mov	r4, r0
 800ddbc:	f7ff fff0 	bl	800dda0 <__sfp_lock_acquire>
 800ddc0:	6a23      	ldr	r3, [r4, #32]
 800ddc2:	b11b      	cbz	r3, 800ddcc <__sinit+0x14>
 800ddc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddc8:	f7ff bff0 	b.w	800ddac <__sfp_lock_release>
 800ddcc:	4b04      	ldr	r3, [pc, #16]	@ (800dde0 <__sinit+0x28>)
 800ddce:	6223      	str	r3, [r4, #32]
 800ddd0:	4b04      	ldr	r3, [pc, #16]	@ (800dde4 <__sinit+0x2c>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d1f5      	bne.n	800ddc4 <__sinit+0xc>
 800ddd8:	f7ff ffc4 	bl	800dd64 <global_stdio_init.part.0>
 800dddc:	e7f2      	b.n	800ddc4 <__sinit+0xc>
 800ddde:	bf00      	nop
 800dde0:	0800dd25 	.word	0x0800dd25
 800dde4:	24007e00 	.word	0x24007e00

0800dde8 <_fwalk_sglue>:
 800dde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddec:	4607      	mov	r7, r0
 800ddee:	4688      	mov	r8, r1
 800ddf0:	4614      	mov	r4, r2
 800ddf2:	2600      	movs	r6, #0
 800ddf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ddf8:	f1b9 0901 	subs.w	r9, r9, #1
 800ddfc:	d505      	bpl.n	800de0a <_fwalk_sglue+0x22>
 800ddfe:	6824      	ldr	r4, [r4, #0]
 800de00:	2c00      	cmp	r4, #0
 800de02:	d1f7      	bne.n	800ddf4 <_fwalk_sglue+0xc>
 800de04:	4630      	mov	r0, r6
 800de06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de0a:	89ab      	ldrh	r3, [r5, #12]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d907      	bls.n	800de20 <_fwalk_sglue+0x38>
 800de10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de14:	3301      	adds	r3, #1
 800de16:	d003      	beq.n	800de20 <_fwalk_sglue+0x38>
 800de18:	4629      	mov	r1, r5
 800de1a:	4638      	mov	r0, r7
 800de1c:	47c0      	blx	r8
 800de1e:	4306      	orrs	r6, r0
 800de20:	3568      	adds	r5, #104	@ 0x68
 800de22:	e7e9      	b.n	800ddf8 <_fwalk_sglue+0x10>

0800de24 <iprintf>:
 800de24:	b40f      	push	{r0, r1, r2, r3}
 800de26:	b507      	push	{r0, r1, r2, lr}
 800de28:	4906      	ldr	r1, [pc, #24]	@ (800de44 <iprintf+0x20>)
 800de2a:	ab04      	add	r3, sp, #16
 800de2c:	6808      	ldr	r0, [r1, #0]
 800de2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de32:	6881      	ldr	r1, [r0, #8]
 800de34:	9301      	str	r3, [sp, #4]
 800de36:	f000 fa27 	bl	800e288 <_vfiprintf_r>
 800de3a:	b003      	add	sp, #12
 800de3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de40:	b004      	add	sp, #16
 800de42:	4770      	bx	lr
 800de44:	2400003c 	.word	0x2400003c

0800de48 <__sread>:
 800de48:	b510      	push	{r4, lr}
 800de4a:	460c      	mov	r4, r1
 800de4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de50:	f000 f878 	bl	800df44 <_read_r>
 800de54:	2800      	cmp	r0, #0
 800de56:	bfab      	itete	ge
 800de58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800de5a:	89a3      	ldrhlt	r3, [r4, #12]
 800de5c:	181b      	addge	r3, r3, r0
 800de5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800de62:	bfac      	ite	ge
 800de64:	6563      	strge	r3, [r4, #84]	@ 0x54
 800de66:	81a3      	strhlt	r3, [r4, #12]
 800de68:	bd10      	pop	{r4, pc}

0800de6a <__swrite>:
 800de6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de6e:	461f      	mov	r7, r3
 800de70:	898b      	ldrh	r3, [r1, #12]
 800de72:	05db      	lsls	r3, r3, #23
 800de74:	4605      	mov	r5, r0
 800de76:	460c      	mov	r4, r1
 800de78:	4616      	mov	r6, r2
 800de7a:	d505      	bpl.n	800de88 <__swrite+0x1e>
 800de7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de80:	2302      	movs	r3, #2
 800de82:	2200      	movs	r2, #0
 800de84:	f000 f84c 	bl	800df20 <_lseek_r>
 800de88:	89a3      	ldrh	r3, [r4, #12]
 800de8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de92:	81a3      	strh	r3, [r4, #12]
 800de94:	4632      	mov	r2, r6
 800de96:	463b      	mov	r3, r7
 800de98:	4628      	mov	r0, r5
 800de9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de9e:	f000 b863 	b.w	800df68 <_write_r>

0800dea2 <__sseek>:
 800dea2:	b510      	push	{r4, lr}
 800dea4:	460c      	mov	r4, r1
 800dea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deaa:	f000 f839 	bl	800df20 <_lseek_r>
 800deae:	1c43      	adds	r3, r0, #1
 800deb0:	89a3      	ldrh	r3, [r4, #12]
 800deb2:	bf15      	itete	ne
 800deb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800deb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800deba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800debe:	81a3      	strheq	r3, [r4, #12]
 800dec0:	bf18      	it	ne
 800dec2:	81a3      	strhne	r3, [r4, #12]
 800dec4:	bd10      	pop	{r4, pc}

0800dec6 <__sclose>:
 800dec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deca:	f000 b819 	b.w	800df00 <_close_r>

0800dece <memcmp>:
 800dece:	b510      	push	{r4, lr}
 800ded0:	3901      	subs	r1, #1
 800ded2:	4402      	add	r2, r0
 800ded4:	4290      	cmp	r0, r2
 800ded6:	d101      	bne.n	800dedc <memcmp+0xe>
 800ded8:	2000      	movs	r0, #0
 800deda:	e005      	b.n	800dee8 <memcmp+0x1a>
 800dedc:	7803      	ldrb	r3, [r0, #0]
 800dede:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dee2:	42a3      	cmp	r3, r4
 800dee4:	d001      	beq.n	800deea <memcmp+0x1c>
 800dee6:	1b18      	subs	r0, r3, r4
 800dee8:	bd10      	pop	{r4, pc}
 800deea:	3001      	adds	r0, #1
 800deec:	e7f2      	b.n	800ded4 <memcmp+0x6>

0800deee <memset>:
 800deee:	4402      	add	r2, r0
 800def0:	4603      	mov	r3, r0
 800def2:	4293      	cmp	r3, r2
 800def4:	d100      	bne.n	800def8 <memset+0xa>
 800def6:	4770      	bx	lr
 800def8:	f803 1b01 	strb.w	r1, [r3], #1
 800defc:	e7f9      	b.n	800def2 <memset+0x4>
	...

0800df00 <_close_r>:
 800df00:	b538      	push	{r3, r4, r5, lr}
 800df02:	4d06      	ldr	r5, [pc, #24]	@ (800df1c <_close_r+0x1c>)
 800df04:	2300      	movs	r3, #0
 800df06:	4604      	mov	r4, r0
 800df08:	4608      	mov	r0, r1
 800df0a:	602b      	str	r3, [r5, #0]
 800df0c:	f7f2 fc58 	bl	80007c0 <_close>
 800df10:	1c43      	adds	r3, r0, #1
 800df12:	d102      	bne.n	800df1a <_close_r+0x1a>
 800df14:	682b      	ldr	r3, [r5, #0]
 800df16:	b103      	cbz	r3, 800df1a <_close_r+0x1a>
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	bd38      	pop	{r3, r4, r5, pc}
 800df1c:	24007e04 	.word	0x24007e04

0800df20 <_lseek_r>:
 800df20:	b538      	push	{r3, r4, r5, lr}
 800df22:	4d07      	ldr	r5, [pc, #28]	@ (800df40 <_lseek_r+0x20>)
 800df24:	4604      	mov	r4, r0
 800df26:	4608      	mov	r0, r1
 800df28:	4611      	mov	r1, r2
 800df2a:	2200      	movs	r2, #0
 800df2c:	602a      	str	r2, [r5, #0]
 800df2e:	461a      	mov	r2, r3
 800df30:	f7f2 fc6d 	bl	800080e <_lseek>
 800df34:	1c43      	adds	r3, r0, #1
 800df36:	d102      	bne.n	800df3e <_lseek_r+0x1e>
 800df38:	682b      	ldr	r3, [r5, #0]
 800df3a:	b103      	cbz	r3, 800df3e <_lseek_r+0x1e>
 800df3c:	6023      	str	r3, [r4, #0]
 800df3e:	bd38      	pop	{r3, r4, r5, pc}
 800df40:	24007e04 	.word	0x24007e04

0800df44 <_read_r>:
 800df44:	b538      	push	{r3, r4, r5, lr}
 800df46:	4d07      	ldr	r5, [pc, #28]	@ (800df64 <_read_r+0x20>)
 800df48:	4604      	mov	r4, r0
 800df4a:	4608      	mov	r0, r1
 800df4c:	4611      	mov	r1, r2
 800df4e:	2200      	movs	r2, #0
 800df50:	602a      	str	r2, [r5, #0]
 800df52:	461a      	mov	r2, r3
 800df54:	f7f2 fbfb 	bl	800074e <_read>
 800df58:	1c43      	adds	r3, r0, #1
 800df5a:	d102      	bne.n	800df62 <_read_r+0x1e>
 800df5c:	682b      	ldr	r3, [r5, #0]
 800df5e:	b103      	cbz	r3, 800df62 <_read_r+0x1e>
 800df60:	6023      	str	r3, [r4, #0]
 800df62:	bd38      	pop	{r3, r4, r5, pc}
 800df64:	24007e04 	.word	0x24007e04

0800df68 <_write_r>:
 800df68:	b538      	push	{r3, r4, r5, lr}
 800df6a:	4d07      	ldr	r5, [pc, #28]	@ (800df88 <_write_r+0x20>)
 800df6c:	4604      	mov	r4, r0
 800df6e:	4608      	mov	r0, r1
 800df70:	4611      	mov	r1, r2
 800df72:	2200      	movs	r2, #0
 800df74:	602a      	str	r2, [r5, #0]
 800df76:	461a      	mov	r2, r3
 800df78:	f7f2 fc06 	bl	8000788 <_write>
 800df7c:	1c43      	adds	r3, r0, #1
 800df7e:	d102      	bne.n	800df86 <_write_r+0x1e>
 800df80:	682b      	ldr	r3, [r5, #0]
 800df82:	b103      	cbz	r3, 800df86 <_write_r+0x1e>
 800df84:	6023      	str	r3, [r4, #0]
 800df86:	bd38      	pop	{r3, r4, r5, pc}
 800df88:	24007e04 	.word	0x24007e04

0800df8c <__libc_init_array>:
 800df8c:	b570      	push	{r4, r5, r6, lr}
 800df8e:	4d0d      	ldr	r5, [pc, #52]	@ (800dfc4 <__libc_init_array+0x38>)
 800df90:	4c0d      	ldr	r4, [pc, #52]	@ (800dfc8 <__libc_init_array+0x3c>)
 800df92:	1b64      	subs	r4, r4, r5
 800df94:	10a4      	asrs	r4, r4, #2
 800df96:	2600      	movs	r6, #0
 800df98:	42a6      	cmp	r6, r4
 800df9a:	d109      	bne.n	800dfb0 <__libc_init_array+0x24>
 800df9c:	4d0b      	ldr	r5, [pc, #44]	@ (800dfcc <__libc_init_array+0x40>)
 800df9e:	4c0c      	ldr	r4, [pc, #48]	@ (800dfd0 <__libc_init_array+0x44>)
 800dfa0:	f000 fe4a 	bl	800ec38 <_init>
 800dfa4:	1b64      	subs	r4, r4, r5
 800dfa6:	10a4      	asrs	r4, r4, #2
 800dfa8:	2600      	movs	r6, #0
 800dfaa:	42a6      	cmp	r6, r4
 800dfac:	d105      	bne.n	800dfba <__libc_init_array+0x2e>
 800dfae:	bd70      	pop	{r4, r5, r6, pc}
 800dfb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfb4:	4798      	blx	r3
 800dfb6:	3601      	adds	r6, #1
 800dfb8:	e7ee      	b.n	800df98 <__libc_init_array+0xc>
 800dfba:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfbe:	4798      	blx	r3
 800dfc0:	3601      	adds	r6, #1
 800dfc2:	e7f2      	b.n	800dfaa <__libc_init_array+0x1e>
 800dfc4:	08011814 	.word	0x08011814
 800dfc8:	08011814 	.word	0x08011814
 800dfcc:	08011814 	.word	0x08011814
 800dfd0:	08011818 	.word	0x08011818

0800dfd4 <__retarget_lock_init_recursive>:
 800dfd4:	4770      	bx	lr

0800dfd6 <__retarget_lock_acquire_recursive>:
 800dfd6:	4770      	bx	lr

0800dfd8 <__retarget_lock_release_recursive>:
 800dfd8:	4770      	bx	lr

0800dfda <memcpy>:
 800dfda:	440a      	add	r2, r1
 800dfdc:	4291      	cmp	r1, r2
 800dfde:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfe2:	d100      	bne.n	800dfe6 <memcpy+0xc>
 800dfe4:	4770      	bx	lr
 800dfe6:	b510      	push	{r4, lr}
 800dfe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dff0:	4291      	cmp	r1, r2
 800dff2:	d1f9      	bne.n	800dfe8 <memcpy+0xe>
 800dff4:	bd10      	pop	{r4, pc}
	...

0800dff8 <__assert_func>:
 800dff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dffa:	4614      	mov	r4, r2
 800dffc:	461a      	mov	r2, r3
 800dffe:	4b09      	ldr	r3, [pc, #36]	@ (800e024 <__assert_func+0x2c>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4605      	mov	r5, r0
 800e004:	68d8      	ldr	r0, [r3, #12]
 800e006:	b954      	cbnz	r4, 800e01e <__assert_func+0x26>
 800e008:	4b07      	ldr	r3, [pc, #28]	@ (800e028 <__assert_func+0x30>)
 800e00a:	461c      	mov	r4, r3
 800e00c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e010:	9100      	str	r1, [sp, #0]
 800e012:	462b      	mov	r3, r5
 800e014:	4905      	ldr	r1, [pc, #20]	@ (800e02c <__assert_func+0x34>)
 800e016:	f000 fc89 	bl	800e92c <fiprintf>
 800e01a:	f000 fd3d 	bl	800ea98 <abort>
 800e01e:	4b04      	ldr	r3, [pc, #16]	@ (800e030 <__assert_func+0x38>)
 800e020:	e7f4      	b.n	800e00c <__assert_func+0x14>
 800e022:	bf00      	nop
 800e024:	2400003c 	.word	0x2400003c
 800e028:	080117d8 	.word	0x080117d8
 800e02c:	080117aa 	.word	0x080117aa
 800e030:	0801179d 	.word	0x0801179d

0800e034 <_free_r>:
 800e034:	b538      	push	{r3, r4, r5, lr}
 800e036:	4605      	mov	r5, r0
 800e038:	2900      	cmp	r1, #0
 800e03a:	d041      	beq.n	800e0c0 <_free_r+0x8c>
 800e03c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e040:	1f0c      	subs	r4, r1, #4
 800e042:	2b00      	cmp	r3, #0
 800e044:	bfb8      	it	lt
 800e046:	18e4      	addlt	r4, r4, r3
 800e048:	f000 f8e8 	bl	800e21c <__malloc_lock>
 800e04c:	4a1d      	ldr	r2, [pc, #116]	@ (800e0c4 <_free_r+0x90>)
 800e04e:	6813      	ldr	r3, [r2, #0]
 800e050:	b933      	cbnz	r3, 800e060 <_free_r+0x2c>
 800e052:	6063      	str	r3, [r4, #4]
 800e054:	6014      	str	r4, [r2, #0]
 800e056:	4628      	mov	r0, r5
 800e058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e05c:	f000 b8e4 	b.w	800e228 <__malloc_unlock>
 800e060:	42a3      	cmp	r3, r4
 800e062:	d908      	bls.n	800e076 <_free_r+0x42>
 800e064:	6820      	ldr	r0, [r4, #0]
 800e066:	1821      	adds	r1, r4, r0
 800e068:	428b      	cmp	r3, r1
 800e06a:	bf01      	itttt	eq
 800e06c:	6819      	ldreq	r1, [r3, #0]
 800e06e:	685b      	ldreq	r3, [r3, #4]
 800e070:	1809      	addeq	r1, r1, r0
 800e072:	6021      	streq	r1, [r4, #0]
 800e074:	e7ed      	b.n	800e052 <_free_r+0x1e>
 800e076:	461a      	mov	r2, r3
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	b10b      	cbz	r3, 800e080 <_free_r+0x4c>
 800e07c:	42a3      	cmp	r3, r4
 800e07e:	d9fa      	bls.n	800e076 <_free_r+0x42>
 800e080:	6811      	ldr	r1, [r2, #0]
 800e082:	1850      	adds	r0, r2, r1
 800e084:	42a0      	cmp	r0, r4
 800e086:	d10b      	bne.n	800e0a0 <_free_r+0x6c>
 800e088:	6820      	ldr	r0, [r4, #0]
 800e08a:	4401      	add	r1, r0
 800e08c:	1850      	adds	r0, r2, r1
 800e08e:	4283      	cmp	r3, r0
 800e090:	6011      	str	r1, [r2, #0]
 800e092:	d1e0      	bne.n	800e056 <_free_r+0x22>
 800e094:	6818      	ldr	r0, [r3, #0]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	6053      	str	r3, [r2, #4]
 800e09a:	4408      	add	r0, r1
 800e09c:	6010      	str	r0, [r2, #0]
 800e09e:	e7da      	b.n	800e056 <_free_r+0x22>
 800e0a0:	d902      	bls.n	800e0a8 <_free_r+0x74>
 800e0a2:	230c      	movs	r3, #12
 800e0a4:	602b      	str	r3, [r5, #0]
 800e0a6:	e7d6      	b.n	800e056 <_free_r+0x22>
 800e0a8:	6820      	ldr	r0, [r4, #0]
 800e0aa:	1821      	adds	r1, r4, r0
 800e0ac:	428b      	cmp	r3, r1
 800e0ae:	bf04      	itt	eq
 800e0b0:	6819      	ldreq	r1, [r3, #0]
 800e0b2:	685b      	ldreq	r3, [r3, #4]
 800e0b4:	6063      	str	r3, [r4, #4]
 800e0b6:	bf04      	itt	eq
 800e0b8:	1809      	addeq	r1, r1, r0
 800e0ba:	6021      	streq	r1, [r4, #0]
 800e0bc:	6054      	str	r4, [r2, #4]
 800e0be:	e7ca      	b.n	800e056 <_free_r+0x22>
 800e0c0:	bd38      	pop	{r3, r4, r5, pc}
 800e0c2:	bf00      	nop
 800e0c4:	24007e10 	.word	0x24007e10

0800e0c8 <malloc>:
 800e0c8:	4b02      	ldr	r3, [pc, #8]	@ (800e0d4 <malloc+0xc>)
 800e0ca:	4601      	mov	r1, r0
 800e0cc:	6818      	ldr	r0, [r3, #0]
 800e0ce:	f000 b825 	b.w	800e11c <_malloc_r>
 800e0d2:	bf00      	nop
 800e0d4:	2400003c 	.word	0x2400003c

0800e0d8 <sbrk_aligned>:
 800e0d8:	b570      	push	{r4, r5, r6, lr}
 800e0da:	4e0f      	ldr	r6, [pc, #60]	@ (800e118 <sbrk_aligned+0x40>)
 800e0dc:	460c      	mov	r4, r1
 800e0de:	6831      	ldr	r1, [r6, #0]
 800e0e0:	4605      	mov	r5, r0
 800e0e2:	b911      	cbnz	r1, 800e0ea <sbrk_aligned+0x12>
 800e0e4:	f000 fcc8 	bl	800ea78 <_sbrk_r>
 800e0e8:	6030      	str	r0, [r6, #0]
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	f000 fcc3 	bl	800ea78 <_sbrk_r>
 800e0f2:	1c43      	adds	r3, r0, #1
 800e0f4:	d103      	bne.n	800e0fe <sbrk_aligned+0x26>
 800e0f6:	f04f 34ff 	mov.w	r4, #4294967295
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	bd70      	pop	{r4, r5, r6, pc}
 800e0fe:	1cc4      	adds	r4, r0, #3
 800e100:	f024 0403 	bic.w	r4, r4, #3
 800e104:	42a0      	cmp	r0, r4
 800e106:	d0f8      	beq.n	800e0fa <sbrk_aligned+0x22>
 800e108:	1a21      	subs	r1, r4, r0
 800e10a:	4628      	mov	r0, r5
 800e10c:	f000 fcb4 	bl	800ea78 <_sbrk_r>
 800e110:	3001      	adds	r0, #1
 800e112:	d1f2      	bne.n	800e0fa <sbrk_aligned+0x22>
 800e114:	e7ef      	b.n	800e0f6 <sbrk_aligned+0x1e>
 800e116:	bf00      	nop
 800e118:	24007e0c 	.word	0x24007e0c

0800e11c <_malloc_r>:
 800e11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e120:	1ccd      	adds	r5, r1, #3
 800e122:	f025 0503 	bic.w	r5, r5, #3
 800e126:	3508      	adds	r5, #8
 800e128:	2d0c      	cmp	r5, #12
 800e12a:	bf38      	it	cc
 800e12c:	250c      	movcc	r5, #12
 800e12e:	2d00      	cmp	r5, #0
 800e130:	4606      	mov	r6, r0
 800e132:	db01      	blt.n	800e138 <_malloc_r+0x1c>
 800e134:	42a9      	cmp	r1, r5
 800e136:	d904      	bls.n	800e142 <_malloc_r+0x26>
 800e138:	230c      	movs	r3, #12
 800e13a:	6033      	str	r3, [r6, #0]
 800e13c:	2000      	movs	r0, #0
 800e13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e218 <_malloc_r+0xfc>
 800e146:	f000 f869 	bl	800e21c <__malloc_lock>
 800e14a:	f8d8 3000 	ldr.w	r3, [r8]
 800e14e:	461c      	mov	r4, r3
 800e150:	bb44      	cbnz	r4, 800e1a4 <_malloc_r+0x88>
 800e152:	4629      	mov	r1, r5
 800e154:	4630      	mov	r0, r6
 800e156:	f7ff ffbf 	bl	800e0d8 <sbrk_aligned>
 800e15a:	1c43      	adds	r3, r0, #1
 800e15c:	4604      	mov	r4, r0
 800e15e:	d158      	bne.n	800e212 <_malloc_r+0xf6>
 800e160:	f8d8 4000 	ldr.w	r4, [r8]
 800e164:	4627      	mov	r7, r4
 800e166:	2f00      	cmp	r7, #0
 800e168:	d143      	bne.n	800e1f2 <_malloc_r+0xd6>
 800e16a:	2c00      	cmp	r4, #0
 800e16c:	d04b      	beq.n	800e206 <_malloc_r+0xea>
 800e16e:	6823      	ldr	r3, [r4, #0]
 800e170:	4639      	mov	r1, r7
 800e172:	4630      	mov	r0, r6
 800e174:	eb04 0903 	add.w	r9, r4, r3
 800e178:	f000 fc7e 	bl	800ea78 <_sbrk_r>
 800e17c:	4581      	cmp	r9, r0
 800e17e:	d142      	bne.n	800e206 <_malloc_r+0xea>
 800e180:	6821      	ldr	r1, [r4, #0]
 800e182:	1a6d      	subs	r5, r5, r1
 800e184:	4629      	mov	r1, r5
 800e186:	4630      	mov	r0, r6
 800e188:	f7ff ffa6 	bl	800e0d8 <sbrk_aligned>
 800e18c:	3001      	adds	r0, #1
 800e18e:	d03a      	beq.n	800e206 <_malloc_r+0xea>
 800e190:	6823      	ldr	r3, [r4, #0]
 800e192:	442b      	add	r3, r5
 800e194:	6023      	str	r3, [r4, #0]
 800e196:	f8d8 3000 	ldr.w	r3, [r8]
 800e19a:	685a      	ldr	r2, [r3, #4]
 800e19c:	bb62      	cbnz	r2, 800e1f8 <_malloc_r+0xdc>
 800e19e:	f8c8 7000 	str.w	r7, [r8]
 800e1a2:	e00f      	b.n	800e1c4 <_malloc_r+0xa8>
 800e1a4:	6822      	ldr	r2, [r4, #0]
 800e1a6:	1b52      	subs	r2, r2, r5
 800e1a8:	d420      	bmi.n	800e1ec <_malloc_r+0xd0>
 800e1aa:	2a0b      	cmp	r2, #11
 800e1ac:	d917      	bls.n	800e1de <_malloc_r+0xc2>
 800e1ae:	1961      	adds	r1, r4, r5
 800e1b0:	42a3      	cmp	r3, r4
 800e1b2:	6025      	str	r5, [r4, #0]
 800e1b4:	bf18      	it	ne
 800e1b6:	6059      	strne	r1, [r3, #4]
 800e1b8:	6863      	ldr	r3, [r4, #4]
 800e1ba:	bf08      	it	eq
 800e1bc:	f8c8 1000 	streq.w	r1, [r8]
 800e1c0:	5162      	str	r2, [r4, r5]
 800e1c2:	604b      	str	r3, [r1, #4]
 800e1c4:	4630      	mov	r0, r6
 800e1c6:	f000 f82f 	bl	800e228 <__malloc_unlock>
 800e1ca:	f104 000b 	add.w	r0, r4, #11
 800e1ce:	1d23      	adds	r3, r4, #4
 800e1d0:	f020 0007 	bic.w	r0, r0, #7
 800e1d4:	1ac2      	subs	r2, r0, r3
 800e1d6:	bf1c      	itt	ne
 800e1d8:	1a1b      	subne	r3, r3, r0
 800e1da:	50a3      	strne	r3, [r4, r2]
 800e1dc:	e7af      	b.n	800e13e <_malloc_r+0x22>
 800e1de:	6862      	ldr	r2, [r4, #4]
 800e1e0:	42a3      	cmp	r3, r4
 800e1e2:	bf0c      	ite	eq
 800e1e4:	f8c8 2000 	streq.w	r2, [r8]
 800e1e8:	605a      	strne	r2, [r3, #4]
 800e1ea:	e7eb      	b.n	800e1c4 <_malloc_r+0xa8>
 800e1ec:	4623      	mov	r3, r4
 800e1ee:	6864      	ldr	r4, [r4, #4]
 800e1f0:	e7ae      	b.n	800e150 <_malloc_r+0x34>
 800e1f2:	463c      	mov	r4, r7
 800e1f4:	687f      	ldr	r7, [r7, #4]
 800e1f6:	e7b6      	b.n	800e166 <_malloc_r+0x4a>
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	42a3      	cmp	r3, r4
 800e1fe:	d1fb      	bne.n	800e1f8 <_malloc_r+0xdc>
 800e200:	2300      	movs	r3, #0
 800e202:	6053      	str	r3, [r2, #4]
 800e204:	e7de      	b.n	800e1c4 <_malloc_r+0xa8>
 800e206:	230c      	movs	r3, #12
 800e208:	6033      	str	r3, [r6, #0]
 800e20a:	4630      	mov	r0, r6
 800e20c:	f000 f80c 	bl	800e228 <__malloc_unlock>
 800e210:	e794      	b.n	800e13c <_malloc_r+0x20>
 800e212:	6005      	str	r5, [r0, #0]
 800e214:	e7d6      	b.n	800e1c4 <_malloc_r+0xa8>
 800e216:	bf00      	nop
 800e218:	24007e10 	.word	0x24007e10

0800e21c <__malloc_lock>:
 800e21c:	4801      	ldr	r0, [pc, #4]	@ (800e224 <__malloc_lock+0x8>)
 800e21e:	f7ff beda 	b.w	800dfd6 <__retarget_lock_acquire_recursive>
 800e222:	bf00      	nop
 800e224:	24007e08 	.word	0x24007e08

0800e228 <__malloc_unlock>:
 800e228:	4801      	ldr	r0, [pc, #4]	@ (800e230 <__malloc_unlock+0x8>)
 800e22a:	f7ff bed5 	b.w	800dfd8 <__retarget_lock_release_recursive>
 800e22e:	bf00      	nop
 800e230:	24007e08 	.word	0x24007e08

0800e234 <__sfputc_r>:
 800e234:	6893      	ldr	r3, [r2, #8]
 800e236:	3b01      	subs	r3, #1
 800e238:	2b00      	cmp	r3, #0
 800e23a:	b410      	push	{r4}
 800e23c:	6093      	str	r3, [r2, #8]
 800e23e:	da08      	bge.n	800e252 <__sfputc_r+0x1e>
 800e240:	6994      	ldr	r4, [r2, #24]
 800e242:	42a3      	cmp	r3, r4
 800e244:	db01      	blt.n	800e24a <__sfputc_r+0x16>
 800e246:	290a      	cmp	r1, #10
 800e248:	d103      	bne.n	800e252 <__sfputc_r+0x1e>
 800e24a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e24e:	f000 bb7f 	b.w	800e950 <__swbuf_r>
 800e252:	6813      	ldr	r3, [r2, #0]
 800e254:	1c58      	adds	r0, r3, #1
 800e256:	6010      	str	r0, [r2, #0]
 800e258:	7019      	strb	r1, [r3, #0]
 800e25a:	4608      	mov	r0, r1
 800e25c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e260:	4770      	bx	lr

0800e262 <__sfputs_r>:
 800e262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e264:	4606      	mov	r6, r0
 800e266:	460f      	mov	r7, r1
 800e268:	4614      	mov	r4, r2
 800e26a:	18d5      	adds	r5, r2, r3
 800e26c:	42ac      	cmp	r4, r5
 800e26e:	d101      	bne.n	800e274 <__sfputs_r+0x12>
 800e270:	2000      	movs	r0, #0
 800e272:	e007      	b.n	800e284 <__sfputs_r+0x22>
 800e274:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e278:	463a      	mov	r2, r7
 800e27a:	4630      	mov	r0, r6
 800e27c:	f7ff ffda 	bl	800e234 <__sfputc_r>
 800e280:	1c43      	adds	r3, r0, #1
 800e282:	d1f3      	bne.n	800e26c <__sfputs_r+0xa>
 800e284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e288 <_vfiprintf_r>:
 800e288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e28c:	460d      	mov	r5, r1
 800e28e:	b09d      	sub	sp, #116	@ 0x74
 800e290:	4614      	mov	r4, r2
 800e292:	4698      	mov	r8, r3
 800e294:	4606      	mov	r6, r0
 800e296:	b118      	cbz	r0, 800e2a0 <_vfiprintf_r+0x18>
 800e298:	6a03      	ldr	r3, [r0, #32]
 800e29a:	b90b      	cbnz	r3, 800e2a0 <_vfiprintf_r+0x18>
 800e29c:	f7ff fd8c 	bl	800ddb8 <__sinit>
 800e2a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2a2:	07d9      	lsls	r1, r3, #31
 800e2a4:	d405      	bmi.n	800e2b2 <_vfiprintf_r+0x2a>
 800e2a6:	89ab      	ldrh	r3, [r5, #12]
 800e2a8:	059a      	lsls	r2, r3, #22
 800e2aa:	d402      	bmi.n	800e2b2 <_vfiprintf_r+0x2a>
 800e2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2ae:	f7ff fe92 	bl	800dfd6 <__retarget_lock_acquire_recursive>
 800e2b2:	89ab      	ldrh	r3, [r5, #12]
 800e2b4:	071b      	lsls	r3, r3, #28
 800e2b6:	d501      	bpl.n	800e2bc <_vfiprintf_r+0x34>
 800e2b8:	692b      	ldr	r3, [r5, #16]
 800e2ba:	b99b      	cbnz	r3, 800e2e4 <_vfiprintf_r+0x5c>
 800e2bc:	4629      	mov	r1, r5
 800e2be:	4630      	mov	r0, r6
 800e2c0:	f000 fb84 	bl	800e9cc <__swsetup_r>
 800e2c4:	b170      	cbz	r0, 800e2e4 <_vfiprintf_r+0x5c>
 800e2c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2c8:	07dc      	lsls	r4, r3, #31
 800e2ca:	d504      	bpl.n	800e2d6 <_vfiprintf_r+0x4e>
 800e2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d0:	b01d      	add	sp, #116	@ 0x74
 800e2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d6:	89ab      	ldrh	r3, [r5, #12]
 800e2d8:	0598      	lsls	r0, r3, #22
 800e2da:	d4f7      	bmi.n	800e2cc <_vfiprintf_r+0x44>
 800e2dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2de:	f7ff fe7b 	bl	800dfd8 <__retarget_lock_release_recursive>
 800e2e2:	e7f3      	b.n	800e2cc <_vfiprintf_r+0x44>
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2e8:	2320      	movs	r3, #32
 800e2ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e2ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2f2:	2330      	movs	r3, #48	@ 0x30
 800e2f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e4a4 <_vfiprintf_r+0x21c>
 800e2f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e2fc:	f04f 0901 	mov.w	r9, #1
 800e300:	4623      	mov	r3, r4
 800e302:	469a      	mov	sl, r3
 800e304:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e308:	b10a      	cbz	r2, 800e30e <_vfiprintf_r+0x86>
 800e30a:	2a25      	cmp	r2, #37	@ 0x25
 800e30c:	d1f9      	bne.n	800e302 <_vfiprintf_r+0x7a>
 800e30e:	ebba 0b04 	subs.w	fp, sl, r4
 800e312:	d00b      	beq.n	800e32c <_vfiprintf_r+0xa4>
 800e314:	465b      	mov	r3, fp
 800e316:	4622      	mov	r2, r4
 800e318:	4629      	mov	r1, r5
 800e31a:	4630      	mov	r0, r6
 800e31c:	f7ff ffa1 	bl	800e262 <__sfputs_r>
 800e320:	3001      	adds	r0, #1
 800e322:	f000 80a7 	beq.w	800e474 <_vfiprintf_r+0x1ec>
 800e326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e328:	445a      	add	r2, fp
 800e32a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e32c:	f89a 3000 	ldrb.w	r3, [sl]
 800e330:	2b00      	cmp	r3, #0
 800e332:	f000 809f 	beq.w	800e474 <_vfiprintf_r+0x1ec>
 800e336:	2300      	movs	r3, #0
 800e338:	f04f 32ff 	mov.w	r2, #4294967295
 800e33c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e340:	f10a 0a01 	add.w	sl, sl, #1
 800e344:	9304      	str	r3, [sp, #16]
 800e346:	9307      	str	r3, [sp, #28]
 800e348:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e34c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e34e:	4654      	mov	r4, sl
 800e350:	2205      	movs	r2, #5
 800e352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e356:	4853      	ldr	r0, [pc, #332]	@ (800e4a4 <_vfiprintf_r+0x21c>)
 800e358:	f7f1 ffda 	bl	8000310 <memchr>
 800e35c:	9a04      	ldr	r2, [sp, #16]
 800e35e:	b9d8      	cbnz	r0, 800e398 <_vfiprintf_r+0x110>
 800e360:	06d1      	lsls	r1, r2, #27
 800e362:	bf44      	itt	mi
 800e364:	2320      	movmi	r3, #32
 800e366:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e36a:	0713      	lsls	r3, r2, #28
 800e36c:	bf44      	itt	mi
 800e36e:	232b      	movmi	r3, #43	@ 0x2b
 800e370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e374:	f89a 3000 	ldrb.w	r3, [sl]
 800e378:	2b2a      	cmp	r3, #42	@ 0x2a
 800e37a:	d015      	beq.n	800e3a8 <_vfiprintf_r+0x120>
 800e37c:	9a07      	ldr	r2, [sp, #28]
 800e37e:	4654      	mov	r4, sl
 800e380:	2000      	movs	r0, #0
 800e382:	f04f 0c0a 	mov.w	ip, #10
 800e386:	4621      	mov	r1, r4
 800e388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e38c:	3b30      	subs	r3, #48	@ 0x30
 800e38e:	2b09      	cmp	r3, #9
 800e390:	d94b      	bls.n	800e42a <_vfiprintf_r+0x1a2>
 800e392:	b1b0      	cbz	r0, 800e3c2 <_vfiprintf_r+0x13a>
 800e394:	9207      	str	r2, [sp, #28]
 800e396:	e014      	b.n	800e3c2 <_vfiprintf_r+0x13a>
 800e398:	eba0 0308 	sub.w	r3, r0, r8
 800e39c:	fa09 f303 	lsl.w	r3, r9, r3
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	9304      	str	r3, [sp, #16]
 800e3a4:	46a2      	mov	sl, r4
 800e3a6:	e7d2      	b.n	800e34e <_vfiprintf_r+0xc6>
 800e3a8:	9b03      	ldr	r3, [sp, #12]
 800e3aa:	1d19      	adds	r1, r3, #4
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	9103      	str	r1, [sp, #12]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	bfbb      	ittet	lt
 800e3b4:	425b      	neglt	r3, r3
 800e3b6:	f042 0202 	orrlt.w	r2, r2, #2
 800e3ba:	9307      	strge	r3, [sp, #28]
 800e3bc:	9307      	strlt	r3, [sp, #28]
 800e3be:	bfb8      	it	lt
 800e3c0:	9204      	strlt	r2, [sp, #16]
 800e3c2:	7823      	ldrb	r3, [r4, #0]
 800e3c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3c6:	d10a      	bne.n	800e3de <_vfiprintf_r+0x156>
 800e3c8:	7863      	ldrb	r3, [r4, #1]
 800e3ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3cc:	d132      	bne.n	800e434 <_vfiprintf_r+0x1ac>
 800e3ce:	9b03      	ldr	r3, [sp, #12]
 800e3d0:	1d1a      	adds	r2, r3, #4
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	9203      	str	r2, [sp, #12]
 800e3d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e3da:	3402      	adds	r4, #2
 800e3dc:	9305      	str	r3, [sp, #20]
 800e3de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e4b4 <_vfiprintf_r+0x22c>
 800e3e2:	7821      	ldrb	r1, [r4, #0]
 800e3e4:	2203      	movs	r2, #3
 800e3e6:	4650      	mov	r0, sl
 800e3e8:	f7f1 ff92 	bl	8000310 <memchr>
 800e3ec:	b138      	cbz	r0, 800e3fe <_vfiprintf_r+0x176>
 800e3ee:	9b04      	ldr	r3, [sp, #16]
 800e3f0:	eba0 000a 	sub.w	r0, r0, sl
 800e3f4:	2240      	movs	r2, #64	@ 0x40
 800e3f6:	4082      	lsls	r2, r0
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	3401      	adds	r4, #1
 800e3fc:	9304      	str	r3, [sp, #16]
 800e3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e402:	4829      	ldr	r0, [pc, #164]	@ (800e4a8 <_vfiprintf_r+0x220>)
 800e404:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e408:	2206      	movs	r2, #6
 800e40a:	f7f1 ff81 	bl	8000310 <memchr>
 800e40e:	2800      	cmp	r0, #0
 800e410:	d03f      	beq.n	800e492 <_vfiprintf_r+0x20a>
 800e412:	4b26      	ldr	r3, [pc, #152]	@ (800e4ac <_vfiprintf_r+0x224>)
 800e414:	bb1b      	cbnz	r3, 800e45e <_vfiprintf_r+0x1d6>
 800e416:	9b03      	ldr	r3, [sp, #12]
 800e418:	3307      	adds	r3, #7
 800e41a:	f023 0307 	bic.w	r3, r3, #7
 800e41e:	3308      	adds	r3, #8
 800e420:	9303      	str	r3, [sp, #12]
 800e422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e424:	443b      	add	r3, r7
 800e426:	9309      	str	r3, [sp, #36]	@ 0x24
 800e428:	e76a      	b.n	800e300 <_vfiprintf_r+0x78>
 800e42a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e42e:	460c      	mov	r4, r1
 800e430:	2001      	movs	r0, #1
 800e432:	e7a8      	b.n	800e386 <_vfiprintf_r+0xfe>
 800e434:	2300      	movs	r3, #0
 800e436:	3401      	adds	r4, #1
 800e438:	9305      	str	r3, [sp, #20]
 800e43a:	4619      	mov	r1, r3
 800e43c:	f04f 0c0a 	mov.w	ip, #10
 800e440:	4620      	mov	r0, r4
 800e442:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e446:	3a30      	subs	r2, #48	@ 0x30
 800e448:	2a09      	cmp	r2, #9
 800e44a:	d903      	bls.n	800e454 <_vfiprintf_r+0x1cc>
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d0c6      	beq.n	800e3de <_vfiprintf_r+0x156>
 800e450:	9105      	str	r1, [sp, #20]
 800e452:	e7c4      	b.n	800e3de <_vfiprintf_r+0x156>
 800e454:	fb0c 2101 	mla	r1, ip, r1, r2
 800e458:	4604      	mov	r4, r0
 800e45a:	2301      	movs	r3, #1
 800e45c:	e7f0      	b.n	800e440 <_vfiprintf_r+0x1b8>
 800e45e:	ab03      	add	r3, sp, #12
 800e460:	9300      	str	r3, [sp, #0]
 800e462:	462a      	mov	r2, r5
 800e464:	4b12      	ldr	r3, [pc, #72]	@ (800e4b0 <_vfiprintf_r+0x228>)
 800e466:	a904      	add	r1, sp, #16
 800e468:	4630      	mov	r0, r6
 800e46a:	f3af 8000 	nop.w
 800e46e:	4607      	mov	r7, r0
 800e470:	1c78      	adds	r0, r7, #1
 800e472:	d1d6      	bne.n	800e422 <_vfiprintf_r+0x19a>
 800e474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e476:	07d9      	lsls	r1, r3, #31
 800e478:	d405      	bmi.n	800e486 <_vfiprintf_r+0x1fe>
 800e47a:	89ab      	ldrh	r3, [r5, #12]
 800e47c:	059a      	lsls	r2, r3, #22
 800e47e:	d402      	bmi.n	800e486 <_vfiprintf_r+0x1fe>
 800e480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e482:	f7ff fda9 	bl	800dfd8 <__retarget_lock_release_recursive>
 800e486:	89ab      	ldrh	r3, [r5, #12]
 800e488:	065b      	lsls	r3, r3, #25
 800e48a:	f53f af1f 	bmi.w	800e2cc <_vfiprintf_r+0x44>
 800e48e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e490:	e71e      	b.n	800e2d0 <_vfiprintf_r+0x48>
 800e492:	ab03      	add	r3, sp, #12
 800e494:	9300      	str	r3, [sp, #0]
 800e496:	462a      	mov	r2, r5
 800e498:	4b05      	ldr	r3, [pc, #20]	@ (800e4b0 <_vfiprintf_r+0x228>)
 800e49a:	a904      	add	r1, sp, #16
 800e49c:	4630      	mov	r0, r6
 800e49e:	f000 f879 	bl	800e594 <_printf_i>
 800e4a2:	e7e4      	b.n	800e46e <_vfiprintf_r+0x1e6>
 800e4a4:	080117d9 	.word	0x080117d9
 800e4a8:	080117e3 	.word	0x080117e3
 800e4ac:	00000000 	.word	0x00000000
 800e4b0:	0800e263 	.word	0x0800e263
 800e4b4:	080117df 	.word	0x080117df

0800e4b8 <_printf_common>:
 800e4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4bc:	4616      	mov	r6, r2
 800e4be:	4698      	mov	r8, r3
 800e4c0:	688a      	ldr	r2, [r1, #8]
 800e4c2:	690b      	ldr	r3, [r1, #16]
 800e4c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	bfb8      	it	lt
 800e4cc:	4613      	movlt	r3, r2
 800e4ce:	6033      	str	r3, [r6, #0]
 800e4d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e4d4:	4607      	mov	r7, r0
 800e4d6:	460c      	mov	r4, r1
 800e4d8:	b10a      	cbz	r2, 800e4de <_printf_common+0x26>
 800e4da:	3301      	adds	r3, #1
 800e4dc:	6033      	str	r3, [r6, #0]
 800e4de:	6823      	ldr	r3, [r4, #0]
 800e4e0:	0699      	lsls	r1, r3, #26
 800e4e2:	bf42      	ittt	mi
 800e4e4:	6833      	ldrmi	r3, [r6, #0]
 800e4e6:	3302      	addmi	r3, #2
 800e4e8:	6033      	strmi	r3, [r6, #0]
 800e4ea:	6825      	ldr	r5, [r4, #0]
 800e4ec:	f015 0506 	ands.w	r5, r5, #6
 800e4f0:	d106      	bne.n	800e500 <_printf_common+0x48>
 800e4f2:	f104 0a19 	add.w	sl, r4, #25
 800e4f6:	68e3      	ldr	r3, [r4, #12]
 800e4f8:	6832      	ldr	r2, [r6, #0]
 800e4fa:	1a9b      	subs	r3, r3, r2
 800e4fc:	42ab      	cmp	r3, r5
 800e4fe:	dc26      	bgt.n	800e54e <_printf_common+0x96>
 800e500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e504:	6822      	ldr	r2, [r4, #0]
 800e506:	3b00      	subs	r3, #0
 800e508:	bf18      	it	ne
 800e50a:	2301      	movne	r3, #1
 800e50c:	0692      	lsls	r2, r2, #26
 800e50e:	d42b      	bmi.n	800e568 <_printf_common+0xb0>
 800e510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e514:	4641      	mov	r1, r8
 800e516:	4638      	mov	r0, r7
 800e518:	47c8      	blx	r9
 800e51a:	3001      	adds	r0, #1
 800e51c:	d01e      	beq.n	800e55c <_printf_common+0xa4>
 800e51e:	6823      	ldr	r3, [r4, #0]
 800e520:	6922      	ldr	r2, [r4, #16]
 800e522:	f003 0306 	and.w	r3, r3, #6
 800e526:	2b04      	cmp	r3, #4
 800e528:	bf02      	ittt	eq
 800e52a:	68e5      	ldreq	r5, [r4, #12]
 800e52c:	6833      	ldreq	r3, [r6, #0]
 800e52e:	1aed      	subeq	r5, r5, r3
 800e530:	68a3      	ldr	r3, [r4, #8]
 800e532:	bf0c      	ite	eq
 800e534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e538:	2500      	movne	r5, #0
 800e53a:	4293      	cmp	r3, r2
 800e53c:	bfc4      	itt	gt
 800e53e:	1a9b      	subgt	r3, r3, r2
 800e540:	18ed      	addgt	r5, r5, r3
 800e542:	2600      	movs	r6, #0
 800e544:	341a      	adds	r4, #26
 800e546:	42b5      	cmp	r5, r6
 800e548:	d11a      	bne.n	800e580 <_printf_common+0xc8>
 800e54a:	2000      	movs	r0, #0
 800e54c:	e008      	b.n	800e560 <_printf_common+0xa8>
 800e54e:	2301      	movs	r3, #1
 800e550:	4652      	mov	r2, sl
 800e552:	4641      	mov	r1, r8
 800e554:	4638      	mov	r0, r7
 800e556:	47c8      	blx	r9
 800e558:	3001      	adds	r0, #1
 800e55a:	d103      	bne.n	800e564 <_printf_common+0xac>
 800e55c:	f04f 30ff 	mov.w	r0, #4294967295
 800e560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e564:	3501      	adds	r5, #1
 800e566:	e7c6      	b.n	800e4f6 <_printf_common+0x3e>
 800e568:	18e1      	adds	r1, r4, r3
 800e56a:	1c5a      	adds	r2, r3, #1
 800e56c:	2030      	movs	r0, #48	@ 0x30
 800e56e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e572:	4422      	add	r2, r4
 800e574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e57c:	3302      	adds	r3, #2
 800e57e:	e7c7      	b.n	800e510 <_printf_common+0x58>
 800e580:	2301      	movs	r3, #1
 800e582:	4622      	mov	r2, r4
 800e584:	4641      	mov	r1, r8
 800e586:	4638      	mov	r0, r7
 800e588:	47c8      	blx	r9
 800e58a:	3001      	adds	r0, #1
 800e58c:	d0e6      	beq.n	800e55c <_printf_common+0xa4>
 800e58e:	3601      	adds	r6, #1
 800e590:	e7d9      	b.n	800e546 <_printf_common+0x8e>
	...

0800e594 <_printf_i>:
 800e594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e598:	7e0f      	ldrb	r7, [r1, #24]
 800e59a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e59c:	2f78      	cmp	r7, #120	@ 0x78
 800e59e:	4691      	mov	r9, r2
 800e5a0:	4680      	mov	r8, r0
 800e5a2:	460c      	mov	r4, r1
 800e5a4:	469a      	mov	sl, r3
 800e5a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e5aa:	d807      	bhi.n	800e5bc <_printf_i+0x28>
 800e5ac:	2f62      	cmp	r7, #98	@ 0x62
 800e5ae:	d80a      	bhi.n	800e5c6 <_printf_i+0x32>
 800e5b0:	2f00      	cmp	r7, #0
 800e5b2:	f000 80d2 	beq.w	800e75a <_printf_i+0x1c6>
 800e5b6:	2f58      	cmp	r7, #88	@ 0x58
 800e5b8:	f000 80b9 	beq.w	800e72e <_printf_i+0x19a>
 800e5bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e5c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e5c4:	e03a      	b.n	800e63c <_printf_i+0xa8>
 800e5c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e5ca:	2b15      	cmp	r3, #21
 800e5cc:	d8f6      	bhi.n	800e5bc <_printf_i+0x28>
 800e5ce:	a101      	add	r1, pc, #4	@ (adr r1, 800e5d4 <_printf_i+0x40>)
 800e5d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5d4:	0800e62d 	.word	0x0800e62d
 800e5d8:	0800e641 	.word	0x0800e641
 800e5dc:	0800e5bd 	.word	0x0800e5bd
 800e5e0:	0800e5bd 	.word	0x0800e5bd
 800e5e4:	0800e5bd 	.word	0x0800e5bd
 800e5e8:	0800e5bd 	.word	0x0800e5bd
 800e5ec:	0800e641 	.word	0x0800e641
 800e5f0:	0800e5bd 	.word	0x0800e5bd
 800e5f4:	0800e5bd 	.word	0x0800e5bd
 800e5f8:	0800e5bd 	.word	0x0800e5bd
 800e5fc:	0800e5bd 	.word	0x0800e5bd
 800e600:	0800e741 	.word	0x0800e741
 800e604:	0800e66b 	.word	0x0800e66b
 800e608:	0800e6fb 	.word	0x0800e6fb
 800e60c:	0800e5bd 	.word	0x0800e5bd
 800e610:	0800e5bd 	.word	0x0800e5bd
 800e614:	0800e763 	.word	0x0800e763
 800e618:	0800e5bd 	.word	0x0800e5bd
 800e61c:	0800e66b 	.word	0x0800e66b
 800e620:	0800e5bd 	.word	0x0800e5bd
 800e624:	0800e5bd 	.word	0x0800e5bd
 800e628:	0800e703 	.word	0x0800e703
 800e62c:	6833      	ldr	r3, [r6, #0]
 800e62e:	1d1a      	adds	r2, r3, #4
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	6032      	str	r2, [r6, #0]
 800e634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e63c:	2301      	movs	r3, #1
 800e63e:	e09d      	b.n	800e77c <_printf_i+0x1e8>
 800e640:	6833      	ldr	r3, [r6, #0]
 800e642:	6820      	ldr	r0, [r4, #0]
 800e644:	1d19      	adds	r1, r3, #4
 800e646:	6031      	str	r1, [r6, #0]
 800e648:	0606      	lsls	r6, r0, #24
 800e64a:	d501      	bpl.n	800e650 <_printf_i+0xbc>
 800e64c:	681d      	ldr	r5, [r3, #0]
 800e64e:	e003      	b.n	800e658 <_printf_i+0xc4>
 800e650:	0645      	lsls	r5, r0, #25
 800e652:	d5fb      	bpl.n	800e64c <_printf_i+0xb8>
 800e654:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e658:	2d00      	cmp	r5, #0
 800e65a:	da03      	bge.n	800e664 <_printf_i+0xd0>
 800e65c:	232d      	movs	r3, #45	@ 0x2d
 800e65e:	426d      	negs	r5, r5
 800e660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e664:	4859      	ldr	r0, [pc, #356]	@ (800e7cc <_printf_i+0x238>)
 800e666:	230a      	movs	r3, #10
 800e668:	e011      	b.n	800e68e <_printf_i+0xfa>
 800e66a:	6821      	ldr	r1, [r4, #0]
 800e66c:	6833      	ldr	r3, [r6, #0]
 800e66e:	0608      	lsls	r0, r1, #24
 800e670:	f853 5b04 	ldr.w	r5, [r3], #4
 800e674:	d402      	bmi.n	800e67c <_printf_i+0xe8>
 800e676:	0649      	lsls	r1, r1, #25
 800e678:	bf48      	it	mi
 800e67a:	b2ad      	uxthmi	r5, r5
 800e67c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e67e:	4853      	ldr	r0, [pc, #332]	@ (800e7cc <_printf_i+0x238>)
 800e680:	6033      	str	r3, [r6, #0]
 800e682:	bf14      	ite	ne
 800e684:	230a      	movne	r3, #10
 800e686:	2308      	moveq	r3, #8
 800e688:	2100      	movs	r1, #0
 800e68a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e68e:	6866      	ldr	r6, [r4, #4]
 800e690:	60a6      	str	r6, [r4, #8]
 800e692:	2e00      	cmp	r6, #0
 800e694:	bfa2      	ittt	ge
 800e696:	6821      	ldrge	r1, [r4, #0]
 800e698:	f021 0104 	bicge.w	r1, r1, #4
 800e69c:	6021      	strge	r1, [r4, #0]
 800e69e:	b90d      	cbnz	r5, 800e6a4 <_printf_i+0x110>
 800e6a0:	2e00      	cmp	r6, #0
 800e6a2:	d04b      	beq.n	800e73c <_printf_i+0x1a8>
 800e6a4:	4616      	mov	r6, r2
 800e6a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e6aa:	fb03 5711 	mls	r7, r3, r1, r5
 800e6ae:	5dc7      	ldrb	r7, [r0, r7]
 800e6b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e6b4:	462f      	mov	r7, r5
 800e6b6:	42bb      	cmp	r3, r7
 800e6b8:	460d      	mov	r5, r1
 800e6ba:	d9f4      	bls.n	800e6a6 <_printf_i+0x112>
 800e6bc:	2b08      	cmp	r3, #8
 800e6be:	d10b      	bne.n	800e6d8 <_printf_i+0x144>
 800e6c0:	6823      	ldr	r3, [r4, #0]
 800e6c2:	07df      	lsls	r7, r3, #31
 800e6c4:	d508      	bpl.n	800e6d8 <_printf_i+0x144>
 800e6c6:	6923      	ldr	r3, [r4, #16]
 800e6c8:	6861      	ldr	r1, [r4, #4]
 800e6ca:	4299      	cmp	r1, r3
 800e6cc:	bfde      	ittt	le
 800e6ce:	2330      	movle	r3, #48	@ 0x30
 800e6d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e6d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e6d8:	1b92      	subs	r2, r2, r6
 800e6da:	6122      	str	r2, [r4, #16]
 800e6dc:	f8cd a000 	str.w	sl, [sp]
 800e6e0:	464b      	mov	r3, r9
 800e6e2:	aa03      	add	r2, sp, #12
 800e6e4:	4621      	mov	r1, r4
 800e6e6:	4640      	mov	r0, r8
 800e6e8:	f7ff fee6 	bl	800e4b8 <_printf_common>
 800e6ec:	3001      	adds	r0, #1
 800e6ee:	d14a      	bne.n	800e786 <_printf_i+0x1f2>
 800e6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f4:	b004      	add	sp, #16
 800e6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6fa:	6823      	ldr	r3, [r4, #0]
 800e6fc:	f043 0320 	orr.w	r3, r3, #32
 800e700:	6023      	str	r3, [r4, #0]
 800e702:	4833      	ldr	r0, [pc, #204]	@ (800e7d0 <_printf_i+0x23c>)
 800e704:	2778      	movs	r7, #120	@ 0x78
 800e706:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e70a:	6823      	ldr	r3, [r4, #0]
 800e70c:	6831      	ldr	r1, [r6, #0]
 800e70e:	061f      	lsls	r7, r3, #24
 800e710:	f851 5b04 	ldr.w	r5, [r1], #4
 800e714:	d402      	bmi.n	800e71c <_printf_i+0x188>
 800e716:	065f      	lsls	r7, r3, #25
 800e718:	bf48      	it	mi
 800e71a:	b2ad      	uxthmi	r5, r5
 800e71c:	6031      	str	r1, [r6, #0]
 800e71e:	07d9      	lsls	r1, r3, #31
 800e720:	bf44      	itt	mi
 800e722:	f043 0320 	orrmi.w	r3, r3, #32
 800e726:	6023      	strmi	r3, [r4, #0]
 800e728:	b11d      	cbz	r5, 800e732 <_printf_i+0x19e>
 800e72a:	2310      	movs	r3, #16
 800e72c:	e7ac      	b.n	800e688 <_printf_i+0xf4>
 800e72e:	4827      	ldr	r0, [pc, #156]	@ (800e7cc <_printf_i+0x238>)
 800e730:	e7e9      	b.n	800e706 <_printf_i+0x172>
 800e732:	6823      	ldr	r3, [r4, #0]
 800e734:	f023 0320 	bic.w	r3, r3, #32
 800e738:	6023      	str	r3, [r4, #0]
 800e73a:	e7f6      	b.n	800e72a <_printf_i+0x196>
 800e73c:	4616      	mov	r6, r2
 800e73e:	e7bd      	b.n	800e6bc <_printf_i+0x128>
 800e740:	6833      	ldr	r3, [r6, #0]
 800e742:	6825      	ldr	r5, [r4, #0]
 800e744:	6961      	ldr	r1, [r4, #20]
 800e746:	1d18      	adds	r0, r3, #4
 800e748:	6030      	str	r0, [r6, #0]
 800e74a:	062e      	lsls	r6, r5, #24
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	d501      	bpl.n	800e754 <_printf_i+0x1c0>
 800e750:	6019      	str	r1, [r3, #0]
 800e752:	e002      	b.n	800e75a <_printf_i+0x1c6>
 800e754:	0668      	lsls	r0, r5, #25
 800e756:	d5fb      	bpl.n	800e750 <_printf_i+0x1bc>
 800e758:	8019      	strh	r1, [r3, #0]
 800e75a:	2300      	movs	r3, #0
 800e75c:	6123      	str	r3, [r4, #16]
 800e75e:	4616      	mov	r6, r2
 800e760:	e7bc      	b.n	800e6dc <_printf_i+0x148>
 800e762:	6833      	ldr	r3, [r6, #0]
 800e764:	1d1a      	adds	r2, r3, #4
 800e766:	6032      	str	r2, [r6, #0]
 800e768:	681e      	ldr	r6, [r3, #0]
 800e76a:	6862      	ldr	r2, [r4, #4]
 800e76c:	2100      	movs	r1, #0
 800e76e:	4630      	mov	r0, r6
 800e770:	f7f1 fdce 	bl	8000310 <memchr>
 800e774:	b108      	cbz	r0, 800e77a <_printf_i+0x1e6>
 800e776:	1b80      	subs	r0, r0, r6
 800e778:	6060      	str	r0, [r4, #4]
 800e77a:	6863      	ldr	r3, [r4, #4]
 800e77c:	6123      	str	r3, [r4, #16]
 800e77e:	2300      	movs	r3, #0
 800e780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e784:	e7aa      	b.n	800e6dc <_printf_i+0x148>
 800e786:	6923      	ldr	r3, [r4, #16]
 800e788:	4632      	mov	r2, r6
 800e78a:	4649      	mov	r1, r9
 800e78c:	4640      	mov	r0, r8
 800e78e:	47d0      	blx	sl
 800e790:	3001      	adds	r0, #1
 800e792:	d0ad      	beq.n	800e6f0 <_printf_i+0x15c>
 800e794:	6823      	ldr	r3, [r4, #0]
 800e796:	079b      	lsls	r3, r3, #30
 800e798:	d413      	bmi.n	800e7c2 <_printf_i+0x22e>
 800e79a:	68e0      	ldr	r0, [r4, #12]
 800e79c:	9b03      	ldr	r3, [sp, #12]
 800e79e:	4298      	cmp	r0, r3
 800e7a0:	bfb8      	it	lt
 800e7a2:	4618      	movlt	r0, r3
 800e7a4:	e7a6      	b.n	800e6f4 <_printf_i+0x160>
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	4632      	mov	r2, r6
 800e7aa:	4649      	mov	r1, r9
 800e7ac:	4640      	mov	r0, r8
 800e7ae:	47d0      	blx	sl
 800e7b0:	3001      	adds	r0, #1
 800e7b2:	d09d      	beq.n	800e6f0 <_printf_i+0x15c>
 800e7b4:	3501      	adds	r5, #1
 800e7b6:	68e3      	ldr	r3, [r4, #12]
 800e7b8:	9903      	ldr	r1, [sp, #12]
 800e7ba:	1a5b      	subs	r3, r3, r1
 800e7bc:	42ab      	cmp	r3, r5
 800e7be:	dcf2      	bgt.n	800e7a6 <_printf_i+0x212>
 800e7c0:	e7eb      	b.n	800e79a <_printf_i+0x206>
 800e7c2:	2500      	movs	r5, #0
 800e7c4:	f104 0619 	add.w	r6, r4, #25
 800e7c8:	e7f5      	b.n	800e7b6 <_printf_i+0x222>
 800e7ca:	bf00      	nop
 800e7cc:	080117ea 	.word	0x080117ea
 800e7d0:	080117fb 	.word	0x080117fb

0800e7d4 <__sflush_r>:
 800e7d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7dc:	0716      	lsls	r6, r2, #28
 800e7de:	4605      	mov	r5, r0
 800e7e0:	460c      	mov	r4, r1
 800e7e2:	d454      	bmi.n	800e88e <__sflush_r+0xba>
 800e7e4:	684b      	ldr	r3, [r1, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	dc02      	bgt.n	800e7f0 <__sflush_r+0x1c>
 800e7ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	dd48      	ble.n	800e882 <__sflush_r+0xae>
 800e7f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e7f2:	2e00      	cmp	r6, #0
 800e7f4:	d045      	beq.n	800e882 <__sflush_r+0xae>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e7fc:	682f      	ldr	r7, [r5, #0]
 800e7fe:	6a21      	ldr	r1, [r4, #32]
 800e800:	602b      	str	r3, [r5, #0]
 800e802:	d030      	beq.n	800e866 <__sflush_r+0x92>
 800e804:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e806:	89a3      	ldrh	r3, [r4, #12]
 800e808:	0759      	lsls	r1, r3, #29
 800e80a:	d505      	bpl.n	800e818 <__sflush_r+0x44>
 800e80c:	6863      	ldr	r3, [r4, #4]
 800e80e:	1ad2      	subs	r2, r2, r3
 800e810:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e812:	b10b      	cbz	r3, 800e818 <__sflush_r+0x44>
 800e814:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e816:	1ad2      	subs	r2, r2, r3
 800e818:	2300      	movs	r3, #0
 800e81a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e81c:	6a21      	ldr	r1, [r4, #32]
 800e81e:	4628      	mov	r0, r5
 800e820:	47b0      	blx	r6
 800e822:	1c43      	adds	r3, r0, #1
 800e824:	89a3      	ldrh	r3, [r4, #12]
 800e826:	d106      	bne.n	800e836 <__sflush_r+0x62>
 800e828:	6829      	ldr	r1, [r5, #0]
 800e82a:	291d      	cmp	r1, #29
 800e82c:	d82b      	bhi.n	800e886 <__sflush_r+0xb2>
 800e82e:	4a2a      	ldr	r2, [pc, #168]	@ (800e8d8 <__sflush_r+0x104>)
 800e830:	410a      	asrs	r2, r1
 800e832:	07d6      	lsls	r6, r2, #31
 800e834:	d427      	bmi.n	800e886 <__sflush_r+0xb2>
 800e836:	2200      	movs	r2, #0
 800e838:	6062      	str	r2, [r4, #4]
 800e83a:	04d9      	lsls	r1, r3, #19
 800e83c:	6922      	ldr	r2, [r4, #16]
 800e83e:	6022      	str	r2, [r4, #0]
 800e840:	d504      	bpl.n	800e84c <__sflush_r+0x78>
 800e842:	1c42      	adds	r2, r0, #1
 800e844:	d101      	bne.n	800e84a <__sflush_r+0x76>
 800e846:	682b      	ldr	r3, [r5, #0]
 800e848:	b903      	cbnz	r3, 800e84c <__sflush_r+0x78>
 800e84a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e84c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e84e:	602f      	str	r7, [r5, #0]
 800e850:	b1b9      	cbz	r1, 800e882 <__sflush_r+0xae>
 800e852:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e856:	4299      	cmp	r1, r3
 800e858:	d002      	beq.n	800e860 <__sflush_r+0x8c>
 800e85a:	4628      	mov	r0, r5
 800e85c:	f7ff fbea 	bl	800e034 <_free_r>
 800e860:	2300      	movs	r3, #0
 800e862:	6363      	str	r3, [r4, #52]	@ 0x34
 800e864:	e00d      	b.n	800e882 <__sflush_r+0xae>
 800e866:	2301      	movs	r3, #1
 800e868:	4628      	mov	r0, r5
 800e86a:	47b0      	blx	r6
 800e86c:	4602      	mov	r2, r0
 800e86e:	1c50      	adds	r0, r2, #1
 800e870:	d1c9      	bne.n	800e806 <__sflush_r+0x32>
 800e872:	682b      	ldr	r3, [r5, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d0c6      	beq.n	800e806 <__sflush_r+0x32>
 800e878:	2b1d      	cmp	r3, #29
 800e87a:	d001      	beq.n	800e880 <__sflush_r+0xac>
 800e87c:	2b16      	cmp	r3, #22
 800e87e:	d11e      	bne.n	800e8be <__sflush_r+0xea>
 800e880:	602f      	str	r7, [r5, #0]
 800e882:	2000      	movs	r0, #0
 800e884:	e022      	b.n	800e8cc <__sflush_r+0xf8>
 800e886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e88a:	b21b      	sxth	r3, r3
 800e88c:	e01b      	b.n	800e8c6 <__sflush_r+0xf2>
 800e88e:	690f      	ldr	r7, [r1, #16]
 800e890:	2f00      	cmp	r7, #0
 800e892:	d0f6      	beq.n	800e882 <__sflush_r+0xae>
 800e894:	0793      	lsls	r3, r2, #30
 800e896:	680e      	ldr	r6, [r1, #0]
 800e898:	bf08      	it	eq
 800e89a:	694b      	ldreq	r3, [r1, #20]
 800e89c:	600f      	str	r7, [r1, #0]
 800e89e:	bf18      	it	ne
 800e8a0:	2300      	movne	r3, #0
 800e8a2:	eba6 0807 	sub.w	r8, r6, r7
 800e8a6:	608b      	str	r3, [r1, #8]
 800e8a8:	f1b8 0f00 	cmp.w	r8, #0
 800e8ac:	dde9      	ble.n	800e882 <__sflush_r+0xae>
 800e8ae:	6a21      	ldr	r1, [r4, #32]
 800e8b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e8b2:	4643      	mov	r3, r8
 800e8b4:	463a      	mov	r2, r7
 800e8b6:	4628      	mov	r0, r5
 800e8b8:	47b0      	blx	r6
 800e8ba:	2800      	cmp	r0, #0
 800e8bc:	dc08      	bgt.n	800e8d0 <__sflush_r+0xfc>
 800e8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8c6:	81a3      	strh	r3, [r4, #12]
 800e8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d0:	4407      	add	r7, r0
 800e8d2:	eba8 0800 	sub.w	r8, r8, r0
 800e8d6:	e7e7      	b.n	800e8a8 <__sflush_r+0xd4>
 800e8d8:	dfbffffe 	.word	0xdfbffffe

0800e8dc <_fflush_r>:
 800e8dc:	b538      	push	{r3, r4, r5, lr}
 800e8de:	690b      	ldr	r3, [r1, #16]
 800e8e0:	4605      	mov	r5, r0
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	b913      	cbnz	r3, 800e8ec <_fflush_r+0x10>
 800e8e6:	2500      	movs	r5, #0
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	bd38      	pop	{r3, r4, r5, pc}
 800e8ec:	b118      	cbz	r0, 800e8f6 <_fflush_r+0x1a>
 800e8ee:	6a03      	ldr	r3, [r0, #32]
 800e8f0:	b90b      	cbnz	r3, 800e8f6 <_fflush_r+0x1a>
 800e8f2:	f7ff fa61 	bl	800ddb8 <__sinit>
 800e8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d0f3      	beq.n	800e8e6 <_fflush_r+0xa>
 800e8fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e900:	07d0      	lsls	r0, r2, #31
 800e902:	d404      	bmi.n	800e90e <_fflush_r+0x32>
 800e904:	0599      	lsls	r1, r3, #22
 800e906:	d402      	bmi.n	800e90e <_fflush_r+0x32>
 800e908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e90a:	f7ff fb64 	bl	800dfd6 <__retarget_lock_acquire_recursive>
 800e90e:	4628      	mov	r0, r5
 800e910:	4621      	mov	r1, r4
 800e912:	f7ff ff5f 	bl	800e7d4 <__sflush_r>
 800e916:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e918:	07da      	lsls	r2, r3, #31
 800e91a:	4605      	mov	r5, r0
 800e91c:	d4e4      	bmi.n	800e8e8 <_fflush_r+0xc>
 800e91e:	89a3      	ldrh	r3, [r4, #12]
 800e920:	059b      	lsls	r3, r3, #22
 800e922:	d4e1      	bmi.n	800e8e8 <_fflush_r+0xc>
 800e924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e926:	f7ff fb57 	bl	800dfd8 <__retarget_lock_release_recursive>
 800e92a:	e7dd      	b.n	800e8e8 <_fflush_r+0xc>

0800e92c <fiprintf>:
 800e92c:	b40e      	push	{r1, r2, r3}
 800e92e:	b503      	push	{r0, r1, lr}
 800e930:	4601      	mov	r1, r0
 800e932:	ab03      	add	r3, sp, #12
 800e934:	4805      	ldr	r0, [pc, #20]	@ (800e94c <fiprintf+0x20>)
 800e936:	f853 2b04 	ldr.w	r2, [r3], #4
 800e93a:	6800      	ldr	r0, [r0, #0]
 800e93c:	9301      	str	r3, [sp, #4]
 800e93e:	f7ff fca3 	bl	800e288 <_vfiprintf_r>
 800e942:	b002      	add	sp, #8
 800e944:	f85d eb04 	ldr.w	lr, [sp], #4
 800e948:	b003      	add	sp, #12
 800e94a:	4770      	bx	lr
 800e94c:	2400003c 	.word	0x2400003c

0800e950 <__swbuf_r>:
 800e950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e952:	460e      	mov	r6, r1
 800e954:	4614      	mov	r4, r2
 800e956:	4605      	mov	r5, r0
 800e958:	b118      	cbz	r0, 800e962 <__swbuf_r+0x12>
 800e95a:	6a03      	ldr	r3, [r0, #32]
 800e95c:	b90b      	cbnz	r3, 800e962 <__swbuf_r+0x12>
 800e95e:	f7ff fa2b 	bl	800ddb8 <__sinit>
 800e962:	69a3      	ldr	r3, [r4, #24]
 800e964:	60a3      	str	r3, [r4, #8]
 800e966:	89a3      	ldrh	r3, [r4, #12]
 800e968:	071a      	lsls	r2, r3, #28
 800e96a:	d501      	bpl.n	800e970 <__swbuf_r+0x20>
 800e96c:	6923      	ldr	r3, [r4, #16]
 800e96e:	b943      	cbnz	r3, 800e982 <__swbuf_r+0x32>
 800e970:	4621      	mov	r1, r4
 800e972:	4628      	mov	r0, r5
 800e974:	f000 f82a 	bl	800e9cc <__swsetup_r>
 800e978:	b118      	cbz	r0, 800e982 <__swbuf_r+0x32>
 800e97a:	f04f 37ff 	mov.w	r7, #4294967295
 800e97e:	4638      	mov	r0, r7
 800e980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	6922      	ldr	r2, [r4, #16]
 800e986:	1a98      	subs	r0, r3, r2
 800e988:	6963      	ldr	r3, [r4, #20]
 800e98a:	b2f6      	uxtb	r6, r6
 800e98c:	4283      	cmp	r3, r0
 800e98e:	4637      	mov	r7, r6
 800e990:	dc05      	bgt.n	800e99e <__swbuf_r+0x4e>
 800e992:	4621      	mov	r1, r4
 800e994:	4628      	mov	r0, r5
 800e996:	f7ff ffa1 	bl	800e8dc <_fflush_r>
 800e99a:	2800      	cmp	r0, #0
 800e99c:	d1ed      	bne.n	800e97a <__swbuf_r+0x2a>
 800e99e:	68a3      	ldr	r3, [r4, #8]
 800e9a0:	3b01      	subs	r3, #1
 800e9a2:	60a3      	str	r3, [r4, #8]
 800e9a4:	6823      	ldr	r3, [r4, #0]
 800e9a6:	1c5a      	adds	r2, r3, #1
 800e9a8:	6022      	str	r2, [r4, #0]
 800e9aa:	701e      	strb	r6, [r3, #0]
 800e9ac:	6962      	ldr	r2, [r4, #20]
 800e9ae:	1c43      	adds	r3, r0, #1
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d004      	beq.n	800e9be <__swbuf_r+0x6e>
 800e9b4:	89a3      	ldrh	r3, [r4, #12]
 800e9b6:	07db      	lsls	r3, r3, #31
 800e9b8:	d5e1      	bpl.n	800e97e <__swbuf_r+0x2e>
 800e9ba:	2e0a      	cmp	r6, #10
 800e9bc:	d1df      	bne.n	800e97e <__swbuf_r+0x2e>
 800e9be:	4621      	mov	r1, r4
 800e9c0:	4628      	mov	r0, r5
 800e9c2:	f7ff ff8b 	bl	800e8dc <_fflush_r>
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	d0d9      	beq.n	800e97e <__swbuf_r+0x2e>
 800e9ca:	e7d6      	b.n	800e97a <__swbuf_r+0x2a>

0800e9cc <__swsetup_r>:
 800e9cc:	b538      	push	{r3, r4, r5, lr}
 800e9ce:	4b29      	ldr	r3, [pc, #164]	@ (800ea74 <__swsetup_r+0xa8>)
 800e9d0:	4605      	mov	r5, r0
 800e9d2:	6818      	ldr	r0, [r3, #0]
 800e9d4:	460c      	mov	r4, r1
 800e9d6:	b118      	cbz	r0, 800e9e0 <__swsetup_r+0x14>
 800e9d8:	6a03      	ldr	r3, [r0, #32]
 800e9da:	b90b      	cbnz	r3, 800e9e0 <__swsetup_r+0x14>
 800e9dc:	f7ff f9ec 	bl	800ddb8 <__sinit>
 800e9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9e4:	0719      	lsls	r1, r3, #28
 800e9e6:	d422      	bmi.n	800ea2e <__swsetup_r+0x62>
 800e9e8:	06da      	lsls	r2, r3, #27
 800e9ea:	d407      	bmi.n	800e9fc <__swsetup_r+0x30>
 800e9ec:	2209      	movs	r2, #9
 800e9ee:	602a      	str	r2, [r5, #0]
 800e9f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9f4:	81a3      	strh	r3, [r4, #12]
 800e9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e9fa:	e033      	b.n	800ea64 <__swsetup_r+0x98>
 800e9fc:	0758      	lsls	r0, r3, #29
 800e9fe:	d512      	bpl.n	800ea26 <__swsetup_r+0x5a>
 800ea00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea02:	b141      	cbz	r1, 800ea16 <__swsetup_r+0x4a>
 800ea04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea08:	4299      	cmp	r1, r3
 800ea0a:	d002      	beq.n	800ea12 <__swsetup_r+0x46>
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	f7ff fb11 	bl	800e034 <_free_r>
 800ea12:	2300      	movs	r3, #0
 800ea14:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea16:	89a3      	ldrh	r3, [r4, #12]
 800ea18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ea1c:	81a3      	strh	r3, [r4, #12]
 800ea1e:	2300      	movs	r3, #0
 800ea20:	6063      	str	r3, [r4, #4]
 800ea22:	6923      	ldr	r3, [r4, #16]
 800ea24:	6023      	str	r3, [r4, #0]
 800ea26:	89a3      	ldrh	r3, [r4, #12]
 800ea28:	f043 0308 	orr.w	r3, r3, #8
 800ea2c:	81a3      	strh	r3, [r4, #12]
 800ea2e:	6923      	ldr	r3, [r4, #16]
 800ea30:	b94b      	cbnz	r3, 800ea46 <__swsetup_r+0x7a>
 800ea32:	89a3      	ldrh	r3, [r4, #12]
 800ea34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ea38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea3c:	d003      	beq.n	800ea46 <__swsetup_r+0x7a>
 800ea3e:	4621      	mov	r1, r4
 800ea40:	4628      	mov	r0, r5
 800ea42:	f000 f856 	bl	800eaf2 <__smakebuf_r>
 800ea46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea4a:	f013 0201 	ands.w	r2, r3, #1
 800ea4e:	d00a      	beq.n	800ea66 <__swsetup_r+0x9a>
 800ea50:	2200      	movs	r2, #0
 800ea52:	60a2      	str	r2, [r4, #8]
 800ea54:	6962      	ldr	r2, [r4, #20]
 800ea56:	4252      	negs	r2, r2
 800ea58:	61a2      	str	r2, [r4, #24]
 800ea5a:	6922      	ldr	r2, [r4, #16]
 800ea5c:	b942      	cbnz	r2, 800ea70 <__swsetup_r+0xa4>
 800ea5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ea62:	d1c5      	bne.n	800e9f0 <__swsetup_r+0x24>
 800ea64:	bd38      	pop	{r3, r4, r5, pc}
 800ea66:	0799      	lsls	r1, r3, #30
 800ea68:	bf58      	it	pl
 800ea6a:	6962      	ldrpl	r2, [r4, #20]
 800ea6c:	60a2      	str	r2, [r4, #8]
 800ea6e:	e7f4      	b.n	800ea5a <__swsetup_r+0x8e>
 800ea70:	2000      	movs	r0, #0
 800ea72:	e7f7      	b.n	800ea64 <__swsetup_r+0x98>
 800ea74:	2400003c 	.word	0x2400003c

0800ea78 <_sbrk_r>:
 800ea78:	b538      	push	{r3, r4, r5, lr}
 800ea7a:	4d06      	ldr	r5, [pc, #24]	@ (800ea94 <_sbrk_r+0x1c>)
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	4604      	mov	r4, r0
 800ea80:	4608      	mov	r0, r1
 800ea82:	602b      	str	r3, [r5, #0]
 800ea84:	f7f1 fed0 	bl	8000828 <_sbrk>
 800ea88:	1c43      	adds	r3, r0, #1
 800ea8a:	d102      	bne.n	800ea92 <_sbrk_r+0x1a>
 800ea8c:	682b      	ldr	r3, [r5, #0]
 800ea8e:	b103      	cbz	r3, 800ea92 <_sbrk_r+0x1a>
 800ea90:	6023      	str	r3, [r4, #0]
 800ea92:	bd38      	pop	{r3, r4, r5, pc}
 800ea94:	24007e04 	.word	0x24007e04

0800ea98 <abort>:
 800ea98:	b508      	push	{r3, lr}
 800ea9a:	2006      	movs	r0, #6
 800ea9c:	f000 f88e 	bl	800ebbc <raise>
 800eaa0:	2001      	movs	r0, #1
 800eaa2:	f7f1 fe49 	bl	8000738 <_exit>

0800eaa6 <__swhatbuf_r>:
 800eaa6:	b570      	push	{r4, r5, r6, lr}
 800eaa8:	460c      	mov	r4, r1
 800eaaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaae:	2900      	cmp	r1, #0
 800eab0:	b096      	sub	sp, #88	@ 0x58
 800eab2:	4615      	mov	r5, r2
 800eab4:	461e      	mov	r6, r3
 800eab6:	da0d      	bge.n	800ead4 <__swhatbuf_r+0x2e>
 800eab8:	89a3      	ldrh	r3, [r4, #12]
 800eaba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eabe:	f04f 0100 	mov.w	r1, #0
 800eac2:	bf14      	ite	ne
 800eac4:	2340      	movne	r3, #64	@ 0x40
 800eac6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eaca:	2000      	movs	r0, #0
 800eacc:	6031      	str	r1, [r6, #0]
 800eace:	602b      	str	r3, [r5, #0]
 800ead0:	b016      	add	sp, #88	@ 0x58
 800ead2:	bd70      	pop	{r4, r5, r6, pc}
 800ead4:	466a      	mov	r2, sp
 800ead6:	f000 f879 	bl	800ebcc <_fstat_r>
 800eada:	2800      	cmp	r0, #0
 800eadc:	dbec      	blt.n	800eab8 <__swhatbuf_r+0x12>
 800eade:	9901      	ldr	r1, [sp, #4]
 800eae0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eae4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eae8:	4259      	negs	r1, r3
 800eaea:	4159      	adcs	r1, r3
 800eaec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eaf0:	e7eb      	b.n	800eaca <__swhatbuf_r+0x24>

0800eaf2 <__smakebuf_r>:
 800eaf2:	898b      	ldrh	r3, [r1, #12]
 800eaf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eaf6:	079d      	lsls	r5, r3, #30
 800eaf8:	4606      	mov	r6, r0
 800eafa:	460c      	mov	r4, r1
 800eafc:	d507      	bpl.n	800eb0e <__smakebuf_r+0x1c>
 800eafe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eb02:	6023      	str	r3, [r4, #0]
 800eb04:	6123      	str	r3, [r4, #16]
 800eb06:	2301      	movs	r3, #1
 800eb08:	6163      	str	r3, [r4, #20]
 800eb0a:	b003      	add	sp, #12
 800eb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb0e:	ab01      	add	r3, sp, #4
 800eb10:	466a      	mov	r2, sp
 800eb12:	f7ff ffc8 	bl	800eaa6 <__swhatbuf_r>
 800eb16:	9f00      	ldr	r7, [sp, #0]
 800eb18:	4605      	mov	r5, r0
 800eb1a:	4639      	mov	r1, r7
 800eb1c:	4630      	mov	r0, r6
 800eb1e:	f7ff fafd 	bl	800e11c <_malloc_r>
 800eb22:	b948      	cbnz	r0, 800eb38 <__smakebuf_r+0x46>
 800eb24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb28:	059a      	lsls	r2, r3, #22
 800eb2a:	d4ee      	bmi.n	800eb0a <__smakebuf_r+0x18>
 800eb2c:	f023 0303 	bic.w	r3, r3, #3
 800eb30:	f043 0302 	orr.w	r3, r3, #2
 800eb34:	81a3      	strh	r3, [r4, #12]
 800eb36:	e7e2      	b.n	800eafe <__smakebuf_r+0xc>
 800eb38:	89a3      	ldrh	r3, [r4, #12]
 800eb3a:	6020      	str	r0, [r4, #0]
 800eb3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb40:	81a3      	strh	r3, [r4, #12]
 800eb42:	9b01      	ldr	r3, [sp, #4]
 800eb44:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eb48:	b15b      	cbz	r3, 800eb62 <__smakebuf_r+0x70>
 800eb4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb4e:	4630      	mov	r0, r6
 800eb50:	f000 f84e 	bl	800ebf0 <_isatty_r>
 800eb54:	b128      	cbz	r0, 800eb62 <__smakebuf_r+0x70>
 800eb56:	89a3      	ldrh	r3, [r4, #12]
 800eb58:	f023 0303 	bic.w	r3, r3, #3
 800eb5c:	f043 0301 	orr.w	r3, r3, #1
 800eb60:	81a3      	strh	r3, [r4, #12]
 800eb62:	89a3      	ldrh	r3, [r4, #12]
 800eb64:	431d      	orrs	r5, r3
 800eb66:	81a5      	strh	r5, [r4, #12]
 800eb68:	e7cf      	b.n	800eb0a <__smakebuf_r+0x18>

0800eb6a <_raise_r>:
 800eb6a:	291f      	cmp	r1, #31
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	4605      	mov	r5, r0
 800eb70:	460c      	mov	r4, r1
 800eb72:	d904      	bls.n	800eb7e <_raise_r+0x14>
 800eb74:	2316      	movs	r3, #22
 800eb76:	6003      	str	r3, [r0, #0]
 800eb78:	f04f 30ff 	mov.w	r0, #4294967295
 800eb7c:	bd38      	pop	{r3, r4, r5, pc}
 800eb7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eb80:	b112      	cbz	r2, 800eb88 <_raise_r+0x1e>
 800eb82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb86:	b94b      	cbnz	r3, 800eb9c <_raise_r+0x32>
 800eb88:	4628      	mov	r0, r5
 800eb8a:	f000 f853 	bl	800ec34 <_getpid_r>
 800eb8e:	4622      	mov	r2, r4
 800eb90:	4601      	mov	r1, r0
 800eb92:	4628      	mov	r0, r5
 800eb94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb98:	f000 b83a 	b.w	800ec10 <_kill_r>
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d00a      	beq.n	800ebb6 <_raise_r+0x4c>
 800eba0:	1c59      	adds	r1, r3, #1
 800eba2:	d103      	bne.n	800ebac <_raise_r+0x42>
 800eba4:	2316      	movs	r3, #22
 800eba6:	6003      	str	r3, [r0, #0]
 800eba8:	2001      	movs	r0, #1
 800ebaa:	e7e7      	b.n	800eb7c <_raise_r+0x12>
 800ebac:	2100      	movs	r1, #0
 800ebae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	4798      	blx	r3
 800ebb6:	2000      	movs	r0, #0
 800ebb8:	e7e0      	b.n	800eb7c <_raise_r+0x12>
	...

0800ebbc <raise>:
 800ebbc:	4b02      	ldr	r3, [pc, #8]	@ (800ebc8 <raise+0xc>)
 800ebbe:	4601      	mov	r1, r0
 800ebc0:	6818      	ldr	r0, [r3, #0]
 800ebc2:	f7ff bfd2 	b.w	800eb6a <_raise_r>
 800ebc6:	bf00      	nop
 800ebc8:	2400003c 	.word	0x2400003c

0800ebcc <_fstat_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4d07      	ldr	r5, [pc, #28]	@ (800ebec <_fstat_r+0x20>)
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	4608      	mov	r0, r1
 800ebd6:	4611      	mov	r1, r2
 800ebd8:	602b      	str	r3, [r5, #0]
 800ebda:	f7f1 fdfd 	bl	80007d8 <_fstat>
 800ebde:	1c43      	adds	r3, r0, #1
 800ebe0:	d102      	bne.n	800ebe8 <_fstat_r+0x1c>
 800ebe2:	682b      	ldr	r3, [r5, #0]
 800ebe4:	b103      	cbz	r3, 800ebe8 <_fstat_r+0x1c>
 800ebe6:	6023      	str	r3, [r4, #0]
 800ebe8:	bd38      	pop	{r3, r4, r5, pc}
 800ebea:	bf00      	nop
 800ebec:	24007e04 	.word	0x24007e04

0800ebf0 <_isatty_r>:
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	4d06      	ldr	r5, [pc, #24]	@ (800ec0c <_isatty_r+0x1c>)
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	4604      	mov	r4, r0
 800ebf8:	4608      	mov	r0, r1
 800ebfa:	602b      	str	r3, [r5, #0]
 800ebfc:	f7f1 fdfc 	bl	80007f8 <_isatty>
 800ec00:	1c43      	adds	r3, r0, #1
 800ec02:	d102      	bne.n	800ec0a <_isatty_r+0x1a>
 800ec04:	682b      	ldr	r3, [r5, #0]
 800ec06:	b103      	cbz	r3, 800ec0a <_isatty_r+0x1a>
 800ec08:	6023      	str	r3, [r4, #0]
 800ec0a:	bd38      	pop	{r3, r4, r5, pc}
 800ec0c:	24007e04 	.word	0x24007e04

0800ec10 <_kill_r>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	4d07      	ldr	r5, [pc, #28]	@ (800ec30 <_kill_r+0x20>)
 800ec14:	2300      	movs	r3, #0
 800ec16:	4604      	mov	r4, r0
 800ec18:	4608      	mov	r0, r1
 800ec1a:	4611      	mov	r1, r2
 800ec1c:	602b      	str	r3, [r5, #0]
 800ec1e:	f7f1 fd79 	bl	8000714 <_kill>
 800ec22:	1c43      	adds	r3, r0, #1
 800ec24:	d102      	bne.n	800ec2c <_kill_r+0x1c>
 800ec26:	682b      	ldr	r3, [r5, #0]
 800ec28:	b103      	cbz	r3, 800ec2c <_kill_r+0x1c>
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	bd38      	pop	{r3, r4, r5, pc}
 800ec2e:	bf00      	nop
 800ec30:	24007e04 	.word	0x24007e04

0800ec34 <_getpid_r>:
 800ec34:	f7f1 bd65 	b.w	8000702 <_getpid>

0800ec38 <_init>:
 800ec38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec3a:	bf00      	nop
 800ec3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec3e:	bc08      	pop	{r3}
 800ec40:	469e      	mov	lr, r3
 800ec42:	4770      	bx	lr

0800ec44 <_fini>:
 800ec44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec46:	bf00      	nop
 800ec48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec4a:	bc08      	pop	{r3}
 800ec4c:	469e      	mov	lr, r3
 800ec4e:	4770      	bx	lr
